
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# Fork by Venexs


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import threading
import ujson
import csv
import subprocess
import time
import cv2
from PIL import Image, ImageTk
from datetime import datetime, timedelta
import pandas as pd
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.misc


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("712x432")
window.configure(bg = "#0678FF")
window.configure(bg="#FFFFFF")
window.attributes('-alpha', 0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

initial_height = 0
window_width = 712
target_height = 432
thesystem.system.animate_window_open(window, target_height, window_width, step=40, delay=1)

subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])

thesystem.misc.update_screen("Status")

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(eve):
    thesystem.misc.update_screen("Status", "Close")

    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files\Mod\default\sfx_close.py'])
    stop_update_thread_func()
    thesystem.system.animate_window_close(window, initial_height, window_width, step=20, delay=1)

def title_chng(event):
    subprocess.Popen(['python', 'Manwha Version/Equip Title/gui.py'])

    ex_close(0)

def title_color(name):
    if name=="False Ranker":
        color="#FF2F2F"
    elif name=="One Above All":
        color="#FFCF26"
    else:
        color="#FFFFFF"

    return color

def load_fatigue_value():
    try:
        with open('Files/Status.json', 'r') as file:
            content = file.read().strip()
            if not content:
                raise ValueError("The status.json file is empty.")
            
            data = ujson.load(file)
            fatigue = data["status"][0].get("fatigue", 0)
            fatigue_max = data["status"][0].get("fatigue_max", 1)
            fatigue_percent = int((fatigue / fatigue_max) * 100)
            return fatigue_percent
    except:
        return 0

update_thread = None
stop_update_thread = False

# Function to update fatigue text in a separate thread
def update_fatigue_text(canvas, fatigue_val):
    global stop_update_thread
    previous_fatigue_percent = None

    while not stop_update_thread:
        current_fatigue_percent = load_fatigue_value()
        if current_fatigue_percent != previous_fatigue_percent:
            canvas.itemconfig(fatigue_val, text=f"FATIGUE: {current_fatigue_percent}%")
            previous_fatigue_percent = current_fatigue_percent

        # Break sleep into smaller intervals to check stop signal
        for _ in range(180):  # 180 seconds = 3 minutes
            if stop_update_thread:
                return
            time.sleep(1)

# Function to start the update thread
def start_update_thread(canvas, fatigue_val):
    global update_thread, stop_update_thread
    if update_thread and update_thread.is_alive():
        return
    stop_update_thread = False
    update_thread = threading.Thread(target=update_fatigue_text, args=(canvas, fatigue_val), daemon=True)
    update_thread.start()

# Function to stop the update thread
def stop_update_thread_func():
    global stop_update_thread
    stop_update_thread = True
    if update_thread and update_thread.is_alive():
        update_thread.join()  # Wait for thread to finish

def start_job(event):
    with open("Files/Data/Job_info.json", 'r') as stat_fson:
        data=ujson.load(stat_fson)

    canvas.itemconfig("Job", state="hidden")
    data["status"][0]["job_active"]='True'

    data["status"][1]["plSTR"]=int(stre)
    data["status"][1]["plINT"]=int(intel)
    data["status"][1]["plAGI"]=int(agi)
    data["status"][1]["plVIT"]=int(vit)
    data["status"][1]["plPER"]=int(per)
    data["status"][1]["plMAN"]=int(man)

    with open("Files\Temp Files\Job_Change Date.csv", 'w', newline='') as time_open_csv_file:
        fw=csv.writer(time_open_csv_file)
        current_date = datetime.now()
        # Add 10 days to the current date
        future_date = current_date + timedelta(days=1)
        # Define the desired format for the date string
        date_format = "%Y-%m-%d"
        # Convert the future date to a string
        future_date_string = future_date.strftime(date_format)
        fw.writerow([future_date_string])

    with open("Files/Data/Job_info.json", 'w') as fson:
        ujson.dump(data, fson, indent=4)

canvas = Canvas(
    window,
    bg = "#0678FF",
    height = 432,
    width = 712,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)

with open("Files\Mod\presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Legacy"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 200.0, 180.0, resize_factor=1.2)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))

# Get the canvas dimensions
canvas_width = int(canvas["width"])
canvas_height = int(canvas["height"])

# Get the image dimensions
image_width = image_image_1.width()
image_height = image_image_1.height()

# Calculate the center position
x_center = canvas_width // 2
y_center = canvas_height // 2

image_1 = canvas.create_image(
    x_center,
    y_center,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    356.0,
    66.0,
    image=image_image_2
)

canvas.tag_bind(image_2, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_2, "<B1-Motion>", move_window)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    517.0,
    252.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    516.0,
    267.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    408.0,
    131.0,
    image=image_image_5
)

data=thesystem.misc.return_status()
name=data["status"][0]['name'].upper()
# ? =================================================
hp=data["status"][0]['hp']
mp=data["status"][0]['mp']
lvl=data["status"][0]['level']
old_lvl=f"{lvl:02d}"
# ? =================================================
stre=data["status"][0]['str']
stre=thesystem.system.three_val(stre)

intel=data["status"][0]['int']
intel=thesystem.system.three_val(intel)

agi=data["status"][0]['agi']
agi=thesystem.system.three_val(agi)

vit=data["status"][0]['vit']
vit=thesystem.system.three_val(vit)

per=data["status"][0]['per']
per=thesystem.system.three_val(per)

man=data["status"][0]['man']
man=thesystem.system.three_val(man)
# ? =================================================
tit=data["status"][1]['title']
job=data["status"][1]['job'].upper()
# ? =================================================
xp_str=data["status"][0]['XP']
coins=data["status"][0]['coins']

fatigue_max=data["status"][0]['fatigue_max']
fatigue=data["status"][0]['fatigue']

fat_val=(fatigue/fatigue_max)*100
# ? =================================================
av_str_based=data["avail_eq"][0]['str_based']
av_str_based=thesystem.system.three_val(av_str_based)
av_int_based=data["avail_eq"][0]['int_based']
av_int_based=thesystem.system.three_val(av_int_based)
# ? =================================================
str_buff=data["equipment"][0]["STR"]
#str_buff=thesystem.system.sign(str_buff)+thesystem.system.pos_fix(str_buff)

agi_buff=data["equipment"][0]["AGI"]
#agi_buff=thesystem.system.sign(agi_buff)+thesystem.system.pos_fix(agi_buff)

vit_buff=data["equipment"][0]["VIT"]
#vit_buff=thesystem.system.sign(vit_buff)+thesystem.system.pos_fix(vit_buff)

int_buff=data["equipment"][0]["INT"]
#int_buff=thesystem.system.sign(int_buff)+thesystem.system.pos_fix(int_buff)

per_buff=data["equipment"][0]["PER"]
#per_buff=thesystem.system.sign(per_buff)+thesystem.system.pos_fix(per_buff)

man_buff=data["equipment"][0]["MAN"]
#man_buff=thesystem.system.sign(man_buff)+thesystem.system.pos_fix(man_buff)
# ? =================================================

# ? =====================================================================
fin_list = thesystem.system.get_fin_xp()

re_check = fin_list[0]
fin_xp=round(fin_list[1], 2)

if re_check==True:
    try:
        subprocess.Popen(["python", "Manwha Version/Status Tab/gui.py"])
        
        ex_close(0)
    except:
        print()
# ? =====================================================================



def update_stat(stat_name): 
    with open("Files\Checks\Ability_Check.json", 'r') as ability_check_file:
        ability_check_file_data=ujson.load(ability_check_file)
        val=ability_check_file_data["Check"][stat_name.upper()]
    available_points = data["avail_eq"][0]["str_based"] if stat_name in ["str", "agi", "vit"] else data["avail_eq"][0]["int_based"]
    if val<3 and available_points > 0:
            de_update_str() if stat_name in ["str", "agi", "vit"] else de_update_int()
            data["status"][0][stat_name] += 1
            val=data["status"][0][stat_name]
            canvas.itemconfig(stat_text_widgets[stat_name], text=f"{val:03d}")
            subprocess.Popen(['python', 'Files\Mod\default\sfx_point.py'])
            data["avail_eq"][0]["str_based" if stat_name in ["str", "agi", "vit"] else "int_based"] -= 1
            if stat_name=='vit':
                data["status"][0]["fatigue_max"]+=20
            with open("Files/status.json", 'w') as fson:
                ujson.dump(data, fson, indent=6)
            with open("Files\Checks\Ability_Check.json", 'w') as fin_ability_check_file:
                ability_check_file_data["Check"][stat_name.upper()]+=1
                ujson.dump(ability_check_file_data, fin_ability_check_file, indent=4)
            #if stat_name=='vit':
                #update_fatigue_text(canvas,fatigue_val)
    elif val>=3 and available_points > 0:
        with open("Files/Temp Files/Urgent Temp.csv", 'w', newline='') as urgent_file:
            fr=csv.writer(urgent_file)
            fr.writerow([stat_name.upper()])
        subprocess.Popen(['python', 'Manwha Version/Urgent Quest/gui.py'])
        ex_close(0)

# / =================================================
# / =================================================

def de_update_str():
    global av_str_based
    with open("Files/status.json", 'r') as fson:
        data=ujson.load(fson)
        check_value=data["avail_eq"][0]['str_based']
    if check_value>0:
        global av_str_based_txt
        current_number = int(check_value)
        new_number = current_number - 1
        new_text = f"{new_number:03d}"
        canvas.itemconfig(av_str_based_txt, text=f"REMAINING STR POINTS: {new_text}")
        av_str_based=new_number

def de_update_int():
    global av_int_based
    with open("Files/status.json", 'r') as fson:
        data=ujson.load(fson)
        check_value=data["avail_eq"][0]['int_based']
    if check_value>0:
        global av_int_based_txt
        current_number = int(check_value)
        new_number = current_number - 1
        new_text = f"{new_number:03d}"
        canvas.itemconfig(av_int_based_txt, text=f"REMAINING INT POINTS: {new_text}")
        av_int_based=new_number
# / =================================================
# / =================================================

canvas.create_text(
    432.0,
    122.0-2,
    anchor="nw",
    text=f"{name.upper()}",
    fill="#FFFFFF",
    font=("Exo Regular", 14 * -1)
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    401.0,
    150.0,
    image=image_image_6
)

canvas.create_text(
    416.0,
    141.0-2,
    anchor="nw",
    text=f"{job.upper()}",
    fill="#FFFFFF",
    font=("Exo Regular", 14 * -1)
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    406.0,
    168.0,
    image=image_image_7
)

canvas.create_text(
    430.0,
    159.0-2,
    anchor="nw",
    text=f"{tit.upper()}",
    fill="#FFFFFF",
    font=("Exo Regular", 14 * -1)
)

canvas.create_text(
    575.0,
    159.0,
    anchor="nw",
    text="LVL:",
    fill="#FFFFFF",
    font=("Exo SemiBold", 14 * -1)
)

canvas.create_text(
    603.0,
    159.0,
    anchor="nw",
    text=f"{old_lvl}",
    fill="#FFFFFF",
    font=("Exo SemiBold", 14 * -1)
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    398.0,
    199.0,
    image=image_image_8
)

canvas.create_text(
    409.0,
    190.0,
    anchor="nw",
    text=hp,
    fill="#FFFFFF",
    font=("Exo SemiBold", 14 * -1)
)

canvas.create_rectangle(
    387.0,
    209.0,
    646.0,
    217.0,
    fill="#FFFFFF",
    outline="")

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    399.0,
    235.0,
    image=image_image_9
)

canvas.create_text(
    411.0,
    226.0,
    anchor="nw",
    text=mp,
    fill="#FFFFFF",
    font=("Exo SemiBold", 14 * -1)
)

canvas.create_rectangle(
    387.0,
    245.0,
    646.0,
    253.0,
    fill="#FFFFFF",
    outline="")

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    357.0,
    23.0,
    image=image_image_10
)

canvas.tag_bind(image_10, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_10, "<B1-Motion>", move_window)

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    655.0,
    35.0,
    image=image_image_11
)

canvas.tag_bind(image_11, "<ButtonPress-1>", ex_close)

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    432.0-20,
    284.5,
    image=image_image_12
)

str_txt=canvas.create_text(
    433.0,
    273.0,
    anchor="nw",
    text=stre,
    fill="#FFFFFF",
    font=("Exo Medium", 16 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat"
)
button_1.place(
    x=476.0,
    y=278.0,
    width=10.0,
    height=10.0
)

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    432.0-20,
    305.5,
    image=image_image_13
)

per_txt=canvas.create_text(
    433.0,
    294.0,
    anchor="nw",
    text=per,
    fill="#FFFFFF",
    font=("Exo Medium", 16 * -1)
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat"
)
button_2.place(
    x=476.0,
    y=299.0,
    width=10.0,
    height=10.0
)

image_image_14 = PhotoImage(
    file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(
    428.0-20,
    326.5,
    image=image_image_14
)

man_txt=canvas.create_text(
    433.0,
    315.0,
    anchor="nw",
    text=man,
    fill="#FFFFFF",
    font=("Exo Medium", 16 * -1)
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_3 clicked"),
    relief="flat"
)
button_3.place(
    x=476.0,
    y=320.0,
    width=10.0,
    height=10.0
)

image_image_15 = PhotoImage(
    file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(
    578.0-20,
    284.5,
    image=image_image_15
)

int_txt=canvas.create_text(
    575.0,
    273.0,
    anchor="nw",
    text=intel,
    fill="#FFFFFF",
    font=("Exo Medium", 16 * -1)
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_4 clicked"),
    relief="flat"
)
button_4.place(
    x=618.0,
    y=278.0,
    width=10.0,
    height=10.0
)

image_image_16 = PhotoImage(
    file=relative_to_assets("image_16.png"))
image_16 = canvas.create_image(
    579.0-20,
    305.5,
    image=image_image_16
)

agi_txt=canvas.create_text(
    575.0,
    294.0,
    anchor="nw",
    text=agi,
    fill="#FFFFFF",
    font=("Exo Medium", 16 * -1)
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_5 clicked"),
    relief="flat"
)
button_5.place(
    x=618.0,
    y=299.0,
    width=10.0,
    height=10.0
)

image_image_17 = PhotoImage(
    file=relative_to_assets("image_17.png"))
image_17 = canvas.create_image(
    579.0-20,
    326.5,
    image=image_image_17
)

vit_txt=canvas.create_text(
    575.0,
    315.0,
    anchor="nw",
    text=vit,
    fill="#FFFFFF",
    font=("Exo Medium", 16 * -1)
)

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_6 clicked"),
    relief="flat"
)
button_6.place(
    x=618.0,
    y=320.0,
    width=10.0,
    height=10.0
)

av_str_based_txt=canvas.create_text(
    485.0,
    354.0,
    anchor="nw",
    text=f"REMAINING STR POINTS: {av_str_based}",
    fill="#FFFFFF",
    font=("Exo Medium", 12 * -1)
)

av_int_based_txt=canvas.create_text(
    488.0,
    371.0,
    anchor="nw",
    text=f"REMAINING INT POINTS: {av_int_based}",
    fill="#FFFFFF",
    font=("Exo Medium", 12 * -1)
)

stat_text_widgets={"str":str_txt, "int":int_txt, "agi":agi_txt, "vit":vit_txt, "per":per_txt, "man":man_txt}

fat_val = load_fatigue_value()
fatigue_val = canvas.create_text(
    389.0,
    354.0,
    anchor="nw",
    text=f"FATIGUE: {int(fat_val)}%",
    fill="#FFFFFF",
    font=("Exo Bold", 12 * -1)
)

image_image_18 = PhotoImage(
    file=relative_to_assets("image_18.png"))
image_18 = canvas.create_image(
    195.0,
    259.0,
    image=image_image_18
)

image_image_19 = PhotoImage(
    file=relative_to_assets("image_19.png"))
image_19 = canvas.create_image(
    317.0,
    164.0,
    image=image_image_19
)

image_image_20 = PhotoImage(
    file=relative_to_assets("image_20.png"))
image_20 = canvas.create_image(
    317.0,
    231.0,
    image=image_image_20
)

image_image_21 = PhotoImage(
    file=relative_to_assets("image_21.png"))
image_21 = canvas.create_image(
    317.0,
    298.0,
    image=image_image_21
)

image_image_22 = PhotoImage(
    file=relative_to_assets("image_22.png"))
image_22 = canvas.create_image(
    317.0,
    365.0,
    image=image_image_22
)

image_image_23 = PhotoImage(
    file=relative_to_assets("image_23.png"))
image_23 = canvas.create_image(
    83.0,
    196.0,
    image=image_image_23
)

image_image_24 = PhotoImage(
    file=relative_to_assets("image_24.png"))
image_24 = canvas.create_image(
    83.0,
    263.0,
    image=image_image_24
)

image_image_25 = PhotoImage(
    file=relative_to_assets("image_25.png"))
image_25 = canvas.create_image(
    83.0,
    330.0,
    image=image_image_25
)

canvas.create_text(
    121.0,
    101.0,
    anchor="nw",
    text=f"{name.upper()}",
    fill="#25B900",
    font=("Exo Bold", 22 * -1)
)

image_image_26 = PhotoImage(
    file=relative_to_assets("image_26.png"))
image_26 = canvas.create_image(
    480.0+80,
    168.0,
    image=image_image_26
)

image_image_27 = PhotoImage(
    file=relative_to_assets("image_27.png"))
image_27 = canvas.create_image(
    480.0+80,
    150.0,
    image=image_image_27
)
window.resizable(False, False)
window.mainloop()
