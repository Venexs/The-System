
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# Fork by Venexs


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import csv
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import sys
import os
import numpy as np
import time

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

stop_event=threading.Event()

initial_height = 0
target_height = 124
window_width = 334

window.geometry(f"{window_width}x{initial_height}")

job=thesystem.misc.return_status()["status"][1]["job"]


with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)


subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root

def ex_close(win=0):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=35, delay=1)

last_val=0
warn1=False

def fatigue_return():
    while True:
        global last_val
        global warn1
        with open("Files/Player Data/Status.json", 'r') as stat_open:
            stat_data=ujson.load(stat_open)
        
        fatigue=stat_data["status"][0]["fatigue"]
        fatigue_max=stat_data["status"][0]["fatigue_max"]
        fatigue_percent=int((fatigue/fatigue_max)*100)
        if (last_val!=fatigue_percent) and (fatigue_percent<70):
            subprocess.Popen(['python', 'Files/Mod/default/sfx_point.py'])
        elif (fatigue_percent>=70 and fatigue_percent<90) and warn1==False:
            subprocess.Popen(['python', 'Files/Mod/default/sfx_error.py'])
            canvas.itemconfig(fat_val, fill="#FF0000")
            warn1=True
        elif (fatigue_percent>=70 and fatigue_percent<90):
            subprocess.Popen(['python', 'Files/Mod/default/sfx_point.py'])
            canvas.itemconfig(fat_val, fill="#FF0000")
        elif fatigue_percent>=90:
            subprocess.Popen(['python', 'Files/Mod/default/sfx_error.py'])
            canvas.itemconfig(fat_val, fill="#FF0000")
        
        last_val=fatigue_percent
        
        canvas.itemconfig(fat_val, text=f"{fatigue_percent:02d}")
        time.sleep(2)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 124,
    width = 334,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    645.0,
    728.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Manwha"]["Video"]
    preloaded_frames=np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 478.0, 330.0, resize_factor=0.8, pause_duration=0.5)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    166.0+2,
    64.0-2,
    image=image_image_2
)

canvas.create_text(
    33.0,
    46.0-5,
    anchor="nw",
    text="FATIGUE:",
    fill="#FFFFFF",
    font=("Montserrat Regular", 35 * -1)
)

fat_val=canvas.create_text(
    199.0,
    36.0-5,
    anchor="nw",
    text="XXX",
    fill="#FFFFFF",
    font=("Montserrat Bold", 45 * -1)
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    166.0,
    5.0,
    image=image_image_3
)

canvas.tag_bind(image_3, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_3, "<B1-Motion>", move_window)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    320.0,
    15.0,
    image=image_image_4
)

canvas.tag_bind(image_4, "<ButtonPress-1>", lambda event: ex_close(window))

update_thread = threading.Thread(target=fatigue_return, daemon=True)
update_thread.start()

window.resizable(False, False)
window.mainloop()
