
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from datetime import datetime, timedelta, date
import subprocess
import threading
import ujson
import cv2
from PIL import Image, ImageTk
import csv
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.dailyquest as dailyquest

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(l=0):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=20, delay=1)

window = Tk()

initial_height = 0
target_height = 541
window_width = 555

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.make_window_transparent(window)
subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])
thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value) 
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

reward, type_re = dailyquest.get_check_rew()
rank = dailyquest.get_rank()
streak=dailyquest.get_streak()
title, list_of_titles_data = dailyquest.get_titles()

with open("Files/Player Data/Status.json", 'r') as rank_check_file:
    rank_check_data=ujson.load(rank_check_file)

if type_re=="Reward":
    with open("Files/Data/Rank_Rewards.json", 'r') as final_rank_check_file:
        final_rank_check_data=ujson.load(final_rank_check_file)
        rew_list=final_rank_check_data[rank]

        av_str=av_int=rew_list[0]
        xp_pl=rew_list[1]
        coins=rew_list[2]

elif type_re=='Secret':
    with open("Files/Data/Rank_Rewards.json", 'r') as final_rank_check_file:
        final_rank_check_data=ujson.load(final_rank_check_file)
        rew_list=final_rank_check_data[rank]

        av_str=av_int=(rew_list[0]*2)
        xp_pl=(rew_list[1]*2)
        coins=(rew_list[2]*2)

elif type_re=='Great Reward':
    with open("Files/Player Data/Daily_Quest.json", 'r') as daily_quest_file:
        daily_quest_data = ujson.load(daily_quest_file)
        gr_streak=daily_quest_data["Streak"]["Greater_value"]
    
    great_rank=False
    if gr_streak>=3:
        cr=3
    else:
        cr=2

    with open("Files/Data/Rank_Rewards.json", 'r') as final_rank_check_file:
        final_rank_check_data=ujson.load(final_rank_check_file)
        rew_list=final_rank_check_data[rank]

        av_str=av_int=(rew_list[0]*cr)
        xp_pl=(rew_list[1]*cr)
        coins=(rew_list[2]*cr)
    
    if cr==3:
        great_rank=True

elif type_re=="Preview":
    with open("Files/Data/Rank_Rewards.json", 'r') as final_rank_check_file:
        final_rank_check_data=ujson.load(final_rank_check_file)
        rew_list=final_rank_check_data[rank]

        av_str=av_int=rew_list[0]
        xp_pl=rew_list[1]
        coins=rew_list[2]

def get():
    today = date.today()
    today_date_str = today.strftime("%Y-%m-%d")

    with open("Files/Player Data/Status.json", 'w') as status_import:
        rank_check_data["status"][0]['coins']+=coins
        rank_check_data["status"][0]['XP']+=xp_pl
        rank_check_data["avail_eq"][0]['str_based']+=av_str
        rank_check_data["avail_eq"][0]['int_based']+=av_int
        rank_check_data["status"][0]["fatigue"]+=thesystem.system.give_fatigue_from_rank(rank)
        ujson.dump(rank_check_data, status_import, indent=4)

    with open("Files/Checks/Daily_time_check.csv", 'w', newline='') as Daily_date_check_file:
        fw=csv.writer(Daily_date_check_file)
        fw.writerow([today_date_str, "True", "Complete"])

    with open("Files/Player Data/Tabs.json",'r') as tab_son:
        tab_son_data=ujson.load(tab_son)

    if tab_son_data["Status"]=='Close':
        subprocess.Popen(['python', 'Manwha Version/Status Tab/gui.py'])
    ex_close()

def secret_get():
    today = date.today()
    today_date_str = today.strftime("%Y-%m-%d")

    with open("Files/Checks/Daily_time_check.csv", 'w', newline='') as Daily_date_check_file:
        fw=csv.writer(Daily_date_check_file)
        fw.writerow([today_date_str, "True", "Complete"])

    dupli_title=False
    try:
        with open("Files/Player Data/Titles.json", 'r') as title_import:
            title_import_data=ujson.load(title_import)
            title_import_data_list=list(title_import_data.keys())
            for k in title_import_data_list:
                if k==title:
                    dupli_title=True
    except:
        dupli_title=False

    if dupli_title==True:
        thesystem.system.message_open("Title Exists")

    else:
        try:
            with open("Files/Player Data/Titles.json", 'r') as title_import:
                title_import_data=ujson.load(title_import)
        except:
            title_import_data={}
        
        title_import_data[title]=list_of_titles_data[title]
        
        with open("Files/Player Data/Titles.json", 'w') as final_title_import:
            ujson.dump(title_import_data, final_title_import, indent=4)

    with open("Files/Player Data/Status.json", 'w') as status_import:
        rank_check_data["status"][0]['coins']+=coins
        rank_check_data["avail_eq"][0]['str_based']+=av_str
        rank_check_data["avail_eq"][0]['int_based']+=av_int
        rank_check_data["status"][0]['XP']+=xp_pl
        rank_check_data["status"][0]["fatigue"]+=(thesystem.system.give_fatigue_from_rank(rank)*2)
        ujson.dump(rank_check_data, status_import, indent=4)

    with open("Files/Checks/Daily_time_check.csv", 'w', newline='') as Daily_date_check_file:
        fw=csv.writer(Daily_date_check_file)
        fw.writerow([today_date_str, "True", "Complete"])

    with open("Files/Player Data/Tabs.json",'r') as tab_son:
        tab_son_data=ujson.load(tab_son)
    if tab_son_data["Status"]!='Open':
        subprocess.Popen(['python', 'Manwha Version/Status Tab/gui.py'])
    window.quit()

def great_get():
    today = date.today()
    today_date_str = today.strftime("%Y-%m-%d")

    with open("Files/Checks/Daily_time_check.csv", 'w', newline='') as Daily_date_check_file:
        fw=csv.writer(Daily_date_check_file)
        fw.writerow([today_date_str, "True", "Complete"])

    dupli_title=False
    try:
        with open("Files/Player Data/Titles.json", 'r') as title_import:
            title_import_data=ujson.load(title_import)
            title_import_data_list=list(title_import_data.keys())
            for k in title_import_data_list:
                if k=="Blessed":
                    dupli_title=True
    except:
        dupli_title=False

    if dupli_title==True:
        thesystem.system.message_open("Title Exists")

    else:
        try:
            with open("Files/Player Data/Titles.json", 'r') as title_import:
                title_import_data=ujson.load(title_import)
        except:
            title_import_data={}
        
        title_import_data["Blessed"]=list_of_titles_data["Blessed"]
        
        with open("Files/Player Data/Titles.json", 'w') as final_title_import:
            ujson.dump(title_import_data, final_title_import, indent=4)

    with open("Files/Player Data/Status.json", 'w') as status_import:
        rank_check_data["status"][0]['coins']+=coins
        rank_check_data["avail_eq"][0]['str_based']+=av_str
        rank_check_data["avail_eq"][0]['int_based']+=av_int
        rank_check_data["status"][0]['XP']+=xp_pl
        rank_check_data["status"][0]["fatigue"]+=(thesystem.system.give_fatigue_from_rank(rank)*2)
        ujson.dump(rank_check_data, status_import, indent=4)

    with open("Files/Checks/Daily_time_check.csv", 'w', newline='') as Daily_date_check_file:
        fw=csv.writer(Daily_date_check_file)
        fw.writerow([today_date_str, "True", "Complete"])

    with open("Files/Player Data/Tabs.json",'r') as tab_son:
        tab_son_data=ujson.load(tab_son)
    if tab_son_data["Status"]!='Open':
        subprocess.Popen(['python', 'Manwha Version/Status Tab/gui.py'])
    window.quit()

def give_rev():
    if type_re=='Secret':
        secret_get()
    elif type_re=='Great Reward':
        great_get()
    else:
        get()

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 541,
    width = 555,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    746.0,
    421.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Manwha"]["Video"]
    preloaded_frames=np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 277.0, 270.0, resize_factor=1)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    277.0,
    270.5,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    287.0,
    83.0,
    image=image_image_3
)

if reward:
    canvas.create_text(
        137.0,
        140.0,
        anchor="nw",
        text="You’ve got rewards! Congratulations",
        fill="#FFD337",
        font=("Exo Regular", 18 * -1)
    )
else:
    canvas.create_text(
        210.0,
        140.0,
        anchor="nw",
        text="Reward Previews",
        fill="#FFD337",
        font=("Exo Regular", 18 * -1)
    )

canvas.create_rectangle(
    105.0,
    199.0,
    468.0,
    225.0,
    fill="#272727",
    outline="")

canvas.create_text(
    105.0,
    201.0,
    anchor="nw",
    text=f" 1. +{av_str} STR Based Points",
    fill="#FFD337",
    font=("Exo Regular", 18 * -1)
)

canvas.create_rectangle(
    105.0,
    241.0,
    468.0,
    267.0,
    fill="#272727",
    outline="")

canvas.create_text(
    105.0,
    243.0,
    anchor="nw",
    text=f" 2. +{av_int} INT Based Points",
    fill="#FFD337",
    font=("Exo Regular", 18 * -1)
)

canvas.create_rectangle(
    105.0,
    283.0,
    468.0,
    309.0,
    fill="#272727",
    outline="")

canvas.create_text(
    105.0,
    285.0,
    anchor="nw",
    text=f" 3. +{xp_pl} XP",
    fill="#FFD337",
    font=("Exo Regular", 18 * -1)
)

canvas.create_rectangle(
    105.0,
    325.0,
    468.0,
    351.0,
    fill="#272727",
    outline="")

canvas.create_text(
    105.0,
    327.0,
    anchor="nw",
    text=f" 4. {coins} Gold Coins",
    fill="#FFD337",
    font=("Exo Regular", 18 * -1)
)

if type_re=='Great Reward':
    if great_rank==True:
        canvas.create_rectangle(
            105.0,
            367.0,
            468.0,
            393.0,
            fill="#59A9FF",
            outline="")

        canvas.create_rectangle(
            106.0,
            368.0,
            467.0,
            392.0,
            fill="#272727",
            outline="")

        canvas.create_text(
            105.0,
            369.0,
            anchor="nw",
            text=f" 5. Special Title: [Blessed]",
            fill="#FFD337",
            font=("Exo Regular", 18 * -1)
        )

if type_re=='Secret':
    canvas.create_rectangle(
        105.0,
        367.0,
        468.0,
        393.0,
        fill="#59A9FF",
        outline="")

    canvas.create_rectangle(
        106.0,
        368.0,
        467.0,
        392.0,
        fill="#272727",
        outline="")

    canvas.create_text(
        105.0,
        369.0,
        anchor="nw",
        text=f" 5. New Title: [{title}]",
        fill="#FFD337",
        font=("Exo Regular", 18 * -1)
    )

if reward:
    canvas.create_text(
        192.0,
        430.0,
        anchor="nw",
        text="Accept these rewards?",
        fill="#FFFFFF",
        font=("Exo Regular", 18 * -1)
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: give_rev(),
        relief="flat"
    )
    button_1.place(
        x=133.0,
        y=479.0,
        width=82.0,
        height=28.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: ex_close(),
        relief="flat"
    )
    button_2.place(
        x=358.0,
        y=479.0,
        width=82.0,
        height=28.0
    )

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    286.0,
    10.0,
    image=image_image_4
)

canvas.tag_bind(image_4, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_4, "<B1-Motion>", move_window)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    522.0,
    32.0,
    image=image_image_5
)

canvas.tag_bind(image_5, "<ButtonPress-1>", ex_close)

window.resizable(False, False)
window.mainloop()
