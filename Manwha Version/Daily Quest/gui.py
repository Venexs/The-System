
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from datetime import datetime, timedelta, date
import threading
import time
import random
import ujson
import csv
import subprocess
import cv2
from PIL import Image, ImageTk
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.dailyquest
import thesystem.dailyquest as dailyquest

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

with open('Files\Player Data\Secret_Quest_Check.json', 'r') as secrer_quest:
    secrer_quest_data=ujson.load(secrer_quest)
    day_num=secrer_quest_data["Day"]
    tdy_week_num=datetime.today().weekday()

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def update_timer(end_time):
    remaining_time = end_time - datetime.now()

    if remaining_time.days < 0:
        window.quit()

    hours, remainder = divmod(remaining_time.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    timer_text = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    canvas.itemconfig(timer, text=timer_text)

    window.after(1000, update_timer, end_time)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(win):
    with open("Files/Player Data/Tabs.json",'r') as tab_son:
        tab_son_data=ujson.load(tab_son)

    with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
        tab_son_data["Daily"]='Close'
        ujson.dump(tab_son_data,fin_tab_son,indent=4)
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, target_height, window_width, step=10, delay=1)

with open("Files/Checks/Daily_time_check.csv", 'r') as Daily_date_check_file:
    fr=csv.reader(Daily_date_check_file)
    for k in fr:
        date_old=k[0]
        # Rew_check checks if the rewards have been given
        rew_check=k[1]
        # today check is a part of Rew_check, ensuring if the quest was completed today
        tdy_check=k[2]

daily_quest_raw, player_data, final_data, name_list = dailyquest.dailys_init()
daily_quest_data = daily_quest_raw[0]
pl_push, pl_sit, pl_sqat, pl_run, pl_int, pl_slp = player_data
fl_push, fl_sit, fl_sqat, fl_run, fl_int, fl_slp = final_data
push_name, sit_name, squat_name, run_name, int_name, slp_name = name_list

rank = dailyquest.get_rank()

today = date.today()
today_date_str = today.strftime("%Y-%m-%d")

try:
    date_from_string = datetime.strptime(date_old, "%Y-%m-%d").date()
except:
    date_from_string = today - timedelta(days = 2)

full_check=False

if date_from_string < today:
    full_check=False
    with open("Files/Checks/Daily_time_check.csv", 'w',  newline='') as fin_daily_date_check_file:
        fw1=csv.writer(fin_daily_date_check_file)
        fw1.writerow([today_date_str,"False","Incomplete"])

elif date_from_string==today:
    if tdy_check=='Complete':
        full_check=True

if full_check==False:
    with open("Files/Player Data/Tabs.json",'r') as tab_son:
        tab_son_data=ujson.load(tab_son)

    with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
        tab_son_data["Daily"]='Open'
        ujson.dump(tab_son_data,fin_tab_son,indent=4)

    subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

    window = Tk()

    initial_height = 0
    target_height = 721
    window_width = 420

    window.geometry(f"{window_width}x{initial_height}")
    thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

    window.configure(bg = "#FFFFFF")
    set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
    window.overrideredirect(True)
    window.wm_attributes("-topmost", True)

    canvas = Canvas(
        window,
        bg = "#FFFFFF",
        height = 721,
        width = 420,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        847.0,
        596.0,
        image=image_image_1
    )

    with open("Files/Mod/presets.json", 'r') as pres_file:
        pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Manwha"]["Video"]
    preloaded_frames=np.load(video_path)
    player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 200.0, 350.0, resize_factor=1.5, pause_duration=0.7)

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        210.0,
        358.0,
        image=image_image_2
    )

    image_image_3 = PhotoImage(
        file=relative_to_assets("image_3.png"))
    image_3 = canvas.create_image(
        167.0,
        72.0,
        image=image_image_3
    )

    image_image_4 = PhotoImage(
        file=relative_to_assets("image_4.png"))
    image_4 = canvas.create_image(
        69.0,
        152.0,
        image=image_image_4
    )

    timer=canvas.create_text(
        102.0,
        614.0,
        anchor="nw",
        text="00:00:00",
        fill="#FFFFFF",
        font=("Exo Bold", 48 * -1)
    )

    canvas.create_text(
        28.0,
        94.0,
        anchor="nw",
        text="[Daily Quest: Player Training has arrived]",
        fill="#FFD337",
        font=("Exo Regular", 15 * -1)
    )

    canvas.create_text(
        51.0,
        210.0,
        anchor="nw",
        text=f"{push_name}",
        fill="#FFD337",
        font=("Exo Bold", 14 * -1)
    )

    canvas.create_text(
        51.0,
        250.0,
        anchor="nw",
        text=f"{sit_name}",
        fill="#FFD337",
        font=("Exo Bold", 14 * -1)
    )

    canvas.create_text(
        51.0,
        289.0,
        anchor="nw",
        text=f"{squat_name}",
        fill="#FFD337",
        font=("Exo Bold", 14 * -1)
    )

    canvas.create_text(
        51.0,
        329.0,
        anchor="nw",
        text=f"{run_name}",
        fill="#FFD337",
        font=("Exo Bold", 14 * -1)
    )

    canvas.create_text(
        51.0,
        386.0,
        anchor="nw",
        text=f"{int_name}",
        fill="#FFD337",
        font=("Exo Bold", 14 * -1)
    )

    canvas.create_text(
        51.0,
        425.0,
        anchor="nw",
        text=f"{slp_name}",
        fill="#FFD337",
        font=("Exo Bold", 14 * -1)
    )

    pushup_txt=canvas.create_text(
        278.0,
        212.0,
        anchor="nw",
        text=f"[{pl_push}/{fl_push}]",
        fill="#FFD337",
        font=("Exo Bold", 14 * -1)
    )

    situp_txt=canvas.create_text(
        278.0,
        250.0,
        anchor="nw",
        text=f"[{pl_sit}/{fl_sit}]",
        fill="#FFD337",
        font=("Exo Bold", 14 * -1)
    )

    squat_txt=canvas.create_text(
        278.0,
        288.0,
        anchor="nw",
        text=f"[{pl_sqat}/{fl_sqat}]",
        fill="#FFD337",
        font=("Exo Bold", 14 * -1)
    )

    run_txt=canvas.create_text(
        278.0,
        329.0,
        anchor="nw",
        text=f"[{pl_run}/{fl_run}]",
        fill="#FFD337",
        font=("Exo Bold", 14 * -1)
    )

    int_txt=canvas.create_text(
        278.0,
        386.0,
        anchor="nw",
        text=f"[{pl_int}/{fl_int}]",
        fill="#FFD337",
        font=("Exo Bold", 14 * -1)
    )

    sleep_txt=canvas.create_text(
        278.0,
        425.0,
        anchor="nw",
        text=f"[{pl_slp}/{fl_slp}]",
        fill="#FFD337",
        font=("Exo Bold", 14 * -1)
    )

    image_image_5 = PhotoImage(
        file=relative_to_assets("image_5.png"))
    image_5 = canvas.create_image(
        207.0,
        329.0,
        image=image_image_5
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: update_pushup(),
        relief="flat"
    )
    button_1.place(
        x=345.0,
        y=210.0,
        width=20.0,
        height=20.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: update_situp(),
        relief="flat"
    )
    button_2.place(
        x=345.0,
        y=250.0,
        width=20.0,
        height=20.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: update_sqat(),
        relief="flat"
    )
    button_3.place(
        x=345.0,
        y=287.0,
        width=20.0,
        height=20.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("button_4.png"))
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: update_run(),
        relief="flat"
    )
    button_4.place(
        x=345.0,
        y=329.0,
        width=20.0,
        height=20.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("button_5.png"))
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: update_int(),
        relief="flat"
    )
    button_5.place(
        x=345.0,
        y=386.0,
        width=20.0,
        height=20.0
    )

    button_image_6 = PhotoImage(
        file=relative_to_assets("button_6.png"))
    button_6 = Button(
        image=button_image_6,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: update_sleep(),
        relief="flat"
    )
    button_6.place(
        x=347.0,
        y=424.0,
        width=20.0,
        height=20.0
    )
    def update_pushup():
        subprocess.Popen(['python', 'Files/Mod/default/sfx_point.py'])
        #global pushup_txt
        current_text=int((((canvas.itemcget(pushup_txt, "text")).split("/"))[0])[1:])
        daily_quest_data["Player"]["Push"]+=1
        thesystem.misc.dump_ujson("Files/Player Data/Daily_Quest.json", daily_quest_data, indents=4)
        canvas.itemconfig(pushup_txt, text=f"[{current_text+1}/{fl_push}]")

    def update_situp():
        subprocess.Popen(['python', 'Files/Mod/default/sfx_point.py'])
        #global situp_txt
        current_text=int((((canvas.itemcget(situp_txt, "text")).split("/"))[0])[1:])
        daily_quest_data["Player"]["Sit"]+=1
        thesystem.misc.dump_ujson("Files/Player Data/Daily_Quest.json", daily_quest_data, indents=4)
        canvas.itemconfig(situp_txt, text=f"[{current_text+1}/{fl_sit}]")

    def update_sqat():
        subprocess.Popen(['python', 'Files/Mod/default/sfx_point.py'])
        #global situp_txt
        current_text=int((((canvas.itemcget(squat_txt, "text")).split("/"))[0])[1:])
        daily_quest_data["Player"]["Squat"]+=1
        thesystem.misc.dump_ujson("Files/Player Data/Daily_Quest.json", daily_quest_data, indents=4)
        canvas.itemconfig(squat_txt, text=f"[{current_text+1}/{fl_sit}]")

    def update_run():
        subprocess.Popen(['python', 'Files/Mod/default/sfx_point.py'])
        #global run_txt
        current_text=float((((canvas.itemcget(run_txt, "text")).split("/"))[0])[1:])
        daily_quest_data["Player"]["Run"]+=0.5
        thesystem.misc.dump_ujson("Files/Player Data/Daily_Quest.json", daily_quest_data, indents=4)
        canvas.itemconfig(run_txt, text=f"[{current_text+0.5}/{fl_run}]")

    def update_int():
        subprocess.Popen(['python', 'Files/Mod/default/sfx_point.py'])
        #global int_txt
        current_text=float((((canvas.itemcget(int_txt, "text")).split("/"))[0])[1:])
        daily_quest_data["Player"]["Int_type"]+=0.5
        thesystem.misc.dump_ujson("Files/Player Data/Daily_Quest.json", daily_quest_data, indents=4)
        canvas.itemconfig(int_txt, text=f"[{current_text+0.5}/{fl_int}]")

    def update_sleep():
        subprocess.Popen(['python', 'Files/Mod/default/sfx_point.py'])
        #global sleep_txt
        current_text=int((((canvas.itemcget(sleep_txt, "text")).split("/"))[0])[1:])
        daily_quest_data["Player"]["Sleep"]+=1
        thesystem.misc.dump_ujson("Files/Player Data/Daily_Quest.json", daily_quest_data, indents=4)
        canvas.itemconfig(sleep_txt, text=f"[{current_text+1}/{fl_slp}]")

    canvas.create_text(
        61.0,
        492.0,
        anchor="nw",
        text="Preview Rewards",
        fill="#FFFFFF",
        font=("Exo LightItalic", 13 * -1)
    )

    button_image_7 = PhotoImage(
        file=relative_to_assets("button_7.png"))
    button_7 = Button(
        image=button_image_7,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (thesystem.dailyquest.daily_preview(window),ex_close(window)),
        relief="flat"
    )
    button_7.place(
        x=38.0,
        y=489.0,
        width=20.0,
        height=20.0
    )

    image_image_6 = PhotoImage(
        file=relative_to_assets("image_6.png"))
    image_6 = canvas.create_image(
        210.0,
        563.0,
        image=image_image_6
    )

    button_image_8 = PhotoImage(
        file=relative_to_assets("button_8.png"))
    button_8 = Button(
        image=button_image_8,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.dailyquest.check_daily_comp(today_date_str, window),
        relief="flat"
    )
    button_8.place(
        x=238.0,
        y=485.0,
        width=160.0,
        height=27.0
    )

    button_image_9 = PhotoImage(
        file=relative_to_assets("button_9.png"))
    button_9 = Button(
        image=button_image_9,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: ex_close(window),
        relief="flat"
    )
    button_9.place(
        x=373.0,
        y=38.0,
        width=20.0,
        height=20.0
    )

    image_image_7 = PhotoImage(
        file=relative_to_assets("image_7.png"))
    image_7 = canvas.create_image(
        210.0,
        10.0,
        image=image_image_7
    )

    canvas.tag_bind(image_7, "<ButtonPress-1>", start_move)
    canvas.tag_bind(image_7, "<B1-Motion>", move_window)

    end_time = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
    update_timer(end_time)
    window.resizable(False, False)
    window.mainloop()

elif full_check==True:
    if rew_check=="True":
        thesystem.system.message_open("Quest Completed")
    else:
        with open("Files/Temp Files/Daily Rewards.csv", 'w', newline='') as rew_csv_open:
            rew_fw=csv.writer(rew_csv_open)
            rew_fw.writerow(["Reward"])
        subprocess.Popen(['python', 'Manwha Version/Daily Quest Rewards/gui.py'])

