
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import csv
import subprocess
import cv2
from PIL import Image, ImageTk
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

check=False

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

initial_height = 0
target_height = 281
window_width = 556

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.animate_window_open(window, target_height, window_width, step=25, delay=1)
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(win):
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, target_height, window_width, step=25, delay=1)
    win.quit()

with open("Files/Temp Files/Skill Temp.csv", 'r') as csv_open:
    fr=csv.reader(csv_open)
    for k in fr:
        name=k[0]

desc1=desc2=''
segments = []
segment_length = 60

with open("Files/Player Data/Skill.json", 'r') as fson:
    data=ujson.load(fson)
    data_key=list(data.keys())
    for k in data_key:
        if k==name:
            lvl=data[k][0]["lvl"]
            typ=data[k][0]["type"]

            base=data[k][0]["base"]

            desc=data[k][0]["desc"]
            rewards=data[k][0]["rewards"]

            pl_points=data[k][0]["pl_point"]

            for i in range(0, len(desc), segment_length):
                segments.append(desc[i:i+segment_length])

            if len(segments) >= 1:
                desc1 = segments[0]
            if len(segments) >= 2:
                desc2 = segments[1]

main_lvl=lvl

# ? ===============================================================================

name1=name2=name3=name4='-'
o_name1=o_name2=o_name3=o_name4='-'
qt1=qt2=qt3=qt4=0
dicts={}

try:
    c=0
    reward_key=list(rewards.keys())
    for k in reward_key:
        if c==0:
            if k=="LVLADD":
                name1="Level Increase"
                o_name1=k
                qt1=data[name][0]["rewards"]["LVLADD"]
                c+=1
            elif k=="STRav":
                name1="Addition of STR, AGI, VIT, Available Points"
                o_name1=k
                qt1=data[name][0]["rewards"]["STRav"]
                c+=1
            elif k=="INTav":
                name1="Addition of INT, PER, MAN, Available Points"
                o_name1=k
                qt1=data[name][0]["rewards"]["INTav"]
                c+=1
            else:
                name1=k
                o_name1=k
                qt1=data[name][0]["rewards"][k]
            
            dicts[o_name1]=qt1

        elif c==1:
            if k=="LVLADD":
                name2="Level Increase"
                o_name2=k
                qt2=rewards=data[name][0]["rewards"]["LVLADD"]
                c+=1
            elif k=="STRav":
                name2="Addition of STR, AGI, VIT, Available Points"
                o_name2=k
                qt2=rewards=data[name][0]["rewards"]["STRav"]
                c+=1
            elif k=="INTav":
                name2="Addition of INT, PER, MAN, Available Points"
                o_name2=k
                qt2=rewards=data[name][0]["rewards"]["INTav"]
                c+=1
            else:
                name2=k
                o_name2=k
                qt2=data[name][0]["rewards"][k]

            dicts[o_name2]=qt2

        elif c==2:
            if k=="LVLADD":
                name3="Level Increase"
                o_name3=k
                qt3=rewards=data[name][0]["rewards"]["LVLADD"]
                c+=1
            elif k=="STRav":
                name3="Addition of STR, AGI, VIT, Available Points"
                o_name3=k
                qt3=rewards=data[name][0]["rewards"]["STRav"]
                c+=1
            elif k=="INTav":
                name3="Addition of INT, PER, MAN, Available Points"
                o_name3=k
                qt3=rewards=data[name][0]["rewards"]["INTav"]
                c+=1
            else:
                name3=k
                o_name3=k
                qt3=data[name][0]["rewards"][k]

            dicts[o_name3]=qt3

        elif c==3:
            if k=="LVLADD":
                name4="Level Increase"
                o_name4=k
                qt4=rewards=data[name][0]["rewards"]["LVLADD"]
                c+=1
            elif k=="STRav":
                name4="Addition of STR, AGI, VIT, Available Points"
                o_name4=k
                qt4=rewards=data[name][0]["rewards"]["STRav"]
                c+=1
            elif k=="INTav":
                name4="Addition of INT, PER, MAN, Available Points"
                o_name4=k
                qt4=rewards=data[name][0]["rewards"]["INTav"]
                c+=1
            else:
                name4=k
                o_name4=k
                qt4=data[name][0]["rewards"][k]

            dicts[o_name4]=qt4

except:
    print()

def preview(nameob,quantity):
    if nameob!='-' and quantity!=0:
        with open("Files/Temp Files/Preview Item Temp.csv", 'w', newline='') as new_csv_open:
            fw=csv.writer(new_csv_open)
            rec=[nameob, quantity]
            fw.writerow(rec)
        subprocess.Popen(['python', 'Manwha Version/Preview Item/gui.py'])

def delete():
    with open("Files/Player Data/Skill.json", 'r') as fols:
        skills=ujson.load(fols)

    del skills[name]

    with open("Files/Player Data/Skill.json", 'r') as fols:
        ujson.dump(skills, fols, indent=6)

    subprocess.Popen(['python', 'Manwha Version/Skills Tab/gui.py'])

    ex_close(window)

def update():
    if lvl!="MAX":
        subprocess.Popen(['python', 'Manwha Version/Skill Info/gui1.py'])

        ex_close(window)

def reward():
    rol=list(dicts.keys())
    for k in rol:
        if k=="LVLADD":
            for k in range(dicts[k]):
                with open("Files/Player Data/Status.json", 'r') as fson:
                    data_status=ujson.load(fson)
                    
                    data_status["status"][0]['level']+=1
                    data_status["status"][0]['str']+=1
                    data_status["status"][0]['agi']+=1
                    data_status["status"][0]['vit']+=1
                    data_status["status"][0]['int']+=1
                    data_status["status"][0]['per']+=1
                    data_status["status"][0]['hp']+=10
                    data_status["status"][0]['mp']+=10
                    data_status["status"][0]['fatigue_max']+=40
                
                with open("Files/Player Data/Status.json", 'w') as fson:
                    ujson.dump(data_status, fson, indent=4)

        elif k=="STRav":
            for k in range(dicts[k]):
                with open("Files/Player Data/Status.json", 'r') as fson:
                    data_status_2=ujson.load(fson)
                    
                    data_status_2["avail_eq"][0]['str_based']+=1

                with open("Files/Player Data/Status.json", 'w') as fson:
                    ujson.dump(data_status_2, fson, indent=4)

        elif k=="INTav":
            for k in range(dicts[k]):
                with open("Files/Player Data/Status.json", 'r') as fson:
                    data_status_3=ujson.load(fson)
                    
                    data_status_3["avail_eq"][0]['int_based']+=1

                with open("Files/Player Data/Status.json", 'w') as fson:
                    ujson.dump(data_status_3, fson, indent=4)

        else:
            check=False
            with open("Files/Data/Inventory_list.json", 'r') as fson:
                data_inv=ujson.load(fson)
                item=data_inv[k]
                name_of_item=k
            
            with open("Files/Player Data/Inventory.json", 'r') as fson:
                data_fininv=ujson.load(fson)
                key_data=list(data_fininv.keys())

                for k in key_data:
                    if name_of_item==k:
                        check=True
            
            if check==True:
                data_fininv[name_of_item][0]["qty"]+=1

            elif check==False:
                data_fininv[name_of_item]=item

            with open("Files/Player Data/Inventory.json", 'w') as finaladdon:
                ujson.dump(data_fininv, finaladdon, indent=6)

if main_lvl==10:
    new_lvl="MAX"
    data[name][0]["lvl"]=new_lvl

    main_lvl=new_lvl
    with open("Files/Player Data/Skill.json", 'w') as fin_skill:
        ujson.dump(data, fin_skill, indent=6)

    with open("Files/Player Data/Status.json", 'r') as status:
        status_data=ujson.load(status)

    if base=='STR':
        status_data["avail_eq"][0]['str_based']=status_data["avail_eq"][0]['str_based']+pl_points

    elif base=='INT':
        status_data["avail_eq"][0]['int_based']=status_data["avail_eq"][0]['int_based']+pl_points

    with open("Files/Player Data/Status.json", 'w') as fin_status:
        ujson.dump(status_data, fin_status, indent=4)

    reward()

def get_skill_img(name):
    path = f"Files\\Mod\\default\\Skills\\{name}.png"
    image = Image.open(path)
    image = image.resize((105, 105), Image.Resampling.LANCZOS)
    return ImageTk.PhotoImage(image)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 281,
    width = 556,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    518.0,
    277.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Manwha"]["Video"]
    preloaded_frames=np.load(video_path)  # Replace with your video path
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 320.0, 100.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    277.5,
    140.5,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    64.18075561523438,
    86.26177978515625,
    image=image_image_3
)

image_image_4 = get_skill_img(name)
image_4 = canvas.create_image(
    63.80047607421875,
    86.0,
    image=image_image_4
)

canvas.create_text(
    154.0,
    52.0,
    anchor="nw",
    text=f"[{name.upper()}] | Lvl.{lvl}",
    fill="#FFAF37",
    font=("Exo Bold", 16 * -1)
)

canvas.create_text(
    154.0,
    76.0,
    anchor="nw",
    text=f"[{typ.upper()} SKILL]",
    fill="#FFAF37",
    font=("Exo Bold", 14 * -1)
)

canvas.create_text(
    154.0,
    107.0,
    anchor="nw",
    text=desc1,
    fill="#FFAF37",
    font=("Exo Regular", 14 * -1)
)

canvas.create_text(
    154.0,
    124.0,
    anchor="nw",
    text=desc2,
    fill="#FFAF37",
    font=("Exo Regular", 14 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: (subprocess.Popen(['python', 'Manwha Version/Skills Tab/gui.py']),ex_close(window)),
    relief="flat"
)
button_1.place(
    x=511.0,
    y=5.0,
    width=40.0,
    height=40.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: delete(),
    relief="flat"
)
button_2.place(
    x=447.80047607421875,
    y=248.0,
    width=96.023681640625,
    height=16.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: update(),
    relief="flat"
)
button_3.place(
    x=442.80047607421875,
    y=227.0,
    width=101.0,
    height=16.0
)

canvas.create_text(
    9.0,
    173.0,
    anchor="nw",
    text="REWARDS ON MAX:",
    fill="#10DF4A",
    font=("Exo SemiBold", 14 * -1)
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: preview(o_name1, qt1),
    relief="flat"
)
button_4.place(
    x=9.0,
    y=192.0,
    width=13.0,
    height=13.0
)

canvas.create_text(
    22.0,
    190.0,
    anchor="nw",
    text=f"-{name1}",
    fill="#FFFFFF",
    font=("Exo Light", 12 * -1)
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: preview(o_name2, qt2),
    relief="flat"
)
button_5.place(
    x=9.0,
    y=207.0,
    width=13.0,
    height=13.0
)

canvas.create_text(
    22.0,
    205.0,
    anchor="nw",
    text=f"-{name2}",
    fill="#FFFFFF",
    font=("Exo Light", 12 * -1)
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    278.0,
    10.0,
    image=image_image_5
)

canvas.tag_bind(image_5, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_5, "<B1-Motion>", move_window)

window.resizable(False, False)
window.mainloop()
