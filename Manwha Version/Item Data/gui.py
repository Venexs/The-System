
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess
import csv
import ujson
import cv2
from PIL import Image, ImageTk
import threading
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.itemequip
import thesystem.system
import thesystem.equipmentbk as equipment
import thesystem.inventory

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

initial_height = 0
target_height = 548
window_width = 630

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.make_window_transparent(window)
thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)


debuff_1_name=''
debuff_2_name=''
debuff_1='-'
debuff_2='-'

buff_1_name=''
buff_2_name=''
buff_1='-'
buff_2='-'

desc1=desc2=desc3=''
segments = []
segment_length = 50

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(win):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    subprocess.Popen(['python', 'Manwha Version/Inventory/gui.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=20, delay=1)
typs='Item'

with open('Files/Temp Files/Inventory temp.csv', 'r') as fout:
    fr=csv.reader(fout)
    for k in fr:
        name=k[0]   
        try:
            qty=k[1]
            typs=k[2]
        except:
            typs='Item'

with open('Files/Player Data/Equipment.json', 'r') as eq_fout:
    eq_data=ujson.load(eq_fout)

# Example usage:
equiipment_check = equipment.find_item_slot(name, eq_data)
equiipment_check_bool=equiipment_check[1]

if typs=='Item':
    with open("Files/Player Data/Inventory.json", 'r') as fson:
        data=ujson.load(fson)
        dat_keys=list(data.keys())

elif typs=='Preview':
    with open("Files/Data/Inventory_List.json", 'r') as fson:
        data=ujson.load(fson)
        dat_keys=list(data.keys())

item_full_data={}

rank=data[name][0]["rank"]
cat=data[name][0]["cat"]
n_cat=cat
if cat.upper()=="FIRST GAUNTLET" or cat.upper()=="SECOND GAUNTLET":
    n_cat="GAUNTLET"
qty=data[name][0]["qty"]
desc_full=data[name][0]["desc"]

for i in range(0, len(desc_full), segment_length):
    segments.append(desc_full[i:i+segment_length])

if len(segments) >= 1:
    desc1 = segments[0]
if len(segments) >= 2:
    desc2 = segments[1]
if len(segments) >= 3:
    desc3 = segments[2]
val=data[name][0]['Value']

item_full_data[name]=data[name]

buff = data[name][0].get("buff", {})
buff_1_name, buff_1, buff_2_name, buff_2 = thesystem.equipmentbk.process_attributes(buff, "buff")

# Debuff processing
debuff = data[name][0].get("debuff", {})
debuff_1_name, debuff_1, debuff_2_name, debuff_2 = thesystem.equipmentbk.process_attributes(debuff, "debuff")

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 548,
    width = 630,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    478.0,
    284.0,
    image=image_image_1
)
with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Manwha"]["Video"]
    preloaded_frames=np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 280.0, 300.0, resize_factor=1.2)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    315.0,
    274.0,
    image=image_image_2
)

canvas.create_text(
    25.0,
    36.0,
    anchor="nw",
    text="ITEM",
    fill="#FFD337",
    font=("Exo Bold", 24 * -1)
)

canvas.create_text(
    217.0,
    94.0,
    anchor="nw",
    text=f"[{name.upper()}]",
    fill="#FFD337",
    font=("Exo SemiBold", 32 * -1)
)

canvas.create_text(
    217.0,
    138.0,
    anchor="nw",
    text="RARITY:",
    fill="#FFD337",
    font=("Exo Light", 20 * -1)
)

canvas.create_text(
    89.0,
    309.0,
    anchor="nw",
    text=desc1,
    fill="#FFD337",
    font=("Exo Light", 20 * -1)
)

canvas.create_text(
    89.0,
    336.0,
    anchor="nw",
    text=desc2,
    fill="#FFD337",
    font=("Exo Light", 20 * -1)
)

canvas.create_text(
    89.0,
    363.0,
    anchor="nw",
    text=desc3,
    fill="#FFD337",
    font=("Exo Light", 20 * -1)
)

canvas.create_text(
    293.0,
    138.0,
    anchor="nw",
    text=f"{rank}",
    fill="#FFD337",
    font=("Exo SemiBold", 20 * -1)
)

canvas.create_text(
    89.0,
    233.0,
    anchor="nw",
    text=f"-{buff_1_name} {buff_1},   -{buff_2_name} {buff_2}",
    fill="#FFD337",
    font=("Exo Light", 20 * -1)
)

canvas.create_text(
    89.0,
    260.0,
    anchor="nw",
    text=f"-{debuff_1_name} {debuff_1},   -{debuff_2_name} {debuff_2}",
    fill="#FFD337",
    font=("Exo Light", 20 * -1)
)


canvas.create_text(
    325.0,
    165.0,
    anchor="nw",
    text=f"{cat}",
    fill="#FFD337",
    font=("Exo SemiBold", 20 * -1)
)

canvas.create_text(
    217.0,
    165.0,
    anchor="nw",
    text="CATEGORY:",
    fill="#FFD337",
    font=("Exo Light", 20 * -1)
)

canvas.create_text(
    473.0,
    138.0,
    anchor="nw",
    text=f"{val}",
    fill="#FFD337",
    font=("Exo SemiBold", 20 * -1)
)

canvas.create_text(
    403.0,
    138.0,
    anchor="nw",
    text="VALUE:",
    fill="#FFD337",
    font=("Exo Light", 20 * -1)
)

canvas.create_text(
    262.0,
    193.0,
    anchor="nw",
    text=f"{qty}",
    fill="#FFD337",
    font=("Exo SemiBold", 20 * -1)
)

canvas.create_text(
    217.0,
    193.0,
    anchor="nw",
    text="QTY:",
    fill="#FFD337",
    font=("Exo Light", 20 * -1)
)

canvas.create_rectangle(
    89.0,
    92.0,
    199.0,
    202.0,
    fill="#010000",
    outline="")

max_width, max_height = 164.615385, 126.153846

image_image_3 =thesystem.inventory.get_item_button_image(name, max_width, max_height)
image_3 = canvas.create_image(
    144.0,
    147.0,
    image=image_image_3
)
if typs=='Item':

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (equipment.finish(qty, equiipment_check),thesystem.inventory.selling_item(name,window,val)),
        relief="flat"
    )
    button_1.place(
        x=388.0,
        y=504.0,
        width=135.0,
        height=25.0
    )

    if equiipment_check_bool:
        canvas.create_text(
            500.0,
            480.0,
            anchor="nw",
            text="Already Equipped!",
            fill="#FFD337",
            font=("Exo Bold", 13 * -1)
        )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.itemequip.equip_item(cat,item_full_data,window),
        relief="flat"
    )
    button_2.place(
        x=540.0,
        y=504.0,
        width=76.0,
        height=25.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.return_back_to_tab("Inventory",window),
        relief="flat"
    )
    button_3.place(
        x=571.0,
        y=20.0,
        width=40.0,
        height=40.0
    )

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_3.place(
    x=571.0,
    y=20.0,
    width=40.0,
    height=40.0
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    314.0,
    5.0,
    image=image_image_4
)

canvas.tag_bind(image_4, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_4, "<B1-Motion>", move_window)

window.resizable(False, False)
window.mainloop()
