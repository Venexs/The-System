
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import csv
import subprocess
import cv2
from PIL import Image, ImageTk
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.itemequip
import thesystem.misc

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")
ASSETS_PATH = OUTPUT_PATH / "assets/frame0"
EQUIPMENT_TEMP_FILE = 'Files/Temp Files/Equipment Temp.csv'
INVENTORY_FILE = 'Files/Player Data/Inventory.json'
EQUIPMENT_FILE = 'Files/Player Data/Equipment.json'
STATUS_FILE = 'Files/Player Data/Status.json'
PRESETS_FILE = "Files/Mod/presets.json"


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(win):
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    subprocess.Popen(['python', 'Manwha Version\Equipment\gui.py'])
    thesystem.system.animate_window_close(window, target_height, window_width, step=30, delay=1)

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

window = Tk()

initial_height = 0
target_height = 288
window_width = 555

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 288,
    width = 555,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)

# ! ======================================================================
# ! FILE RETRIEVAL
# ! ======================================================================


name1=name2=name3=name4=name5='-'
rank1=rank2=rank3=rank4=rank5='X'
dat1=dat2=dat3=dat4=dat5={}

with open('Files/Temp Files/Equipment Temp.csv', 'r') as fop:
    fr=csv.reader(fop)
    for k in fr:
        cat=k[0]
        try:
            typ=k[1]
        except:
            print()
    
with open('Files/Player Data/Inventory.json', 'r') as fout:
    data=ujson.load(fout)
    rol=list(data.keys())
c = 0
for k in rol:
    if data[k][0]["cat"] == cat:  # Check if the category matches
        if c == 0:
            name1, rank1 = k, data[k][0]["rank"]
            dat1 = {k: data[k]}  # Store only the current item with its name as the key
        elif c == 1:
            name2, rank2 = k, data[k][0]["rank"]
            dat2 = {k: data[k]}
        elif c == 2:
            name3, rank3 = k, data[k][0]["rank"]
            dat3 = {k: data[k]}
        elif c == 3:
            name4, rank4 = k, data[k][0]["rank"]
            dat4 = {k: data[k]}
        elif c == 4:
            name5, rank5 = k, data[k][0]["rank"]
            dat5 = {k: data[k]}
        c += 1


# ! ======================================================================
# ! FILE INJECTION
# ! ======================================================================

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Manwha"]["Video"]
    preloaded_frames=np.load(video_path)
    normal_font_col=pres_file_data["Manwha"]["Normal Font Color"]
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 300.0, 190.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    277.0,
    144.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    119.0,
    70.0,
    image=image_image_3
)
# Load dynamic data
inventory_data = thesystem.misc.load_ujson(INVENTORY_FILE)
presets = thesystem.misc.load_ujson(PRESETS_FILE)

# Populate Equipment List
names = ["-", "-", "-", "-", "-"]
ranks = ["X", "X", "X", "X", "X"]

match_count = 0
for item in inventory_data.keys():
    if inventory_data[item][0]["cat"] == cat:
        if match_count < 5:
            names[match_count] = item
            ranks[match_count] = inventory_data[item][0]["rank"]
            match_count += 1


button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))

images=[]
image_image_4 = PhotoImage(file=relative_to_assets("image_4.png"))
# Add Buttons and Labels Dynamically
for i, (name, rank) in enumerate(zip(names, ranks)):
    y_offset = 100 + i * 32

    canvas.create_image(
        280.0,
        (y_offset+13),
        image=image_image_4
    )

    canvas.create_text(68.0, y_offset, anchor="nw", text=name, fill=normal_font_col, font=("Montserrat Regular", 18 * -1))
    canvas.create_text(391.0, y_offset, anchor="nw", text=f"{rank}-Rank", fill=normal_font_col, font=("Montserrat Medium", 18 * -1))
    button = Button(
        image=button_image_1,
        borderwidth=0, highlightthickness=0, command=lambda i=i: thesystem.itemequip.handle_selection(i + 1, names[i], cat, window, dat1, dat2, dat3, dat4, dat5), relief="flat"
    )
    button.place(x=481.0, y=y_offset, width=24.0, height=24.0)

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_6.place(
    x=505.0,
    y=30.0,
    width=21.407020568847656,
    height=20.974361419677734
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    280.0,
    10.0,
    image=image_image_9
)

canvas.tag_bind(image_9, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_9, "<B1-Motion>", move_window)

window.resizable(False, False)
window.mainloop()
