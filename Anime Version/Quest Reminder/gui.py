
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# Fork by Venexs


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import json
import csv
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import time
import sys
import os
import atexit
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

stop_event=threading.Event()

initial_height = 0
target_height = 114
window_width = 400

window.geometry(f"{window_width}x{initial_height}")

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window,transp_clr)

with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

# Preload top and bottom images
top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (400, 19), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (400, 16), job, type_="bottom")

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

with open("Files/Temp Files/Quest Reminder.csv", "r") as f:
    reader = csv.reader(f)
    for row in reader:
        quest_name = row[0]
        pl_num = row[1]

with open("Files/Player Data/Active_Quests.json", 'r') as fols:
    data = ujson.load(fols)
    for k in data:
        if k == quest_name:
            skill = data[k][0]["skill"]
            rank = data[k][0]["rank"]
            try:
                amt = data[k][0]["amt"]
            except:
                amt = data[k][0]["time"]
    
            break

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root

def ex_close(win=0):
    if setting_data["Settings"]["Performernce (ANIME):"] != "True":
        stop_event.set()
        update_thread.join()
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=35, delay=1)

def check_castle_status(file_path, stop_event):
    time.sleep(3)
    while not stop_event.is_set():
        with open(file_path, "r") as file:
            data = json.load(file)
        
        if data.get("Quest") == "Open":
            ex_close()
            break

def start_checking(file_path):
    stop_event = threading.Event()
    thread = threading.Thread(target=check_castle_status, args=(file_path, stop_event))
    thread.start()
    return thread, stop_event

json_file_path = "Files/Player Data/Tabs.json"
checker_thread, stop_event = start_checking(json_file_path)

atexit.register(stop_event.set)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 114,
    width = 400,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    200.0,
    57.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    normal_font_col=pres_file_data["Anime"]["Normal Font Color"]
    video_path=pres_file_data["Anime"][video]
    preloaded_frames=np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 478.0, 330.0, resize_factor=0.8, pause_duration=0.5)

canvas.create_text(
    49.0,
    23.0,
    anchor="nw",
    text="QUEST: ",
    fill="#FFFFFF",
    font=("Montserrat Medium", 10 * -1)
)

canvas.create_text(
    88.0,
    21.0,
    anchor="nw",
    text=f"[{ quest_name} ]",
    fill="#FFFFFF",
    font=("Montserrat Bold", 12 * -1)
)

canvas.create_text(
    49.0,
    35.0,
    anchor="nw",
    text="RANK: ",
    fill="#FFFFFF",
    font=("Montserrat Medium", 10 * -1)
)

canvas.create_text(
    84.0,
    33.0,
    anchor="nw",
    text=f"{rank}",
    fill="#FFFFFF",
    font=("Montserrat Bold", 12 * -1)
)

canvas.create_text(
    47.0,
    83.0,
    anchor="nw",
    text="TASK:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 9 * -1)
)

canvas.create_text(
    78.0,
    81.0,
    anchor="nw",
    text=f"{skill}",
    fill="#FFFFFF",
    font=("Montserrat Bold", 11 * -1)
)

canvas.create_rectangle(
    0.0,
    0.0,
    44.0,
    114.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    359.0,
    0.0,
    400.0,
    114.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    400.0,
    19.0,
    fill=transp_clr,
    outline="")


canvas.create_rectangle(
    44.0,
    98.0,
    400.0,
    114.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    103.0,
    46.0,
    114.0,
    fill=transp_clr,
    outline="")


image_40 = thesystem.system.side_bar("left_bar.png", (26, 90))
canvas.create_image(33.0, 60.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (28, 90))
canvas.create_image(367.0, 60.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    200.0,
    9.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    200.0,
    106.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

# Start the animation
if setting_data["Settings"]["Performernce (ANIME):"] != "True":
    update_thread = threading.Thread(target=update_images)
    update_thread.start()

text = f"{pl_num}/{amt}"
font = ("Montserrat Bold", 36 * -1)

# Create a temporary text item to measure its dimensions
temp_text = canvas.create_text(0, 0, text=text, font=font)
bbox = canvas.bbox(temp_text)  # Get bounding box of the text (x1, y1, x2, y2)
canvas.delete(temp_text)  # Remove temporary text

text_width = bbox[2] - bbox[0]
text_height = bbox[3] - bbox[1]

canvas_width = canvas.winfo_reqwidth()
canvas_height = canvas.winfo_reqheight()

x_center = canvas_width / 2
y_center = canvas_height / 2

canvas.create_text(
    x_center,
    y_center,
    text=text,
    fill="#FFFFFF",
    font=font,
    anchor="center"  # Center the text
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    348.0,
    29.0,
    image=image_image_6
)

canvas.tag_bind(image_6, "<ButtonPress-1>", ex_close)

window.resizable(False, False)
window.mainloop()
