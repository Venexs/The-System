
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Checkbutton, IntVar
import ujson
import json
import csv
import subprocess
import random
import time
import threading
from PIL import Image, ImageTk
from datetime import datetime, timedelta
import pandas as pd
import sys
import os
from supabase import create_client

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.online
import thesystem.settings as settings

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

with open("Files/Tabs.json",'r') as tab_son:
    tab_son_data=ujson.load(tab_son)

with open("Files/Tabs.json",'w') as fin_tab_son:
    tab_son_data["Settings"]='Open'
    ujson.dump(tab_son_data,fin_tab_son,indent=4)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

initial_height = 0
target_height = 666
window_width = 475

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.animate_window_open(window, target_height, window_width, step=35, delay=1)

window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window,transp_clr)

top_images = [f"thesystem/{all_prev}top_bar/{top_val}{str(i).zfill(4)}.png" for i in range(1, 501)]
bottom_images = [f"thesystem/{all_prev}bottom_bar/{str(i).zfill(4)}.png" for i in range(1, 501)]

# Preload top and bottom images
top_preloaded_images = thesystem.system.preload_images(top_images, (490, 34))
bottom_preloaded_images = thesystem.system.preload_images(bottom_images, (490, 34))

subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])

with open("Files\Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event): 
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(win):
    with open("Files/Tabs.json",'r') as tab_son:
        tab_son_data=ujson.load(tab_son)

    with open("Files/Tabs.json",'w') as fin_tab_son:
        tab_son_data["Settings"]='Close'
        ujson.dump(tab_son_data,fin_tab_son,indent=4)
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files\Mod\default\sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=20, delay=1)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 666,
    width = 475,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)
canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    383.0,
    413.0,
    image=image_image_1
)

with open("Files\Mod\presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    normal_font_col=pres_file_data["Anime"]["Normal Font Color"]
    video_path=pres_file_data["Anime"][video]
player = thesystem.system.VideoPlayer(canvas, video_path, 478.0, 330.0, resize_factor=0.8)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    238.0,
    344.272216796875,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    145.0,
    84.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    240.0,
    365.0,
    image=image_image_4
)


side = PhotoImage(file=relative_to_assets("blue.png"))
if job.upper()!="NONE":
    side = PhotoImage(file=relative_to_assets("purple.png"))
canvas.create_image(-15.0, 348.0, image=side)
canvas.create_image(490.0, 351.0, image=side)

canvas.create_rectangle(
    0.0,
    27.0,
    101.0,
    21.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    -10.0,
    645.0,
    494.0,
    716.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    488.0,
    34.0,
    fill=transp_clr,
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (81, 640))
canvas.create_image(-5.0, 360.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (42, 635))
canvas.create_image(455.0, 340.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    240.0,
    27.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    240.0,
    660.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    # Update top image
    image_index = (image_index + 1) % len(top_preloaded_images)
    canvas.itemconfig(top_image, image=top_preloaded_images[image_index])

    # Update bottom image
    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    canvas.itemconfig(bottom_image, image=bottom_preloaded_images[bot_image_index])

    # Schedule next update (24 FPS)
    window.after(1000 // 24, update_images)

# Start the animation
update_images()

# =================================================================


SESSION_FILE = "Files/Data/session.json"

def load_session():
    """Load session data from the session file."""
    if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:
        with open(SESSION_FILE, "r") as f:
            session_data = json.load(f)
            if all(key in session_data for key in ["access_token", "refresh_token", "expires_in"]):
                return session_data


session = load_session()

URL = "https://smewvswweqnpwzngdtco.supabase.co"
KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNtZXd2c3d3ZXFucHd6bmdkdGNvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQyMDY2NjcsImV4cCI6MjA0OTc4MjY2N30.0SSN0bbwzFMCGC47XUuwqyKfF__Zikm_rJHqXWf78PU"

supabase = create_client(URL, KEY)


# Define waves with enemies and workouts
waves = [
    {"enemy": "Goblin", "workout": "10 Push-ups", "health": 20},
    {"enemy": "Orc", "workout": "15 Squats", "health": 30},
    {"enemy": "Troll", "workout": "20 Jumping Jacks", "health": 40},
    {"enemy": "Dark Knight", "workout": "30 Burpees", "health": 50},
    {"enemy": "Final Boss - Demon Lord", "workout": "50 Mountain Climbers", "health": 200}
]

# Function to sync data with Supabase
def sync_health(wave_index, health):
    supabase.table("dungeon").update({"health": health}).eq("wave", wave_index).execute()

def get_health(wave_index):
    response = supabase.table("dungeon").select("health").eq("wave", wave_index).execute()
    return response.data[0]["health"] if response.data else waves[wave_index]["health"]

# Main dungeon function
def dungeon_game():
    
    text1 = canvas.create_text(
        window_width / 2,  # Center horizontally
        target_height / 2,  # Center vertically
        anchor="center",
        text="""You feel a sharp chill hit your back as you enter the gate...""",
        fill="white",  # Text color
        font=("Montserrat Bold", 16),
    )
    
    for i, wave in enumerate(waves):
        enemy = wave["enemy"]
        workout = wave["workout"]
        health = get_health(i)
        text1 = canvas.create_text(
            window_width / 2,  # Center horizontally
            target_height / 2,  # Center vertically
            anchor="center",
            text=f"Wave {i+1}: {enemy} appears! Do {workout} to attack.",
            fill="white",  # Text color
            font=("Montserrat Bold", 16),
        )
        
        
        while health > 0:
            text1 = canvas.create_text(
                window_width / 2,  # Center horizontally
                target_height / 2,  # Center vertically
                anchor="center",
                text="Press Enter after completing the workout...",
                fill="white",  # Text color
                font=("Montserrat Bold", 16),
            )
            input("Press Enter after completing the workout...")
            damage = random.randint(5, 15)
            health -= damage
            sync_health(i, max(0, health))
            text1 = canvas.create_text(
                window_width / 2,  # Center horizontally
                target_height / 2,  # Center vertically
                anchor="center",
                text=f"You dealt {damage} damage! {enemy} has {max(0, health)} HP left.",
                fill="white",  # Text color
                font=("Montserrat Bold", 16),
            )
            time.sleep(1)
            
        print(f"You defeated {enemy}!")
    
    print("Congratulations! You've cleared the dungeon.")

if __name__ == "__main__":
    dungeon_game()
    
    
window.resizable(False, False)
window.mainloop()
