
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Listbox, Frame, Scrollbar, ttk, Label
from tkinter import ttk
import json
import csv
import subprocess
import random
import cv2
from PIL import Image, ImageTk
from datetime import datetime, timedelta
import threading
import sys
import os
from supabase import create_client
import os
from infisical_client import ClientSettings, InfisicalClient, GetSecretOptions, AuthenticationOptions, UniversalAuthMethod
from tkinter import messagebox
import asyncio
import threading

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.online

client = InfisicalClient(ClientSettings(
    auth=AuthenticationOptions(
        universal_auth=UniversalAuthMethod(
            client_id="0fa8dbf8-92ee-4889-bd48-1b5dd2d22e87",
            client_secret="a2c9a58bda26c914e333e6c0f7c35e019b30c3afa67b5dc8419a142ee8b2aec8",
        )
    )
))

URL = "https://smewvswweqnpwzngdtco.supabase.co"
KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNtZXd2c3d3ZXFucHd6bmdkdGNvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQyMDY2NjcsImV4cCI6MjA0OTc4MjY2N30.0SSN0bbwzFMCGC47XUuwqyKfF__Zikm_rJHqXWf78PU"

supabase = create_client(URL, KEY)


subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

initial_height = 0
target_height = 369
window_width = 879

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.make_window_transparent(window)
thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)


SESSION_FILE = "Files/Data/session.json"

def load_session():
    """Load session data from the session file."""
    if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:
        with open(SESSION_FILE, "r") as f:
            session_data = json.load(f)
            if all(key in session_data for key in ["access_token", "refresh_token", "expires_in"]):
                return session_data

session = load_session()

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def close():
    subprocess.Popen(['python', f'Anime Version/Guild Menu/gui.py'])
    thesystem.online.ex_close(window)
    

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 369,
    width = 879,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    675.0,
    375.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=json.load(pres_file)
    normal_font_col=pres_file_data["Anime"]["Normal Font Color"]
    video_path=pres_file_data["Anime"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 478.0, 213.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    435.0,
    180.52554321289062,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    199.99966430664062,
    61.0,
    image=image_image_3
)


button_image_1 = PhotoImage(
    file=relative_to_assets("button_8.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=close,
    relief="flat"
)
button_1.place(
    x=750.0,
    y=40.0
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    2.0,
    180.25450134277344,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    850.1459350585938,
    196.4259796142578,
    image=image_image_5
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    510.0,
    10.0,
    image=image_image_6
)

canvas.tag_bind(image_6, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_6, "<B1-Motion>", move_window)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    500.0,
    353.0,
    image=image_image_7
)

rank_priority = {
    'X': -2,
    'Z': -1,
    'National': 0,
    'SSS': 1,
    'SS': 2,
    'S': 3,
    'A': 4,
    'B': 5,
    'C': 6,
    'D': 7,
    'E': 8
}

def successclose():
    subprocess.Popen(['python', f'Anime Version/Guild List/success.py'])
    thesystem.online.ex_close(window)

# Custom Scrollable Frame Class
class ScrollableFrame(Frame):
    def __init__(self, container, *args, **kwargs):
        super().__init__(container, *args, **kwargs)
        self.canvas = Canvas(self, bg="#010616", highlightthickness=0)
        scrollbar = Scrollbar(self, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = Frame(self.canvas, bg="#010616")

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(
                scrollregion=self.canvas.bbox("all")
            )
        )

        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=scrollbar.set)

        self.canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

# Create main scrollable frame
main_frame = ScrollableFrame(window)
main_frame.place(x=80, y=100, width=720, height=200)

# Style configuration
entry_style = {"bg": "#010616", "fg": "white", "font": ("Montserrat Bold", 10)}
button_style = {
    "bg": "#1a237e", 
    "fg": "white",
    "activebackground": "#534bae",
    "font": ("Montserrat Bold", 10),
    "relief": "flat"
}

def create_dungeon_entry(parent, dungeon):
    frame = Frame(parent, bg="#010616")
    
    # Dungeon information
    Label(frame, text=dungeon["Name"], **entry_style).pack(side="left", padx=10)
    Label(frame, text=dungeon["Rank"], **entry_style).pack(side="left", padx=10)
    Label(frame, text=str(dungeon["created_at"]), **entry_style).pack(side="left", padx=10)
    
    # Join button
    join_btn = Button(frame, text="Join", **button_style,
                    command=lambda: join_dungeon(dungeon["id"]))
    join_btn.pack(side="right", padx=10)
    
    # Hover effects
    def on_enter(e):
        join_btn.config(bg="#534bae")
        frame.config(bg="#1a1a2d")
        
    def on_leave(e):
        join_btn.config(bg="#1a237e")
        frame.config(bg="#010616")
    
    frame.bind("<Enter>", on_enter)
    frame.bind("<Leave>", on_leave)
    join_btn.bind("<Enter>", on_enter)
    join_btn.bind("<Leave>", on_leave)
    
    return frame

def load_dungeons():
    # Fetch dungeons from Supabase
    response = supabase.table("dungeons").select("*").execute()
    dungeons = response.data
    
    # Clear existing entries
    for widget in main_frame.scrollable_frame.winfo_children():
        widget.destroy()
    
    # Create new entries
    for dungeon in dungeons:
        entry = create_dungeon_entry(main_frame.scrollable_frame, dungeon)
        entry.pack(fill="x", pady=2)

def join_dungeon(dungeon_id):
    # Your join logic here
    #GroupDungeon
    messagebox.showinfo("Success", "Joined dungeon successfully!")

# Load initial data
load_dungeons()

# Add refresh button (place this where your Treeview was)
refresh_btn = Button(
    window,
    text="Refresh List",
    command=load_dungeons,
    **button_style
)
refresh_btn.place(x=700, y=310)


    
window.resizable(False, False)
window.mainloop()
