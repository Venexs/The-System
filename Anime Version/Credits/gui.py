
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# Fork by Venexs


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label
import ujson
import csv
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import sys
import os
import webbrowser
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.misc as misc


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()
stop_event=threading.Event()

initial_height = 0
target_height = 564
window_width = 974

window.geometry(f"{window_width}x{initial_height}")

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window,transp_clr)
thesystem.system.center_window(window,window_width,target_height)
thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)


with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (974, 47), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (983, 52), job, type_="bottom")

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(win):
    with open("Files/Player Data/Tabs.json",'r') as tab_son:
        tab_son_data=ujson.load(tab_son)

    with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
        tab_son_data["Credits"]='Close'
        ujson.dump(tab_son_data,fin_tab_son,indent=4)
        
    if setting_data["Settings"]["Performernce (ANIME):"] != "True":
        stop_event.set()
        update_thread.join()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=50, delay=1)

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

def attri_show():
    canvas.itemconfig("Credit", state="hidden")
    canvas.itemconfig("Attribution", state="normal")

def credit_show():
    canvas.itemconfig("Attribution", state="hidden")
    canvas.itemconfig("Credit", state="normal")

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 564,
    width = 974,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    487.0,
    303.0,
    image=image_image_1
)

pres_file_data=misc.load_ujson("Files/Mod/presets.json")
video_path=pres_file_data["Anime"][video]
preloaded_frames = np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 478.0, 313.0, pause_duration=1)

image_image_16 = PhotoImage(
    file=relative_to_assets("image_16.png"))
image_16 = canvas.create_image(
    219.0,
    90.0,
    image=image_image_16,
    tag="Attribution",
    state="hidden"
)

image_image_17 = PhotoImage(
    file=relative_to_assets("image_17.png"))
image_17 = canvas.create_image(
    479.0,
    317.0,
    image=image_image_17,
    tag="Attribution",
    state="hidden"
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    486.0,
    292.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    192.0,
    90.0,
    image=image_image_3,
    tag="Credit"
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    216.0,
    127.0,
    image=image_image_4,
    tag="Credit"
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    300.0,
    212.0,
    image=image_image_5,
    tag="Credit"
)
button_image_1 = PhotoImage(file=relative_to_assets("button_1.png"))
button_1 = canvas.create_image(434.0, 158.0, image=button_image_1, anchor="nw", tag="Credit")
canvas.tag_bind(button_1, "<ButtonPress-1>", lambda e: webbrowser.open("https://linktr.ee/Venexs"))

button_image_2 = PhotoImage(file=relative_to_assets("button_2.png"))
button_2 = canvas.create_image(434.0, 177.0, image=button_image_2, anchor="nw", tag="Credit")
canvas.tag_bind(button_2, "<ButtonPress-1>", lambda e: webbrowser.open("https://www.youtube.com/channel/UCsPAixZxeSYKlcSCoQ8RoYQ"))

button_image_3 = PhotoImage(file=relative_to_assets("button_3.png"))
button_3 = canvas.create_image(434.0, 220.0, image=button_image_3, anchor="nw", tag="Credit")
canvas.tag_bind(button_3, "<ButtonPress-1>", lambda e: webbrowser.open("https://bio.link/hanakai"))

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    196.0,
    300.0,
    image=image_image_6,
    tag="Credit"
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    303.0,
    337.0,
    image=image_image_7,
    tag="Credit"
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    196.0,
    373.0,
    image=image_image_8,
    tag="Credit"
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    303.0,
    417.0,
    image=image_image_9,
    tag="Credit"
)

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    196.0,
    455.0,
    image=image_image_10,
    tag="Credit"
)

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    303.0,
    488.0,
    image=image_image_11,
    tag="Credit"
)

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    544.0,
    74.0,
    image=image_image_12,
    tag="Credit"
)

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    651.0,
    107.0,
    image=image_image_13,
    tag="Credit"
)

image_image_14 = PhotoImage(
    file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(
    543.0,
    136.0,
    image=image_image_14,
    tag="Credit"
)

image_image_15 = PhotoImage(
    file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(
    651.0,
    332.0,
    image=image_image_15,
    tag="Credit"
)

button_image_6 = PhotoImage(file=relative_to_assets("button_6.png"))
button_6 = canvas.create_image(603.0, 483.0, image=button_image_6, anchor="nw", tag="Credit")
canvas.tag_bind(button_6, "<ButtonPress-1>", lambda e: attri_show())

button_image_5 = PhotoImage(file=relative_to_assets("button_5.png"))
button_5 = canvas.create_image(603.0, 483.0, image=button_image_5, anchor="nw", tag="Attribution", state="hidden")
canvas.tag_bind(button_5, "<ButtonPress-1>", lambda e: credit_show())

canvas.create_rectangle(
    0.0,
    0.0,
    310.0,
    45.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    254.0,
    0.0,
    983.1130981445312,
    40.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    535.0,
    983.0,
    579.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    896.0,
    32.0,
    983.0,
    538.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    30.0,
    80.0,
    539.0,
    fill=transp_clr,
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (63, 504))
canvas.create_image(42.0, 286.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (58, 486))
canvas.create_image(918.0, 281.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    487.0,
    23.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    491.0,
    547.0,
    image=bottom_preloaded_images[bot_image_index]
)

button_image_7 = PhotoImage(
    file=relative_to_assets("button_7.png"))
button_7 = Button(
    image=button_image_7,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_7.place(
    x=842.0,
    y=53.0,
    width=30.0,
    height=30.0
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

if setting_data["Settings"]["Performernce (ANIME):"] != "True":
    update_thread = threading.Thread(target=update_images)
    update_thread.start()

window.resizable(False, False)
window.mainloop()
