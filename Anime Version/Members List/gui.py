
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label, Listbox, Scrollbar, Frame, Y, TOP, BOTH, X
from tkinter import ttk
import threading
import json
import csv
import subprocess
import time
from PIL import Image, ImageTk
from datetime import datetime, timedelta
import pandas as pd
import sys
import math
import os
from supabase import create_client, Client
from datetime import date
import random
from dotenv import load_dotenv, set_key
from dotenv import load_dotenv, set_key
from infisical_client import ClientSettings, InfisicalClient, GetSecretOptions, AuthenticationOptions, UniversalAuthMethod

client = InfisicalClient(ClientSettings(
    auth=AuthenticationOptions(
        universal_auth=UniversalAuthMethod(
            client_id="0fa8dbf8-92ee-4889-bd48-1b5dd2d22e87",
            client_secret="a2c9a58bda26c914e333e6c0f7c35e019b30c3afa67b5dc8419a142ee8b2aec8",
        )
    )
))


def get_url():
    # access value
    name = client.getSecret(options=GetSecretOptions(
        environment="dev",
        project_id="a7b312a2-feb6-42bc-92cb-387e37463076",
        secret_name="SUPABASE_URL"
    ))
    return f"{name.secret_value}"
def get_key():
    # access value
    name = client.getSecret(options=GetSecretOptions(
        environment="dev",
        project_id="a7b312a2-feb6-42bc-92cb-387e37463076",
        secret_name="SUPABASE_KEY"
    ))
    return f"{name.secret_value}"

URL = "https://smewvswweqnpwzngdtco.supabase.co"
KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNtZXd2c3d3ZXFucHd6bmdkdGNvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQyMDY2NjcsImV4cCI6MjA0OTc4MjY2N30.0SSN0bbwzFMCGC47XUuwqyKfF__Zikm_rJHqXWf78PU"

supabase: Client = create_client(URL, KEY)

current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, '../../'))
sys.path.insert(0, project_root)

import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets/frame0")

# Load JSON data once to reduce file I/O
def load_json(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

status_data = load_json("Files/status.json")
presets_data = load_json("Files/Mod/presets.json")

# Helper Functions
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def load_images(assets_path):
    return {
        "background": PhotoImage(file=assets_path / "image_1.png"),
        "stats": [PhotoImage(file=assets_path / f"image_{i}.png") for i in range(2, 6)]
    }

hovered_item = None
current_guild_id = None
names_and_levels = None
selected_username = None
images = None  # Store loaded images here
session = None


SESSION_FILE = "Files/Data/session.json"

def load_session():
    """Load session data from the session file."""
    if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:
        with open(SESSION_FILE, "r") as f:
            session_data = json.load(f)
            if all(key in session_data for key in ["access_token", "refresh_token", "expires_in"]):
                return session_data

session = load_session()


table_name = "status"  # Replace with the actual table name
name_column = "name"  # Replace with the actual name column name
level_column = "level"  # Replace with the actual level column name


def populate_treeview(treeview, data): # Pass treeview as an argument
    for level, name in data:
        treeview.insert("", "end", values=(name, level, thesystem.system.give_ranking(level), ""))

def refresh_treeview(treeview):
    treeview.delete(*treeview.get_children())
    populate_treeview(treeview, get_all_names_and_levels())


class UserData(object):  # A simple class to hold user data
    def __init__(self, id, username):
        self.id = id
        self.username = username


def get_user_data():
    if not hasattr(get_user_data, "user_data"):
        session = load_session()
        user_response = supabase.auth.get_user(session["access_token"])
        if user_response and user_response.user:
            username = None
            if "username" in user_response.user.user_metadata:
                username = user_response.user.user_metadata["username"]
            elif "name" in user_response.user.user_metadata:  # Fallback to "name"
                username = user_response.user.user_metadata["name"]

            get_user_data.user_data = UserData(user_response.user.id, username) # Use custom UserData class
        else:
            get_user_data.user_data = None
    return get_user_data.user_data


def get_current_user_guild():
    """Fetch the current user's guild ID."""
    user_data = get_user_data()
    if not user_data:
        return None
    response = supabase.table('status').select('guild_id').eq('user_id', user_data.id).execute()
    return response.data[0]['guild_id'] if response.data else None

def get_all_names_and_levels():
    """Fetch all names and levels excluding the current user."""
    user_data = get_user_data()
    if not user_data:
        return []
    current_username = user_data.username
    response = supabase.table('status') \
        .select("name, level") \
        .neq("name", current_username) \
        .order("level", desc=True) \
        .execute()
    return [(row["level"], row["name"]) for row in response.data] if response.data else []


def get_current_user_id():
    try:
        user_response = supabase.auth.get_user(session["access_token"])  # Synchronous call
        if user_response and user_response.user:
            return user_response.user.id
        else:
            return None
    except Exception as e:
        return None
    





current_guild_id = None

def on_treeview_hover(event, treeview):  # Pass treeview as an argument
    item_id = treeview.identify_row(event.y)
    global hovered_item, current_guild_id
    
    # Check if the guild ID has been cached, if not, fetch it once
    if current_guild_id is None:
        user_id = get_current_user_id()
        membership_response = supabase.table('status').select('guild_id').eq('user_id', user_id).execute()
        current_guild_id = membership_response.data[0]['guild_id'] if membership_response.data else None

    # Identify the item and column under the mouse cursor
    item_id = treeview.identify_row(event.y)
    column = treeview.identify_column(event.x)

    # Reset previously hovered item if it's different
    if hovered_item and hovered_item != item_id:
        # Clear the text for previously hovered item
        treeview.item(hovered_item, values=(
            treeview.item(hovered_item, "values")[0],  # Name
            treeview.item(hovered_item, "values")[1],  # Rank
            treeview.item(hovered_item, "values")[2],  # Members
            ""  # Clear text for previously hovered item
        ))
        hovered_item = None

    # Only process hover events over the 'Join' column
    if item_id and column == '#4':
        # Only update if the hovered item has changed
        if hovered_item != item_id:
            hovered_item = item_id
            hover_text = "In Guild" if item_id == current_guild_id else "Invite"
            
            # Update only the hover text to minimize changes
            treeview.item(item_id, values=(
                treeview.item(item_id, "values")[0],  # Name
                treeview.item(item_id, "values")[1],  # Rank
                treeview.item(item_id, "values")[2],  # Members
                hover_text  # Dynamic hover text
            ))

def on_treeview_leave(event, treeview):  # Pass treeview as an argument
    item_id = treeview.identify_row(event.y)
    global hovered_item
    # Reset the last hovered item's text to be empty when mouse leaves
    if hovered_item:
        treeview.item(hovered_item, values=(
            treeview.item(hovered_item, "values")[0],  # Name
            treeview.item(hovered_item, "values")[1],  # Rank
            treeview.item(hovered_item, "values")[2],  # Members
            ""  # Clear the text when mouse leaves
        ))
        hovered_item = None

def send_guild_invite(invitee_username):
    """Send a Guild invite to a selected player."""
    try:
        # Get the current user's ID
        current_user_id = get_current_user_id()
        if not current_user_id:
            return

        # Fetch the invitee's ID from the table based on their username
        response = supabase.table("status") \
            .select("user_id") \
            .eq("name", invitee_username) \
            .single() \
            .execute()

        if response.data:
            invitee_id = response.data["user_id"]
            # Insert a new invite into the guild_invites table
            invite_data = {
                "inviter_id": current_user_id,
                "invitee_id": invitee_id,
                "status": "pending"
            }

            invite_response = supabase.table("guild_invites").insert(invite_data).execute()

    except Exception as e:
        return


def get_all_names(table_name, name_column):
    user_data = get_user_data()
    if not user_data or not user_data.username:  # Check if both are available
        return []

    return supabase.table(table_name) \
        .select(name_column) \
        .neq(name_column, user_data.username) \
        .execute().data or []


# Modify the Treeview insertion to exclude the current player's name
names = get_all_names(table_name, name_column)
current_user_id = get_current_user_id()

def on_treeview_select(event, treeview):  # Pass treeview as an argument
    item_id = treeview.identify_row(event.y)
    global selected_username
    selected_item = treeview.selection()
    
    # Check if an item is selected
    if selected_item:
        item_id = selected_item[0]  # The selected item id
        
        # Fetch the username from the 'names' column (or other columns where you store the username)
        selected_username = treeview.item(item_id, 'values')[0]  # Assuming the username is in the first column

        
def on_treeview_click(event, treeview):  # Pass treeview as an argument
    item_id = treeview.identify_row(event.y)
    global selected_username
    # Identify the item clicked
    item_id = treeview.identify_row(event.y)
    column = treeview.identify_column(event.x)

    if not item_id:
        return

    # Fetch current user's guild
    user_id = get_current_user_id()
    membership_response = supabase.table('status').select('guild_id').eq('user_id', user_id).execute()
    current_guild_id = membership_response.data[0]['guild_id'] if membership_response.data else None

    if column == '#4':  # Check if it's the 'Join/Switch' column
        if item_id == current_guild_id:
            return
        else:
            send_guild_invite(invitee_username=selected_username)
            print("Sent Invite To {selected_username}")
            
            # Switch guild logic here


def main():
    global images, session, names_and_levels

    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path(r"assets/frame0")

    session = load_session()
        
    # ... (Window setup and styling - No major changes)

    window = Tk()
    window.geometry("488x0")  # Initial collapsed height
    window.configure(bg="#FFFFFF")
    window.attributes('-alpha', 0.8)
    window.overrideredirect(True)
    window.wm_attributes("-topmost", True)
    thesystem.system.make_window_transparent(window)
    images = load_images(ASSETS_PATH) # Load images once
    # Animate window open
    window_width = 488
    target_height = 716
    subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])
    thesystem.system.animate_window_open(window, target_height, window_width, step=40, delay=1)



    def start_move(event):
        global lastx, lasty
        lastx, lasty = event.x_root, event.y_root

    def move_window(event):
        global lastx, lasty
        x = window.winfo_x() + (event.x_root - lastx)
        y = window.winfo_y() + (event.y_root - lasty)
        window.geometry(f"+{x}+{y}")
        lastx, lasty = event.x_root, event.y_root

    # Update and Close Functions
    def ex_close(event=None):
        threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
        subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
        thesystem.system.animate_window_close(window, 0, window_width, step=20, delay=1)

    # Initialize Canvas and Widgets
    canvas = Canvas(window, bg="#FFFFFF", height=716, width=488, bd=0, highlightthickness=0, relief="ridge")
    canvas.place(x=0, y=0)


    # Background image and character attributes
    canvas.create_image(430.0, 363.0, image=images["background"])
    player = thesystem.system.VideoPlayer(canvas, presets_data["Anime"]["Video"], 430.0, 363.0)

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        230.0,
        367.0,
        image=image_image_2
    )

    image_image_3 = PhotoImage(
        file=relative_to_assets("image_3.png"))
    image_3 = canvas.create_image(
        150.0,
        117.0,
        image=image_image_3
    )

    canvas.create_rectangle(
        0.0,
        0.0,
        101.0,
        21.0,
        fill="#0C679B",
        outline="")

    canvas.create_rectangle(
        0.0,
        678.0,
        494.0,
        716.0,
        fill="#0C679B",
        outline="")

    image_image_19 = PhotoImage(
        file=relative_to_assets("image_19.png"))
    image_19 = canvas.create_image(
        -15.0,
        348.0,
        image=image_image_19
    )

    image_image_20 = PhotoImage(
        file=relative_to_assets("image_20.png"))
    image_20 = canvas.create_image(
        462.0,
        351.0,
        image=image_image_20
    )

    canvas.create_rectangle(
        92.0,
        0.0,
        488.0,
        34.0,
        fill="#0C679B",
        outline="")

    button_image_8 = PhotoImage(
        file=relative_to_assets("button_8.png"))
    button_8 = Button(
        image=button_image_8,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: ex_close(window),
        relief="flat"
    )
    button_8.place(
        x=390.0,
        y=55.0,
        width=20.0,
        height=20.0
    )

    image_image_21 = PhotoImage(
        file=relative_to_assets("image_21.png"))
    image_21 = canvas.create_image(
        244.0,
        (19),
        image=image_image_21
    )

    canvas.tag_bind(image_21, "<ButtonPress-1>", start_move)
    canvas.tag_bind(image_21, "<B1-Motion>", move_window)

    image_image_22 = PhotoImage(
        file=relative_to_assets("image_22.png"))
    image_22 = canvas.create_image(
        295.0,
        680,
        image=image_image_22
    )



    # TreeView Initialization
    frame = Frame(window, bg='#010616')
    frame.pack(padx=75, pady=150, fill='both', expand=True)

    columns = ('Name', 'Level', 'Rank', 'Invite')
    treeview = ttk.Treeview(frame, columns=columns, show='headings', selectmode='browse')
    treeview.pack(side='left', fill='both', expand=True)

    treeview.heading('Name', text='Username')
    treeview.heading('Level', text='Level')
    treeview.heading('Rank', text='Rank')
    treeview.heading('Invite', text='')
    treeview.column('Name', width=100)
    treeview.column('Level', width=20)
    treeview.column('Rank', width=20)
    treeview.column('Invite', width=30)

    scrollbar = ttk.Scrollbar(frame, orient='vertical', command=treeview.yview)
    scrollbar.pack(side='right', fill='y')
    treeview.configure(yscrollcommand=scrollbar.set)
    

    # Apply style for row borders
    style = ttk.Style()
    style.theme_use('clam')
    style.configure('Treeview', rowheight=15, borderwidth=10, relief="groove", font=('Montserrat Bold', 10))
    style.configure('Treeview', background='black', fieldbackground='black', foreground='white')
    style.map('Treeview', background=[('selected', 'skyblue')], foreground=[('selected', 'black')])
    style.map('Treeview', background=[('selected', 'skyblue')], foreground=[('selected', 'black')])

    names_and_levels = get_all_names_and_levels()
    populate_treeview(treeview, names_and_levels)  # Pass both treeview and data

    # Event Handlers
    treeview.bind("<Motion>", lambda event: on_treeview_hover(event, treeview))
    treeview.bind("<Enter>", lambda event: on_treeview_hover(event, treeview))
    treeview.bind("<Leave>", lambda event: on_treeview_leave(event, treeview))
    treeview.bind('<ButtonRelease-1>', lambda event: on_treeview_click(event, treeview))
    treeview.bind("<<TreeviewSelect>>", lambda event: on_treeview_select(event, treeview))


    refresh_button = Button(window, text="Refresh", command=lambda: refresh_treeview(treeview))
    refresh_button.place(x=10, y=55)  # Or wherever you want it

    window.resizable(False, False)
    window.mainloop()
    
if __name__ == "__main__":
    main()