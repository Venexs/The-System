
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

import tkinter as tk
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label, Event
import threading
import ujson
import json
import csv
import subprocess
import time
import cv2
from PIL import Image, ImageTk
from datetime import datetime, timedelta
import pandas as pd
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, '../../'))
sys.path.insert(0, project_root)

import thesystem.system
import thesystem.misc

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

window = Tk()

stop_event=threading.Event()

window.geometry("488x0")  # Initial collapsed height
window.configure(bg="#FFFFFF")
window.attributes('-alpha', 0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window, transp_clr)

# Animate window open
window_width = 488
target_height = 716

thesystem.system.animate_window_open(window, target_height, window_width, step=50, delay=1)

def animate_close():
    thesystem.system.animate_window_close(window, 0, window_width, step=50, delay=1)

with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

# Preload top and bottom images
top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (488, 38), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (609, 33), job, type_="bottom")


subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

presets_data = thesystem.misc.load_ujson("Files/Mod/presets.json")


status_data = thesystem.misc.load_ujson("Files/Player Data/Status.json")
job_data = thesystem.misc.load_ujson("Files/Player Data/Job_info.json")

def title_chng(event):
    subprocess.Popen(['python', 'Anime Version/Equip Title/gui.py'])

    ex_close(0)

# Helper Functions
# Helper Functions
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def load_fatigue_value():
    with open('Files/Player Data/Status.json', 'r') as file:
        data = json.load(file)
        fatigue = data["status"][0].get("fatigue", 0)
        fatigue_max = data["status"][0].get("fatigue_max", 1)  # Avoid division by zero
        # Calculate fatigue percentage
        fatigue_percent = int((fatigue / fatigue_max) * 100)
        return fatigue_percent

# Function to update the text on the canvas every 3 minutes
def update_fatigue_text(canvas, fatigue_val):
    loaded_fatigue_value = load_fatigue_value()  # Load fatigue value once

    while not stop_update_thread:
        current_fatigue_percent = load_fatigue_value()

        # Update canvas text only if fatigue value has changed
        if current_fatigue_percent != loaded_fatigue_value:
            canvas.itemconfig(fatigue_val, text=f"{current_fatigue_percent}%")
            subprocess.Popen(['python', 'Files/Mod/default/sfx_point.py'])
            loaded_fatigue_value = current_fatigue_percent

        # Wait for 3 minutes before updating again
        for _ in range(180):
            if stop_update_thread:
                return
            time.sleep(1)

update_thread = None
stop_update_thread = False

def start_update_thread(canvas, fatigue_val):
    global stop_update_thread, update_thread
    stop_update_thread = False
    update_thread = threading.Thread(target=update_fatigue_text, args=(canvas, fatigue_val), daemon=True)
    update_thread.start()

def stop_update_thread_func():
    global stop_update_thread
    stop_update_thread = True
    if update_thread.is_alive():
        update_thread.join()  # Wait for the thread to finish

def update_tabs_ujson(status='Open'):
    tabs_ujson_path = "Files/Player Data/Tabs.json"
    with open(tabs_ujson_path, 'r+') as tab_ujson:
        tab_data = ujson.load(tab_ujson)
        tab_data["Status"] = status
        tab_ujson.seek(0)
        ujson.dump(tab_data, tab_ujson, indent=4)
        tab_ujson.truncate()

# Update and Close Functions
def ex_close(event=None):
    update_tabs_ujson('Close')
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    stop_update_thread_func()
    if setting_data["Settings"]["Performernce (ANIME):"] != "True":
        stop_event.set()
        update_thread.join()
    # Create a thread and start it
    close_thread = threading.Thread(target=animate_close, daemon=True)
    close_thread.start()

def start_job(event):
    data = thesystem.misc.load_ujson("Files/Player Data/Job_info.json")
    data["status"][0]["job_active"] = 'True'
    date_format = "%Y-%m-%d"
    future_date = (datetime.now() + timedelta(days=2)).strftime(date_format)
    with open("Files/Temp Files/Job_Change Date.csv", 'w', newline='') as file:
        csv.writer(file).writerow([future_date])
    with open("Files/Player Data/Job_info.json", 'w') as fson:
        ujson.dump(data, fson, indent=4)

# Title color assignment
def title_color(name):  
    color_map = {"False Ranker": "#FF2F2F", "One Above All": "#FFCF26"}
    return color_map.get(name, "#FFFFFF")

# Initialize Canvas and Widgets
canvas = Canvas(window, bg="#FFFFFF", height=716, width=488, bd=0, highlightthickness=0, relief="ridge")
canvas.place(x=0, y=0)

def fatigue_window():
    subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
    subprocess.Popen(['python', 'Anime Version/Fatigue/gui.py'])

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


# Background image and character attributes
canvas.create_image(430.0, 363.0, image=PhotoImage(file=relative_to_assets("image_1.png")))
player = thesystem.system.FastVideoPlayer(canvas, np.load(presets_data["Anime"][video]), 430.0, 363.0, resize_factor=0.3, pause_duration=0.7)

# Display Character Status
name, hp, mp, lvl = status_data["status"][0]["name"].upper(), status_data["status"][0]["hp"], status_data["status"][0]["mp"], status_data["status"][0]["level"]
job, title = status_data["status"][1]["job"].upper(), status_data["status"][1]["title"]
coins=status_data["status"][0]["coins"]
av_str_based=status_data["avail_eq"][0]["str_based"]
av_int_based=status_data["avail_eq"][0]["int_based"]
xp = status_data["status"][0]["XP"]

canvas.create_text(322.0, 225.0, anchor="nw", text="LEVEL", fill="#FFFFFF", font=("Montserrat Regular", 24 * -1))
canvas.create_text(328.0, 164.0, anchor="nw", text=f"{lvl:02d}", fill="#FFFFFF", font=("Montserrat Bold", 60 * -1))
canvas.create_text(55.0, 199.0, anchor="nw", text="JOB:", fill="#FFFFFF", font=("Montserrat Bold", 20 * -1))
canvas.create_text(107.0, 200.0, anchor="nw", text=job, fill="#FFFFFF", font=("Montserrat Regular", 18 * -1))
canvas.create_text(122.0, 234.0, anchor="nw", text=title.upper(), fill=title_color(title), font=("Montserrat Regular", 18 * -1))

# Stat Display (STR, INT, etc.) with buffs
stat_attributes = ["str", "int", "agi", "vit", "per", "man"]
stat_text_widgets = {}

for i, stat in enumerate(stat_attributes):
    value = status_data["status"][0][stat]
    buff = status_data["equipment"][0].get(stat.upper(), 0)
    position = (104 if i < 3 else 282, 392 + (i % 3) * 55)

    stat_text_widgets[stat] = canvas.create_text(position, anchor="nw", text=f"{value:03d}", fill="#FFFFFF", font=("Montserrat SemiBold", 20 * -1))
    canvas.create_text(position[0] + 40, position[1] + 5, anchor="nw", text=f"({thesystem.system.sign(buff)+thesystem.system.pos_fix(thesystem.system.equipment_value_plus(buff))})", fill="#34FF48", font=("Montserrat Regular", 13 * -1))


image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    239.0,
    350.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    150.0,
    117.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    232.0,
    460.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    232.0,
    333.0,
    image=image_image_5
)

# ? =====================================================================
# ? =====================================================================

# ? =====================================================================
# Get the result from get_fin_xp()
fin_list = thesystem.system.get_fin_xp()

re_check = fin_list[0]
fin_xp=round(fin_list[1], 2)

if re_check==True:
    try:
        subprocess.Popen(["python", "Anime Version/Status Tab/gui.py"])
        
        ex_close(0)
    except:
        print()

# ? =====================================================================
def update_stat(stat_name): 
    with open("Files/Player Data/Ability_Check.json", 'r') as ability_check_file:
        ability_check_file_data=ujson.load(ability_check_file)
        val=ability_check_file_data["Check"][stat_name.upper()]
    available_points = status_data["avail_eq"][0]["str_based"] if stat_name in ["str", "agi", "vit"] else status_data["avail_eq"][0]["int_based"]
    if val<8 and available_points > 0:
            de_update_str() if stat_name in ["str", "agi", "vit"] else de_update_int()
            status_data["status"][0][stat_name] += 1
            val=status_data["status"][0][stat_name]
            canvas.itemconfig(stat_text_widgets[stat_name], text=f"{val:03d}")
            subprocess.Popen(['python', 'Files/Mod/default/sfx_point.py'])
            status_data["avail_eq"][0]["str_based" if stat_name in ["str", "agi", "vit"] else "int_based"] -= 1
            if stat_name=='vit':
                status_data["status"][0]["fatigue_max"]+=20
            elif stat_name=='int':
                status_data["status"][0]["mp"]+=5
            with open("Files/Player Data/Status.json", 'w') as fson:
                ujson.dump(status_data, fson, indent=6)
            with open("Files/Player Data/Ability_Check.json", 'w') as fin_ability_check_file:
                ability_check_file_data["Check"][stat_name.upper()]+=1
                ujson.dump(ability_check_file_data, fin_ability_check_file, indent=4)
            #if stat_name=='vit':
                #update_fatigue_text(canvas,fatigue_val)
    elif val>=8 and available_points > 0:
        with open("Files/Temp Files/Urgent Temp.csv", 'w', newline='') as urgent_file:
            fr=csv.writer(urgent_file)
            fr.writerow([stat_name.upper()])
        subprocess.Popen(['python', 'Anime Version/Urgent Quest/gui.py'])
        ex_close(0)

stat_buttons = {
    stat: PhotoImage(file=relative_to_assets("button_1.png"))
    for stat in stat_attributes
}
for stat in stat_attributes:
    canvas.create_image(
        188.0 if stat in ["str", "int", "agi"] else 364.0, 
        408.0 + (stat_attributes.index(stat) % 3) * 54, 
        image=stat_buttons[stat], 
        tags=stat
    )
    canvas.tag_bind(stat, "<ButtonPress-1>", lambda e, s=stat: update_stat(s))
    
# / =================================================
# / =================================================

def de_update_str():
    global av_str_based
    with open("Files/Player Data/Status.json", 'r') as fson:
        data=ujson.load(fson)
        check_value=data["avail_eq"][0]['str_based']
    if check_value>0:
        global av_str_based_txt
        current_number = int(check_value)
        new_number = current_number - 1
        new_text = f"{new_number:03d}"
        canvas.itemconfig(av_str_based_txt, text=new_text)
        av_str_based=new_number

def de_update_int():
    global av_int_based
    with open("Files/Player Data/Status.json", 'r') as fson:
        data=ujson.load(fson)
        check_value=data["avail_eq"][0]['int_based']
    if check_value>0:
        global av_int_based_txt
        current_number = int(check_value)
        new_number = current_number - 1
        new_text = f"{new_number:03d}"
        canvas.itemconfig(av_int_based_txt, text=new_text)
        av_int_based=new_number

# / =================================================
# / =================================================

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    86.0,
    407.0,
    image=image_image_6
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    84.0,
    461.5,
    image=image_image_7
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    85.0,
    517.0,
    image=image_image_8
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    266.0-0,
    407.0,
    image=image_image_9
)

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    270.0-8,
    462.0,
    image=image_image_10
)

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    273.0-13,
    517.0,
    image=image_image_11
)

gap=20

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    94.0-gap,
    315.0,
    image=image_image_12
)

canvas.create_text(
    113.0-gap,
    301.0,
    anchor="nw",
    text=hp,
    fill="#FFFFFF",
    font=("Montserrat Medium", 18 * -1)
)

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    190.0-gap,
    315.0,
    image=image_image_13
)

canvas.create_text(
    205.0-gap,
    301.0,
    anchor="nw",
    text=mp,
    fill="#FFFFFF",
    font=("Montserrat Medium", 18 * -1)
)

image_image_23 = PhotoImage(
    file=relative_to_assets("image_23.png"))
image_23 = canvas.create_image(
    302.0-gap,
    315.0,
    image=image_image_23
)

fat_val = load_fatigue_value()
fatigue_val=canvas.create_text(
    347.0-gap,
    301.0,
    anchor="nw",
    text=f"{int(fat_val)}%",
    fill="#FFFFFF",
    font=("Montserrat Medium", 18 * -1)
)

image_image_14 = PhotoImage(
    file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(
    179.0,
    343.0,
    image=image_image_14
)

canvas.create_text(
    280.0,
    330.0,
    anchor="nw",
    text=fin_xp,
    fill="#FFFFFF",
    font=("Montserrat Medium", 16 * -1)
)

canvas.create_text(
    322.0,
    225.0,
    anchor="nw",
    text="LEVEL",
    fill="#FFFFFF",
    font=("Montserrat Regular", 24 * -1)
)

canvas.create_text(
    55.0,
    199.0,
    anchor="nw",
    text="JOB:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 20 * -1)
)

canvas.create_text(
    55.0,
    233.0,
    anchor="nw",
    text="TITLE:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 20 * -1)
)

canvas.create_text(
    107.0,
    200.0,
    anchor="nw",
    text=job.upper(),
    fill="#FFFFFF",
    font=("Montserrat Regular", 18 * -1)
)


canvas.create_text(
    55.0,
    166.0,
    anchor="nw",
    text="NAME:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 20 * -1)
)

canvas.create_text(
    129.0,
    167.0,
    anchor="nw",
    text=name,
    fill="#FFFFFF",
    font=("Montserrat Regular", 18 * -1)
)

av_int_based_txt=canvas.create_text(
    365.0,
    615.0,
    anchor="nw",
    text=f"{av_int_based:03d}",
    fill="#FFFFFF",
    font=("Montserrat Bold", 24 * -1)
)

image_image_15 = PhotoImage(
    file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(
    297.0,
    630.0,
    image=image_image_15
)

av_str_based_txt=canvas.create_text(
    365.0,
    560.0,
    anchor="nw",
    text=f"{av_str_based:03d}",
    fill="#FFFFFF",
    font=("Montserrat Bold", 24 * -1)
)

image_image_16 = PhotoImage(
    file=relative_to_assets("image_16.png"))
image_16 = canvas.create_image(
    304.0,
    579.0,
    image=image_image_16
)

canvas.create_text(
    51.0,
    574.0,
    anchor="nw",
    text="COINS:",
    fill="#FFFFFF",
    font=("Montserrat Medium", 16 * -1)
)

image_image_17 = PhotoImage(
    file=relative_to_assets("image_17.png"))
image_17 = canvas.create_image(
    132.0,
    609.0,
    image=image_image_17
)

canvas.create_text(
    85.0,
    598.0,
    anchor="nw",
    text=coins,
    fill="#FFFFFF",
    font=("Montserrat Regular", 20 * -1)
)

image_image_18 = PhotoImage(
    file=relative_to_assets("image_18.png"))
image_18 = canvas.create_image(
    300.0,
    245.0,
    image=image_image_18
)

canvas.tag_bind(image_18, "<ButtonPress-1>", title_chng)


image_image_200 = PhotoImage(
    file=relative_to_assets("image_18_1.png"))
image_200 = canvas.create_image(
    300.0,
    208.0,
    image=image_image_200,
    tags='Job',
    state='normal'
)

canvas.tag_bind(image_200, "<ButtonPress-1>", start_job)

'''
button_image_7 = PhotoImage(
    file=relative_to_assets("button_7.png"))
button_7 = Button(
    image=button_image_7,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: subprocess.Popen(['python', 'Anime Version/Statistics/gui.py']),
    relief="flat"
)
button_7.place(
    x=51.0,
    y=65.0,
    width=145.0,
    height=23.0
)
'''

side = PhotoImage(file=relative_to_assets("blue.png"))
if job.upper()!="NONE":
    side = PhotoImage(file=relative_to_assets("purple.png"))

canvas.create_image(-15.0, 348.0, image=side)
canvas.create_image(490.0, 351.0, image=side)

canvas.create_rectangle(
    0.0,
    0.0,
    101.0,
    21.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    678.0,
    494.0,
    716.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    488.0,
    34.0,
    fill=transp_clr,
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (101, 659))
canvas.create_image(0.0, 352.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (80, 653))
canvas.create_image(462.0, 351.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    244.0,
    19.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    295.0,
    680.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

if setting_data["Settings"]["Performernce (ANIME):"] != "True":
    update_thread = threading.Thread(target=update_images)
    update_thread.start()

# ===========================================================

button_image_8 = PhotoImage(
    file=relative_to_assets("button_8.png"))
button_8 = Button(
    image=button_image_8,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_8.place(
    x=390.0,
    y=55.0,
    width=20.0,
    height=20.0
)

with open("Files/Player Data/Job_info.json", 'r') as stat_fson:
    stat_data=ujson.load(stat_fson)

if stat_data["status"][0]["job_active"]=='False' and lvl>=40:
    print()
    canvas.itemconfig("Job", state="normal")
else:
    canvas.itemconfig("Job", state="hidden")

image_image_24 = PhotoImage(
    file=relative_to_assets("image_24.png"))
image_24 = canvas.create_image(
    261.0,
    112.0,
    image=image_image_24
)

canvas.tag_bind(image_24, "<ButtonPress-1>", lambda event: thesystem.system.info_open("ABI Points"))

image_image_25 = PhotoImage(
    file=relative_to_assets("image_25.png")) 
image_25 = canvas.create_image(
    384.0,
    313.9999694824219,
    image=image_image_25
)

canvas.tag_bind(image_25, "<ButtonPress-1>", lambda event: fatigue_window())

start_update_thread(canvas, fatigue_val)
window.resizable(False, False)
window.mainloop()
