
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import csv
import subprocess
import cv2
import threading
from PIL import Image, ImageTk
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.quests
import thesystem.system

window = Tk()

initial_height = 0
target_height = 555
window_width = 898

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.center_window(window,window_width,target_height)
thesystem.system.animate_window_open(window, target_height, window_width, step=50, delay=1)

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window,transp_clr)

with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

# Preload top and bottom images
top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (957, 43), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (1026, 47), job, type_="bottom")

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

window.configure(bg = transp_clr)
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(win):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=50, delay=1)


with open("Files/Temp Files/Quest Temp.csv", 'r') as csv_open:
    fr=csv.reader(csv_open)
    for k in fr:
        name=k[0]
        typeof=k[2]

objdesc1=objdesc2=''
desc1=desc2=''
segments = []
other_seg=[]
segment_length = 70

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    get_stuff_path_str=pres_file_data["Anime"]["Mid Size Screen"]

def get_stuff_path(key):
    full_path=get_stuff_path_str+'/'+key
    return full_path

canvas = Canvas(
    window,
    bg = transp_clr,
    height = 555,
    width = 897,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=get_stuff_path("image_1.png"))
image_1 = canvas.create_image(
    450.0,
    277.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Anime"][video]
    preloaded_frames=np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 478.0, 277.0, pause_duration=0.5)

image_image_2 = PhotoImage(
    file=get_stuff_path("frame.png"))
image_2 = canvas.create_image(
    463.0,
    284.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=get_stuff_path("quests_title.png"))
image_3 = canvas.create_image(
    448.023681640625,
    117.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=get_stuff_path("name_box.png"))
image_4 = canvas.create_image(
    512.6856384277344,
    226.34335327148438,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=get_stuff_path("image_box.png"))
image_5 = canvas.create_image(
    235.40396118164062,
    252.2617950439453,
    image=image_image_5
)

def get_quest_img(rank):
    with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
        theme_data=ujson.load(themefile)
        theme=theme_data["Theme"]
    if rank == '?':
        path = f"Files\\Mod\\default\\{theme}\\Quest img\\Unknown.png"
    else:
        path = f"Files\\Mod\\default\\{theme}\\Quest img\\{rank}.png"
    image = Image.open(path)
    image = image.resize((105, 105), Image.Resampling.LANCZOS)
    return ImageTk.PhotoImage(image)


if typeof == "Learn":    
        
    objdesc1=objdesc2=''
    desc1=desc2=''
    segments = []
    other_seg=[]
    segment_length = 70

    with open("Files/Player Data/Active_Quests.json", 'r') as fson:
        data=ujson.load(fson)
        for k in data:
            if k==name:
                obj=objval='-'
                rank=data[k][0]["rank"]

                check=True
                try:
                    skill=data[k][0]["skill"]
                    level=data[k][0]["level"]
                except:
                    check=False
                    obj_desc=data[k][0]["obj_desc"]
                    for i in range(0, len(obj_desc), segment_length):
                        other_seg.append(obj_desc[i:i+segment_length])

                    if len(other_seg) >= 1:
                        objdesc1 = other_seg[0]
                    if len(other_seg) >= 2:
                        objdesc2 = "-"+other_seg[1]

                try:
                    obj=data[k][0]["amt"]
                    objval=data[k][0]["amtval"]
                except:
                    obj=data[k][0]["time"]
                    objval=data[k][0]["timeval"]

                desc_full=data[k][0]["desc"]
                fatigue=thesystem.system.give_fatigue_from_rank(rank)

                for i in range(0, len(desc_full), segment_length):
                    segments.append(desc_full[i:i+segment_length])

                if len(segments) >= 1:
                    desc1 = segments[0]
                if len(segments) >= 2:
                    desc2 = "-"+segments[1]

                rewards=data[k][0]["Rewards"]

    with open("Files/Player Data/Status.json", 'r') as data_fson:
        data_status=ujson.load(data_fson)
        finaL_fatigue=data_status["status"][0]["fatigue_max"]
        pl_fatigue=data_status["status"][0]["fatigue"]

        fatigue_true=False
        if (pl_fatigue+fatigue)>=finaL_fatigue:
            fatigue_true=True

    if fatigue_true==True:
        thesystem.system.message_open("High Rank")


    canvas.create_text(
        325.023681640625,
        218.0,
        anchor="nw",
        text=name,
        fill="#FFFFFF",
        font=("Montserrat Regular", 16 * -1)
    )

    image_image_6 = get_quest_img(rank)
    image_6 = canvas.create_image(
        235.023681640625,
        252.0,
        image=image_image_6
    )

    if check==True:
        canvas.create_text(
            329.023681640625,
            300.0,
            anchor="nw",
            text=f"Learn [{skill}] and become [{level}] at it.",
            fill="#FFFFFF",
            font=("Montserrat Regular", 11 * -1)
        )

    else:
        canvas.create_text(
            329.023681640625,
            300.0,
            anchor="nw",
            text=objdesc1,
            fill="#FFFFFF",
            font=("Montserrat Regular", 11 * -1)
        )

        canvas.create_text(
            329.023681640625,
            313.0,
            anchor="nw",
            text=objdesc2,
            fill="#FFFFFF",
            font=("Montserrat Regular", 11 * -1)
        )

    image_image_7 = PhotoImage(
        file=get_stuff_path("box.png"))
    image_7 = canvas.create_image(
        447.023681640625,
        309.0,
        image=image_image_7
    )

    canvas.create_text(
        329.023681640625,
        246.0,
        anchor="nw",
        text="Quest Difficulty:",
        fill="#FFFFFF",
        font=("Montserrat SemiBold", 12 * -1)
    )

    canvas.create_text(
        395.0,
        283.0,
        anchor="nw",
        text=f"Do for {obj} {objval}",
        fill="#FFFFFF",
        font=("Montserrat Regular", 12 * -1)
    )

    canvas.create_text(
        329,
        283.0,
        anchor="nw",
        text="Objective:",
        fill="#FFFFFF",
        font=("Montserrat SemiBold", 12 * -1)
    )

    canvas.create_text(
        329.023681640625,
        264.0,
        anchor="nw",
        text=f"{rank}-Rank",
        fill="#FFFFFF",
        font=("Montserrat Regular", 12 * -1)
    )

    canvas.create_text(
        327.023681640625,
        332.0,
        anchor="nw",
        text=desc1,
        fill="#FFFFFF",
        font=("Montserrat Regular", 10 * -1)
    )

    canvas.create_text(
        327.023681640625,
        344.0,
        anchor="nw",
        text=desc2,
        fill="#FFFFFF",
        font=("Montserrat Regular", 10 * -1)
    )

    # ? ===============================================================================

    name1=name2=name3=name4='-'
    qt1=qt2=qt3=qt4=0
    dicts={}

    try:
        c=0
        reward_key=list(rewards.keys())
        for k in reward_key:
            if c==0:
                if k=="LVLADD":
                    name1="Level Increase"
                    o_name1=k
                    qt1=data[name][0]["Rewards"]["LVLADD"]
                    c+=1
                elif k=="STRav":
                    name1="Addition of STR, AGI, VIT, Available Points"
                    o_name1=k
                    qt1=data[name][0]["Rewards"]["STRav"]
                    c+=1
                elif k=="INTav":
                    name1="Addition of INT, PER, MAN, Available Points"
                    o_name1=k
                    qt1=data[name][0]["Rewards"]["INTav"]
                    c+=1
                else:
                    name1=k
                    o_name1=k
                    qt1=data[name][0]["Rewards"][k]
                    c+=1
                
                dicts[o_name1]=qt1

            elif c==1:
                if k=="LVLADD":
                    name2="Level Increase"
                    o_name2=k
                    qt2=rewards=data[name][0]["Rewards"]["LVLADD"]
                    c+=1
                elif k=="STRav":
                    name2="Addition of STR, AGI, VIT, Available Points"
                    o_name2=k
                    qt2=rewards=data[name][0]["Rewards"]["STRav"]
                    c+=1
                elif k=="INTav":
                    name2="Addition of INT, PER, MAN, Available Points"
                    o_name2=k
                    qt2=rewards=data[name][0]["Rewards"]["INTav"]
                    c+=1
                else:
                    name2=k
                    o_name2=k
                    qt2=data[name][0]["Rewards"][k]
                    c+=1

                dicts[o_name2]=qt2

            elif c==2:
                if k=="LVLADD":
                    name3="Level Increase"
                    o_name3=k
                    qt3=rewards=data[name][0]["Rewards"]["LVLADD"]
                    c+=1
                elif k=="STRav":
                    name3="Addition of STR, AGI, VIT, Available Points"
                    o_name3=k
                    qt3=rewards=data[name][0]["Rewards"]["STRav"]
                    c+=1
                elif k=="INTav":
                    name3="Addition of INT, PER, MAN, Available Points"
                    o_name3=k
                    qt3=rewards=data[name][0]["Rewards"]["INTav"]
                    c+=1
                else:
                    name3=k
                    o_name3=k
                    qt3=data[name][0]["Rewards"][k]
                    c+=1

                dicts[o_name3]=qt3

            elif c==3:
                if k=="LVLADD":
                    name4="Level Increase"
                    o_name4=k
                    qt4=rewards=data[name][0]["Rewards"]["LVLADD"]
                    c+=1
                elif k=="STRav":
                    name4="Addition of STR, AGI, VIT, Available Points"
                    o_name4=k
                    qt4=rewards=data[name][0]["Rewards"]["STRav"]
                    c+=1
                elif k=="INTav":
                    name4="Addition of INT, PER, MAN, Available Points"
                    o_name4=k
                    qt4=rewards=data[name][0]["Rewards"]["INTav"]
                    c+=1
                else:
                    name4=k
                    o_name4=k
                    qt4=data[name][0]["Rewards"][k]
                    c+=1

                dicts[o_name4]=qt4

    except:
        print()

    canvas.create_text(
        168.023681640625,
        347.0,
        anchor="nw",
        text="REWARDS:",
        fill="#10DF4A",
        font=("Montserrat SemiBold", 14 * -1)
    )

    canvas.create_text(
        181.023681640625,
        364.0,
        anchor="nw",
        text=f"-{name1}",
        fill="#FFFFFF",
        font=("Montserrat Light", 12 * -1)
    )

    canvas.create_text(
        181.023681640625,
        380.0,
        anchor="nw",
        text=f"-{name2}",
        fill="#FFFFFF",
        font=("Montserrat Light", 12 * -1)
    )

    canvas.create_text(
        181.023681640625,
        396.0,
        anchor="nw",
        text=f"-{name3}",
        fill="#FFFFFF",
        font=("Montserrat Light", 12 * -1)
    )

    canvas.create_text(
        181.023681640625,
        412.0,
        anchor="nw",
        text=f"-{name4}",
        fill="#FFFFFF",
        font=("Montserrat Light", 12 * -1)
    )

    button_image_1 = PhotoImage(
        file=get_stuff_path("return.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.return_back_to_tab("Quests",window),
        relief="flat"
    )
    button_1.place(
        x=785.023681640625,
        y=62.0,
        width=40.0,
        height=40.0
    )

    button_image_2 = PhotoImage(
        file=get_stuff_path("gift.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.set_preview_temp(o_name1,qt1),
        relief="flat"
    )
    button_2.place(
        x=168.023681640625,
        y=366.0,
        width=13.0,
        height=13.0
    )

    button_image_3 = PhotoImage(
        file=get_stuff_path("gift.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.set_preview_temp(o_name2,qt2),
        relief="flat"
    )
    button_3.place(
        x=168.023681640625,
        y=382.0,
        width=13.0,
        height=13.0
    )

    button_image_4 = PhotoImage(
        file=get_stuff_path("gift.png"))
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.set_preview_temp(o_name3,qt3),
        relief="flat"
    )
    button_4.place(
        x=168.023681640625,
        y=397.0,
        width=13.0,
        height=13.0
    )

    button_image_5 = PhotoImage(
        file=get_stuff_path("gift.png"))
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.set_preview_temp(o_name4,qt4),
        relief="flat"
    )
    button_5.place(
        x=168.023681640625,
        y=413.0,
        width=13.0,
        height=12.999969482421875
    )

    image_image_8 = PhotoImage(
        file=get_stuff_path("preview.png"))
    image_8 = canvas.create_image(
        136.023681640625,
        481.0,
        image=image_image_8
    )

    button_image_6 = PhotoImage(
        file=get_stuff_path("abandon.png"))
    button_6 = Button(
        image=button_image_6,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.quests.abandon_quest(name,window),
        relief="flat"
    )
    button_6.place(
        x=587.023681640625,
        y=378.0,
        width=120.0,
        height=16.0
    )

    if fatigue_true == False:

        button_image_7 = PhotoImage(
            file=get_stuff_path("complete.png"))
        button_7 = Button(
            image=button_image_7,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: thesystem.quests.quest_reward(window,dicts,rank,name),
            relief="flat"
        )
        button_7.place(
            x=587.023681640625,
            y=398.0,
            width=120.0,
            height=16.0
        )

elif typeof == "Common":
    donot=False
    def reminder():
        global ex_txt
        ex_tr_txt=canvas.itemcget(ex_txt, "text")
        with open("Files/Temp Files/Quest Reminder.csv", 'w', newline='') as csv_open:
            writer=csv.writer(csv_open)
            writer.writerow([name, ex_tr_txt])
        subprocess.Popen(['python', "Anime Version/Quest Reminder/gui.py"])
        ex_close(0)
    
    with open("Files/Player Data/Active_Quests.json", 'r') as fson:
        data=ujson.load(fson)
        for k in data:
            if k==name:
                rank=data[k][0]["rank"]

                skill=data[k][0]["skill"]
                try:
                    num=data[k][0]["amt"]
                    numval=data[k][0]["amtval"]
                except:
                    num=data[k][0]["time"]
                    numval=data[k][0]["timeval"]
                    donot=True

                try:
                    if donot!=True:
                        time=data[k][0]["time"]
                        timeval=data[k][0]["timeval"]
                    else:
                        time=timeval='-'
                except:
                    time=timeval='-'

                desc_full=data[k][0]["desc"]

                for i in range(0, len(desc_full), segment_length):
                    segments.append(desc_full[i:i+segment_length])

                if len(segments) >= 1:
                    desc1 = segments[0]
                if len(segments) >= 2:
                    desc2 = segments[1]

                rewards=data[k][0]["Rewards"]
                fatigue=thesystem.system.give_fatigue_from_rank(rank)

    with open("Files/Player Data/Status.json", 'r') as data_fson:
        data_status=ujson.load(data_fson)
        finaL_fatigue=data_status["status"][0]["fatigue_max"]
        pl_fatigue=data_status["status"][0]["fatigue"]

        fatigue_true=False
        if (pl_fatigue+fatigue)>=finaL_fatigue:
            fatigue_true=True

    if fatigue_true==True:
        thesystem.system.message_open("High Rank")
    
    def up():
        global ex_txt
        ex_tr_txt=canvas.itemcget(ex_txt, "text")
        new_1=int(ex_tr_txt)+1
        be_new_1=f"{new_1}"
        subprocess.Popen(['python', 'Files/Mod/default/sfx_point.py'])
        canvas.itemconfig(ex_txt, text=be_new_1)
        

        if int(new_1)==int(num):
            thesystem.quests.quest_reward(window,dicts,rank,name)
    
    canvas.create_text(
        326.023681640625,
        217.0,
        anchor="nw",
        text=name,
        fill="#FFFFFF",
        font=("Montserrat Regular", 16 * -1)
    )

    image_image_6 = get_quest_img(rank)
    image_6 = canvas.create_image(
        235.023681640625,
        252.0,
        image=image_image_6
    )

    canvas.create_text(
        330.023681640625,
        265.0,
        anchor="nw",
        text=f"{rank}-Rank",
        fill="#FFFFFF",
        font=("Montserrat Regular", 12 * -1)
    )

    image_image_7 = PhotoImage(
        file=get_stuff_path("box.png"))
    image_7 = canvas.create_image(
        448.023681640625,
        308.0,
        image=image_image_7
    )

    canvas.create_text(
        330.023681640625,
        245.0,
        anchor="nw",
        text="Quest Difficulty:",
        fill="#FFFFFF",
        font=("Montserrat SemiBold", 12 * -1)
    )

    canvas.create_text(
        481.023681640625,
        245.0,
        anchor="nw",
        text=f"{skill}:",
        fill="#FFFFFF",
        font=("Montserrat SemiBold", 12 * -1)
    )

    ex_txt=canvas.create_text(
        483.0,
        262.0,
        anchor="nw",
        text=0,
        fill="#FFFFFF",
        font=("Montserrat Regular", 14 * -1)
    )

    canvas.create_text(
        511.0,
        262.0,
        anchor="nw",
        text=f"/{num}",
        fill="#FFFFFF",
        font=("Montserrat Regular", 14 * -1)
    )

    canvas.create_text(
        483.0,
        280.0,
        anchor="nw",
        text=f"{numval}",
        fill="#FFFFFF",
        font=("Montserrat Bold", 14 * -1)
    )

    if time!='-' and timeval!='-':
        canvas.create_text(
            609.0,
            257.0,
            anchor="nw",
            text="Do One for",
            fill="#FFFFFF",
            font=("Montserrat Regular", 14 * -1)
        )

        canvas.create_text(
            609.0,
            270.0,
            anchor="nw",
            text=f"{time} {timeval}",
            fill="#FFFFFF",
            font=("Montserrat Regular", 14 * -1)
        )

    canvas.create_text(
        314.023681640625,
        306.0,
        anchor="nw",
        text=desc1,
        fill="#FFFFFF",
        font=("Montserrat Regular", 10 * -1)
    )

    canvas.create_text(
        314.023681640625,
        318.0,
        anchor="nw",
        text=desc2,
        fill="#FFFFFF",
        font=("Montserrat Regular", 10 * -1)
    )

    # ? ===============================================================================

    name1=name2=name3=name4='-'
    o_name1=o_name2=o_name3=o_name4='-'
    qt1=qt2=qt3=qt4=0
    dicts={}

    try:
        c=0
        reward_key=list(rewards.keys())
        for k in reward_key:
            if c==0:
                if k=="LVLADD":
                    name1="Level Increase"
                    o_name1=k
                    qt1=data[name][0]["Rewards"]["LVLADD"]
                    c+=1
                elif k=="STRav":
                    name1="Addition of STR, AGI, VIT, Available Points"
                    o_name1=k
                    qt1=data[name][0]["Rewards"]["STRav"]
                    c+=1
                elif k=="INTav":
                    name1="Addition of INT, PER, MAN, Available Points"
                    o_name1=k
                    qt1=data[name][0]["Rewards"]["INTav"]
                    c+=1
                else:
                    name1=k
                    o_name1=k
                    qt1=data[name][0]["Rewards"][k]
                    c+=1
                
                dicts[o_name1]=qt1

            elif c==1:
                if k=="LVLADD":
                    name2="Level Increase"
                    o_name2=k
                    qt2=rewards=data[name][0]["Rewards"]["LVLADD"]
                    c+=1
                elif k=="STRav":
                    name2="Addition of STR, AGI, VIT, Available Points"
                    o_name2=k
                    qt2=rewards=data[name][0]["Rewards"]["STRav"]
                    c+=1
                elif k=="INTav":
                    name2="Addition of INT, PER, MAN, Available Points"
                    o_name2=k
                    qt2=rewards=data[name][0]["Rewards"]["INTav"]
                    c+=1
                else:
                    name2=k
                    o_name2=k
                    qt2=data[name][0]["Rewards"][k]
                    c+=1

                dicts[o_name2]=qt2

            elif c==2:
                if k=="LVLADD":
                    name3="Level Increase"
                    o_name3=k
                    qt3=rewards=data[name][0]["Rewards"]["LVLADD"]
                    c+=1
                elif k=="STRav":
                    name3="Addition of STR, AGI, VIT, Available Points"
                    o_name3=k
                    qt3=rewards=data[name][0]["Rewards"]["STRav"]
                    c+=1
                elif k=="INTav":
                    name3="Addition of INT, PER, MAN, Available Points"
                    o_name3=k
                    qt3=rewards=data[name][0]["Rewards"]["INTav"]
                    c+=1
                else:
                    name3=k
                    o_name3=k
                    qt3=data[name][0]["Rewards"][k]
                    c+=1

                dicts[o_name3]=qt3

            elif c==3:
                if k=="LVLADD":
                    name4="Level Increase"
                    o_name4=k
                    qt4=rewards=data[name][0]["Rewards"]["LVLADD"]
                    c+=1
                elif k=="STRav":
                    name4="Addition of STR, AGI, VIT, Available Points"
                    o_name4=k
                    qt4=rewards=data[name][0]["Rewards"]["STRav"]
                    c+=1
                elif k=="INTav":
                    name4="Addition of INT, PER, MAN, Available Points"
                    o_name4=k
                    qt4=rewards=data[name][0]["Rewards"]["INTav"]
                    c+=1
                else:
                    name4=k
                    o_name4=k
                    qt4=data[name][0]["Rewards"][k]
                    c+=1

                dicts[o_name4]=qt4

    except:
        print()

    canvas.create_text(
        190.023681640625,
        332.0,
        anchor="nw",
        text="REWARDS:",
        fill="#10DF4A",
        font=("Montserrat SemiBold", 14 * -1)
    )

    canvas.create_text(
        203.023681640625,
        349.0,
        anchor="nw",
        text=f"-{name1}",
        fill="#FFFFFF",
        font=("Montserrat Light", 12 * -1)
    )

    canvas.create_text(
        203.023681640625,
        365.0,
        anchor="nw",
        text=f"-{name2}",
        fill="#FFFFFF",
        font=("Montserrat Light", 12 * -1)
    )

    canvas.create_text(
        203.023681640625,
        381.0,
        anchor="nw",
        text=f"-{name3}",
        fill="#FFFFFF",
        font=("Montserrat Light", 12 * -1)
    )

    canvas.create_text(
        203.023681640625,
        397.0,
        anchor="nw",
        text=f"-{name4}",
        fill="#FFFFFF",
        font=("Montserrat Light", 12 * -1)
    )

    button_image_1 = PhotoImage(
        file=get_stuff_path("return.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.return_back_to_tab("Quests", window),
        relief="flat"
    )
    button_1.place(
        x=786.023681640625,
        y=61.0,
        width=40.0,
        height=40.0
    )

    if fatigue_true == False:
        button_image_2 = PhotoImage(
            file=get_stuff_path("plus.png"))
        button_2 = Button(
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: up(),
            relief="flat"
        )
        button_2.place(
            x=587.0518798828125,
            y=262.7596435546875,
            width=17.53521156311035,
            height=16.351930618286133
        )

    button_image_3 = PhotoImage(
        file=get_stuff_path("gift.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.set_preview_temp(o_name1,qt1),
        relief="flat"
    )
    button_3.place(
        x=190.023681640625,
        y=351.0,
        width=13.0,
        height=13.0
    )

    button_image_4 = PhotoImage(
        file=get_stuff_path("gift.png"))
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.set_preview_temp(o_name2,qt2),
        relief="flat"
    )
    button_4.place(
        x=190.023681640625,
        y=367.0,
        width=13.0,
        height=13.0
    )

    button_image_5 = PhotoImage(
        file=get_stuff_path("gift.png"))
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.set_preview_temp(o_name3,qt3),
        relief="flat"
    )
    button_5.place(
        x=190.023681640625,
        y=382.0,
        width=13.0,
        height=13.0
    )

    button_image_6 = PhotoImage(
        file=get_stuff_path("gift.png"))
    button_6 = Button(
        image=button_image_6,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.set_preview_temp(o_name4,qt4),
        relief="flat"
    )
    button_6.place(
        x=190.023681640625,
        y=398.0,
        width=13.0,
        height=12.999969482421875
    )

    image_image_8 = PhotoImage(
        file=get_stuff_path("preview.png"))
    image_8 = canvas.create_image(
        137.023681640625,
        480.0,
        image=image_image_8
    )

    button_image_7 = PhotoImage(
        file=get_stuff_path("abandon.png"))
    button_7 = Button(  
        image=button_image_7,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.quests.abandon_quest(name,window),
        relief="flat"
    )
    button_7.place(
        x=609.023681640625,
        y=407.0,
        width=120.0,
        height=16.0
    )

    button_image_8 = PhotoImage(
        file=get_stuff_path("reminder.png"),)
    button_8 = Button(
        image=button_image_8,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: reminder(),
        relief="flat"
    )
    button_8.place(
        x=713.0,
        y=209.0,
        width=20.0,
        height=20.0
    )

elif typeof == "Unknown":
    
    with open("Files/Temp Files/Quest Temp.csv", 'r') as csv_open:
        fr=csv.reader(csv_open)
        for k in fr:
            name=k[0]
            id=int(k[1])
            typeof=k[2]

    desc1=desc2=''
    segments = []
    segment_length = 77

    with open("Files/Player Data/Active_Quests.json", 'r') as fson:
        data=ujson.load(fson)
        for k in data:
            if k==name:
                if data[k][0]["ID"]==id:
                    rank=data[k][0]["rank"]

                    obj=data[k][0]["obj"]

                    desc_full=data[k][0]["desc"]

                    for i in range(0, len(desc_full), segment_length):
                        segments.append(desc_full[i:i+segment_length])

                    if len(segments) >= 1:
                        desc1 = segments[0]
                    if len(segments) >= 2:
                        desc2 = segments[1]

                    rewards=data[k][0]["Rewards"]

    with open("Files/Player Data/Status.json", "r") as f:
        data2=ujson.load(f)
        level=data2["status"][0]["level"]

    canvas.create_text(
        325.023681640625,
        218.0,
        anchor="nw",
        text=name,
        fill="#FFFFFF",
        font=("Montserrat Regular", 16 * -1)
    )

    image_image_6 = get_quest_img(rank)
    image_6 = canvas.create_image(
        235.023681640625,
        252.0,
        image=image_image_6
    )

    canvas.create_text(
        329.023681640625,
        300.0,
        anchor="nw",
        text=obj,
        fill="#FFFFFF",
        font=("Montserrat Regular", 12 * -1)
    )

    image_image_7 = PhotoImage(
        file=get_stuff_path("box.png"))
    image_7 = canvas.create_image(
        447.023681640625,
        309.0,
        image=image_image_7
    )

    canvas.create_text(
        329.023681640625,
        246.0,
        anchor="nw",
        text="Quest Difficulty:",
        fill="#FFFFFF",
        font=("Montserrat SemiBold", 12 * -1)
    )

    canvas.create_text(
        329.023681640625,
        283.0,
        anchor="nw",
        text="Objective:",
        fill="#FFFFFF",
        font=("Montserrat SemiBold", 12 * -1)
    )

    canvas.create_text(
        329.023681640625,
        264.0,
        anchor="nw",
        text=f"{rank}-Rank",
        fill="#FFFFFF",
        font=("Montserrat Regular", 12 * -1)
    )

    canvas.create_text(
        327.023681640625,
        332.0,
        anchor="nw",
        text=desc1,
        fill="#FFFFFF",
        font=("Montserrat Regular", 10 * -1)
    )

    canvas.create_text(
        327.023681640625,
        344.0,
        anchor="nw",
        text=desc2,
        fill="#FFFFFF",
        font=("Montserrat Regular", 10 * -1)
    )

    # ? ===============================================================================

    name1=name2=name3=name4='-'
    qt1=qt2=qt3=qt4=0
    dicts={}

    try:
        c=0
        reward_key=list(rewards.keys())
        for k in reward_key:
            if c==0:
                if k=="LVLADD":
                    name1="Level Increase"
                    o_name1=k
                    qt1=data[name][0]["Rewards"]["LVLADD"]
                    c+=1
                elif k=="STRav":
                    name1="Addition of STR, AGI, VIT, Available Points"
                    o_name1=k
                    qt1=data[name][0]["Rewards"]["STRav"]
                    c+=1
                elif k=="INTav":
                    name1="Addition of INT, PER, MAN, Available Points"
                    o_name1=k
                    qt1=data[name][0]["Rewards"]["INTav"]
                    c+=1
                else:
                    name1=k
                    o_name1=k
                    qt1=data[name][0]["Rewards"][k]
                
                dicts[o_name1]=qt1

            elif c==1:
                if k=="LVLADD":
                    name2="Level Increase"
                    o_name2=k
                    qt2=rewards=data[name][0]["Rewards"]["LVLADD"]
                    c+=1
                elif k=="STRav":
                    name2="Addition of STR, AGI, VIT, Available Points"
                    o_name2=k
                    qt2=rewards=data[name][0]["Rewards"]["STRav"]
                    c+=1
                elif k=="INTav":
                    name2="Addition of INT, PER, MAN, Available Points"
                    o_name2=k
                    qt2=rewards=data[name][0]["Rewards"]["INTav"]
                    c+=1
                else:
                    name2=k
                    o_name2=k
                    qt2=data[name][0]["Rewards"][k]

                dicts[o_name2]=qt2

            elif c==2:
                if k=="LVLADD":
                    name3="Level Increase"
                    o_name3=k
                    qt3=rewards=data[name][0]["Rewards"]["LVLADD"]
                    c+=1
                elif k=="STRav":
                    name3="Addition of STR, AGI, VIT, Available Points"
                    o_name3=k
                    qt3=rewards=data[name][0]["Rewards"]["STRav"]
                    c+=1
                elif k=="INTav":
                    name3="Addition of INT, PER, MAN, Available Points"
                    o_name3=k
                    qt3=rewards=data[name][0]["Rewards"]["INTav"]
                    c+=1
                else:
                    name3=k
                    o_name3=k
                    qt3=data[name][0]["Rewards"][k]

                dicts[o_name3]=qt3

            elif c==3:
                if k=="LVLADD":
                    name4="Level Increase"
                    o_name4=k
                    qt4=rewards=data[name][0]["Rewards"]["LVLADD"]
                    c+=1
                elif k=="STRav":
                    name4="Addition of STR, AGI, VIT, Available Points"
                    o_name4=k
                    qt4=rewards=data[name][0]["Rewards"]["STRav"]
                    c+=1
                elif k=="INTav":
                    name4="Addition of INT, PER, MAN, Available Points"
                    o_name4=k
                    qt4=rewards=data[name][0]["Rewards"]["INTav"]
                    c+=1
                else:
                    name4=k
                    o_name4=k
                    qt4=data[name][0]["Rewards"][k]

                dicts[o_name4]=qt4

    except:
        print()

    canvas.create_text(
        168.023681640625,
        347.0,
        anchor="nw",
        text="REWARDS:",
        fill="#10DF4A",
        font=("Montserrat SemiBold", 14 * -1)
    )

    canvas.create_text(
        181.023681640625,
        364.0,
        anchor="nw",
        text=f"-{name1}",
        fill="#FFFFFF",
        font=("Montserrat Light", 12 * -1)
    )

    canvas.create_text(
        181.023681640625,
        380.0,
        anchor="nw",
        text=f"-{name2}",
        fill="#FFFFFF",
        font=("Montserrat Light", 12 * -1)
    )

    canvas.create_text(
        181.023681640625,
        396.0,
        anchor="nw",
        text=f"-{name3}",
        fill="#FFFFFF",
        font=("Montserrat Light", 12 * -1)
    )

    canvas.create_text(
        181.023681640625,
        412.0,
        anchor="nw",
        text=f"-{name4}",
        fill="#FFFFFF",
        font=("Montserrat Light", 12 * -1)
    )

    button_image_1 = PhotoImage(
        file=get_stuff_path("return.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.return_back_to_tab("Quests",window),
        relief="flat"
    )
    button_1.place(
        x=785.023681640625,
        y=62.0,
        width=40.0,
        height=40.0
    )

    if level>=100:

        button_image_7 = PhotoImage(
            file=get_stuff_path("complete.png"))
        button_7 = Button(
            image=button_image_7,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: thesystem.quests.quest_reward(window,dicts,rank,name,special=True),
            relief="flat"
        )
        button_7.place(
            x=587.023681640625,
            y=398.0,
            width=120.0,
            height=16.0
        )

    button_image_2 = PhotoImage(
        file=get_stuff_path("gift.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.set_preview_temp(o_name1,qt1),
        relief="flat"
    )
    button_2.place(
        x=168.023681640625,
        y=366.0,
        width=13.0,
        height=13.0
    )

    button_image_3 = PhotoImage(
        file=get_stuff_path("gift.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.set_preview_temp(o_name2,qt2),
        relief="flat"
    )
    button_3.place(
        x=168.023681640625,
        y=382.0,
        width=13.0,
        height=13.0
    )

    button_image_4 = PhotoImage(
        file=get_stuff_path("gift.png"))
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.set_preview_temp(o_name3,qt3),
        relief="flat"
    )
    button_4.place(
        x=168.023681640625,
        y=397.0,
        width=13.0,
        height=13.0
    )

    button_image_5 = PhotoImage(
        file=get_stuff_path("gift.png"))
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.set_preview_temp(o_name4,qt4),
        relief="flat"
    )
    button_5.place(
        x=168.023681640625,
        y=413.0,
        width=13.0,
        height=12.999969482421875
    )

    image_image_8 = PhotoImage(
        file=get_stuff_path("image_8.png"))
    image_8 = canvas.create_image(
        136.023681640625,
        481.0,
        image=image_image_8
    )

side = PhotoImage(file=get_stuff_path("blue.png"))
if job.upper()!="NONE":
    side = PhotoImage(file=get_stuff_path("purple.png"))
canvas.create_image(35.0, 270.0, image=side)
canvas.create_image(890.0, 294.0, image=side)

canvas.create_rectangle(
    0.0,
    0.0,
    240.0,
    24.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    513.0,
    925.0,
    555.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    957.0,
    36.0,
    fill=transp_clr,
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (60, 490))
canvas.create_image(50.0, 270.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (60, 490))
canvas.create_image(870.0, 275.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    478.0,
    21.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    480.0,
    530.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

# Start the animation
if setting_data["Settings"]["Performernce (ANIME):"] != "True":
    update_images()

window.resizable(False, False)
window.mainloop()

