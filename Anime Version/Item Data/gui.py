# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess
import csv
import ujson
import cv2
from PIL import Image, ImageTk
import threading
import sys
import os
import numpy as np
import random

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.equipmentbk
import thesystem.misc
import thesystem.system
import thesystem.equipmentbk as equipment
import thesystem.inventory
import thesystem.itemequip


window = Tk()

stop_event=threading.Event()

initial_height = 0
target_height = 555
window_width = 957

window.geometry(f"{window_width}x{initial_height}")
job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window,transp_clr)

with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

# Preload top and bottom images
top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (957, 43), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (1026, 47), job, type_="bottom")

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

debuff_1_name=''
debuff_2_name=''
debuff_1='-'
debuff_2='-'

buff_1_name=''
buff_2_name=''
buff_1='-'
buff_2='-'

desc1=desc2=''
segments = []
segment_length = 77

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(win):
    if setting_data["Settings"]["Performernce (ANIME):"] != "True":
        stop_event.set()
        update_thread.join()
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    subprocess.Popen(['python', 'Anime Version/Inventory/gui.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=20, delay=1)

typs='Item'

with open('Files/Temp Files/Inventory temp.csv', 'r') as fout:
    fr=csv.reader(fout)
    for k in fr:
        name=k[0]   
        try:
            qty=k[1]
            typs=k[2]
        except:
            typs='Item'

with open('Files/Player Data/Equipment.json', 'r') as eq_fout:
    eq_data=ujson.load(eq_fout)

equiipment_check = equipment.find_item_slot(name, eq_data)
equiipment_check_bool=equiipment_check[1]

if typs=='Item':
    with open("Files/Player Data/Inventory.json", 'r') as fson:
        data=ujson.load(fson)
        dat_keys=list(data.keys())

elif typs=='Preview':
    with open("Files/Data/Inventory_List.json", 'r') as fson:
        data=ujson.load(fson)
        dat_keys=list(data.keys())

item_full_data={}

rank=data[name][0]["rank"]
cat=data[name][0]["cat"]
n_cat=cat
if cat.upper()=="FIRST GAUNTLET" or cat.upper()=="SECOND GAUNTLET":
    n_cat="GAUNTLET"

if typs!='item':
    qty=data[name][0]["qty"]
desc_full=data[name][0]["desc"]

for i in range(0, len(desc_full), segment_length):
    segments.append(desc_full[i:i+segment_length])

if len(segments) >= 1:
    desc1 = segments[0]
if len(segments) >= 2:
    desc2 = segments[1]
val=data[name][0]['Value']

item_full_data[name]=data[name]

buff = data[name][0].get("buff", {})
buff_1_name, buff_1, buff_2_name, buff_2 = thesystem.equipmentbk.process_attributes(buff, "buff")

# Debuff processing
debuff = data[name][0].get("debuff", {})
debuff_1_name, debuff_1, debuff_2_name, debuff_2 = thesystem.equipmentbk.process_attributes(debuff, "debuff")

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    get_stuff_path_str=pres_file_data["Anime"]["Mid Size Screen"]

def get_stuff_path(key):
    full_path=get_stuff_path_str+'/'+key
    return full_path

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 555,
    width = 957,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=get_stuff_path("image_1.png"))
image_1 = canvas.create_image(
    478.0,
    277.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Anime"][video]
    prealoaded_frames=np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, prealoaded_frames, 478.0, 277.0, pause_duration=0.4)

image_image_2 = PhotoImage(
    file=get_stuff_path("frame.png"))
image_2 = canvas.create_image(
    482.976318359375,
    283.0,
    image=image_image_2
)

canvas.create_rectangle(
    346.0,
    111.0,
    758.0,
    147.0,
    fill="#303030",
    outline="")

canvas.create_text(
    347.0,
    112.0,
    anchor="nw",
    text="Item:",
    fill="#FFFFFF",
    font=("Montserrat Regular", 24 * -1)
)

canvas.create_text(
    407.0,
    112.0,
    anchor="nw",
    text=name,
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 24 * -1)
)

canvas.create_text(
    346.0,
    175.0,
    anchor="nw",
    text="Acquisition Difficulty:",
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    204.0,
    411.0,
    anchor="nw",
    text=desc2,
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    204.0,
    391.0,
    anchor="nw",
    text=desc1+'-',
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    346.0,
    196.0,
    anchor="nw",
    text=f"{rank}",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    355.0,
    196.0,
    anchor="nw",
    text="-rank",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    287.0,
    272.0,
    anchor="nw",
    text="-BUFF: ",
    fill="#4CFF73",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    347.0,
    272.0,
    anchor="nw",
    text=f"-{buff_1_name} {buff_1}",
    fill="#FFFFFF",
    font=("Montserrat Light", 15 * -1)
)

canvas.create_text(
    347.0,
    294.0,
    anchor="nw",
    text=f"-{buff_2_name} {buff_2}",
    fill="#FFFFFF",
    font=("Montserrat Light", 15 * -1)
)

canvas.create_text(
    287.0,
    333.0,
    anchor="nw",
    text="-DEBUFF: ",
    fill="#FF4C4C",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    367.0,
    333.0,
    anchor="nw",
    text=f"-{debuff_1_name} {debuff_1}",
    fill="#FFFFFF",
    font=("Montserrat Light", 15 * -1)
)

canvas.create_text(
    367.0,
    353.0,
    anchor="nw",
    text=f"-{debuff_2_name} {debuff_2}",
    fill="#FFFFFF",
    font=("Montserrat Light", 15 * -1)
)

canvas.create_text(
    528.0,
    196.0,
    anchor="nw",
    text=n_cat,
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    528.0,
    175.0,
    anchor="nw",
    text="Category:",
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    637.0,
    198.0,
    anchor="nw",
    text=f"{val:,}",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    637.0,
    177.0,
    anchor="nw",
    text="Value:",
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    740.0,
    198.0,
    anchor="nw",
    text=qty,
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    740.0,
    177.0,
    anchor="nw",
    text="Qty",
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_rectangle(
    149.0,
    99.0,
    279.0,
    229.0,
    fill="#2E2E2E",
    outline="")

max_width, max_height = 164.615385, 126.153846

image_image_3 = thesystem.inventory.get_item_button_image(name, max_width, max_height)
image_3 = canvas.create_image(
    214.0,
    164.0,
    image=image_image_3
)

if typs=='Item':

    button_image_1 = PhotoImage(
        file=get_stuff_path("sell.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (equipment.finish(qty=qty, equipment_check=equiipment_check),thesystem.inventory.selling_item(name,window,val)),
        relief="flat"
    )
    button_1.place(
        x=622.0,
        y=445.0,
        width=135.0,
        height=25.0
    )

    if equiipment_check_bool:
        canvas.create_text(
            500.0,
            480.0,
            anchor="nw",
            text="Already Equipped!",
            fill="#FFD337",
            font=("Exo Bold", 13 * -1)
        )

    button_image_2 = PhotoImage(
        file=get_stuff_path("equip.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: equip_with_srank_levelup(),
        relief="flat"
    )
    button_2.place(
        x=774.0,
        y=445.0,
        width=76.0,
        height=25.0
    )

    def equip_with_srank_levelup():
        if rank == 'S' and random.random() < 0.10:
            # Level up logic
            with open("Files/Player Data/Status.json", 'r') as status_file:
                status_data = ujson.load(status_file)
            status_data["status"][0]["level"] += 1
            with open("Files/Player Data/Status.json", 'w') as status_file:
                ujson.dump(status_data, status_file, indent=4)
            # Show message
            canvas.create_text(
                480.0, 400.0,
                anchor="center",
                text="S-rank bonus! Level Up!",
                fill="#FFD700",
                font=("Montserrat Bold", 18 * -1)
            )
            window.after(1200, lambda: thesystem.itemequip.equip_item(cat, item_full_data, window))
        else:
            thesystem.itemequip.equip_item(cat, item_full_data, window)

    button_image_3 = PhotoImage(
        file=get_stuff_path("return.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: ex_close(window),
        relief="flat"
    )
    button_3.place(
        x=819.0,
        y=64.0,
        width=40.0,
        height=40.0
    )

else:
    button_image_3 = PhotoImage(
        file=get_stuff_path("return.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: ex_close(window),
        relief="flat"
    )
    button_3.place(
        x=819.0,
        y=64.0,
        width=40.0,
        height=40.0
    )


side = PhotoImage(file=get_stuff_path("blue.png"))
if job.upper()!="NONE":
    side = PhotoImage(file=get_stuff_path("purple.png"))

canvas.create_image(35.0, 270.0, image=side)
canvas.create_image(925.0, 294.0, image=side)

canvas.create_rectangle(
    0.0,
    0.0,
    240.0,
    24.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    513.0,
    925.0,
    555.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    957.0,
    36.0,
    fill=transp_clr,
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (60, 490))
canvas.create_image(50.0, 270.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (60, 490))
canvas.create_image(900.0, 275.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    478.0,
    21.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    480.0,
    530.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

# Start the animation
if setting_data["Settings"]["Performernce (ANIME):"] != "True":
    update_thread = threading.Thread(target=update_images)
    update_thread.start()

window.resizable(False, False)
window.mainloop()
