
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess
import csv
import json
import cv2
from PIL import Image, ImageTk
import threading
import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.equipmentbk as equipment

window = Tk()

initial_height = 0
target_height = 555
window_width = 957

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.make_window_transparent(window)
thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

top_images = [f"thesystem/top_bar/dailyquest.py{str(i).zfill(4)}.png" for i in range(1, 501)]
bottom_images = [f"thesystem/bottom_bar/{str(i).zfill(4)}.png" for i in range(1, 501)]

# Preload top and bottom images
top_preloaded_images = thesystem.system.preload_images(top_images, (957, 43))
bottom_preloaded_images = thesystem.system.preload_images(bottom_images, (1026, 47))

subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])

debuff_1_name=''
debuff_2_name=''
debuff_1='-'
debuff_2='-'

buff_1_name=''
buff_2_name=''
buff_1='-'
buff_2='-'

desc1=desc2=''
segments = []
segment_length = 77

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(win):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    subprocess.Popen(['python', 'Anime Version\Inventory\gui.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=20, delay=1)

typs='Item'

with open('Files/Temp Files/Inventory temp.csv', 'r') as fout:
    fr=csv.reader(fout)
    for k in fr:
        name=k[0]   
        try:
            qty=k[1]
            typs=k[2]
        except:
            typs='Item'

with open('Files/Equipment.json', 'r') as eq_fout:
    eq_data=json.load(eq_fout)

def find_item_slot(name, equipment):
    for slot, items in equipment.items():
        if name in items:
            return [slot, True]
    return ["Item not found in any slot", False]

equiipment_check = find_item_slot(name, eq_data)
equiipment_check_bool=equiipment_check[1]

if typs=='Item':
    with open("Files/Inventory.json", 'r') as fson:
        data=json.load(fson)
        dat_keys=list(data.keys())

elif typs=='Preview':
    with open("Files/Data/Inventory_List.json", 'r') as fson:
        data=json.load(fson)
        dat_keys=list(data.keys())

item_full_data={}

rank=data[name][0]["rank"]
cat=data[name][0]["cat"]
n_cat=cat
if cat.upper()=="FIRST GAUNTLET" or cat.upper()=="SECOND GAUNTLET":
    n_cat="GAUNTLET"

if typs!='item':
    qty=data[name][0]["qty"]
desc_full=data[name][0]["desc"]

for i in range(0, len(desc_full), segment_length):
    segments.append(desc_full[i:i+segment_length])

if len(segments) >= 1:
    desc1 = segments[0]
if len(segments) >= 2:
    desc2 = segments[1]
val=data[name][0]['Value']

item_full_data[name]=data[name]

if type(data[name][0]["buff"]) is dict:
    try:
        buff_main=data[name][0]["buff"]
        rol=list(buff_main.keys())

        if rol[0]=="AGIbuff":
            buff_1_name="AGI"
        elif rol[0]=="STRbuff":
            buff_1_name="STR"
        elif rol[0]=="VITbuff":
            buff_1_name="VIT"
        elif rol[0]=="INTbuff":
            buff_1_name="INT"
        elif rol[0]=="PERbuff":
            buff_1_name="PER"
        elif rol[0]=="MANbuff":
            buff_1_name="MAN"

        buff_1="+"+str(data[name][0]["buff"][rol[0]])

        if rol[1]=="AGIbuff":
            buff_2_name="AGI"
        elif rol[1]=="STRbuff":
            buff_2_name="STR"
        elif rol[1]=="VITbuff":
            buff_2_name="VIT"
        elif rol[1]=="INTbuff":
            buff_2_name="INT"
        elif rol[1]=="PERbuff":
            buff_2_name="PER"
        elif rol[1]=="MANbuff":
            buff_2_name="MAN"

        buff_2="+"+str(data[name][0]["buff"][rol[1]])
    except:
        buff_2_name=''
        buff_2='-'
else:
    buff_1_name=''
    buff_2_name=''
    buff_1='-'
    buff_2='-'

if type(data[name][0]["debuff"]) is dict:
    try:
        debuff_main=data[name][0]["debuff"]
        rol_2=list(debuff_main.keys())

        if rol_2[0]=="AGIdebuff" or rol_2[0]=="AGIbuff":
            debuff_1_name="AGI"
        elif rol_2[0]=="STRdebuff" or rol_2[0]=="STRbuff":
            debuff_1_name="STR"
        elif rol_2[0]=="VITdebuff" or rol_2[0]=="VITbuff":
            debuff_1_name="VIT"
        elif rol_2[0]=="INTdebuff" or rol_2[0]=="INTbuff":
            debuff_1_name="INT"
        elif rol_2[0]=="PERdebuff" or rol_2[0]=="PERbuff":
            debuff_1_name="PER"
        elif rol_2[0]=="MANdebuff" or rol_2[0]=="MANbuff":
            debuff_1_name="MAN"

        debuff_1="-"+str(data[name][0]["debuff"][rol_2[0]])

        if rol_2[1]=="AGIdebuff" or rol_2[1]=="AGIbuff":
            debuff_2_name="AGI"
        elif rol_2[1]=="STRdebuff" or rol_2[1]=="STRbuff":
            debuff_2_name="STR"
        elif rol_2[1]=="VITdebuff" or rol_2[1]=="VITbuff":
            debuff_2_name="VIT"
        elif rol_2[1]=="INTdebuff" or rol_2[1]=="INTbuff":
            debuff_2_name="INT"
        elif rol_2[1]=="PERdebuff" or rol_2[1]=="PERbuff":
            debuff_2_name="PER"
        elif rol_2[1]=="MANdebuff" or rol_2[1]=="MANbuff":
            debuff_2_name="MAN"

        debuff_2="-"+str(data[name][0]["debuff"][rol_2[1]])
    except:
        debuff_2_name=''
        debuff_2='-'
else:
    debuff_1_name=''
    debuff_2_name=''
    debuff_1='-'
    debuff_2='-'

with open("Files\Mod\presets.json", 'r') as pres_file:
    pres_file_data=json.load(pres_file)
    get_stuff_path_str=pres_file_data["Anime"]["Mid Size Screen"]

def get_stuff_path(key):
    full_path=get_stuff_path_str+'/'+key
    return full_path

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 555,
    width = 957,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=get_stuff_path("image_1.png"))
image_1 = canvas.create_image(
    478.0,
    277.0,
    image=image_image_1
)

with open("Files\Mod\presets.json", 'r') as pres_file:
    pres_file_data=json.load(pres_file)
    video_path=pres_file_data["Anime"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 478.0, 277.0)

image_image_2 = PhotoImage(
    file=get_stuff_path("frame.png"))
image_2 = canvas.create_image(
    482.976318359375,
    283.0,
    image=image_image_2
)

canvas.create_rectangle(
    346.0,
    111.0,
    758.0,
    147.0,
    fill="#303030",
    outline="")

canvas.create_text(
    347.0,
    112.0,
    anchor="nw",
    text="Item:",
    fill="#FFFFFF",
    font=("Montserrat Regular", 24 * -1)
)

canvas.create_text(
    407.0,
    112.0,
    anchor="nw",
    text=name,
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 24 * -1)
)

canvas.create_text(
    346.0,
    175.0,
    anchor="nw",
    text="Acquisition Difficulty:",
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    204.0,
    411.0,
    anchor="nw",
    text=desc2,
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    204.0,
    391.0,
    anchor="nw",
    text=desc1+'-',
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    346.0,
    196.0,
    anchor="nw",
    text=f"{rank}",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    355.0,
    196.0,
    anchor="nw",
    text="-rank",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    287.0,
    272.0,
    anchor="nw",
    text="-BUFF: ",
    fill="#4CFF73",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    347.0,
    272.0,
    anchor="nw",
    text=f"-{buff_1_name} {buff_1}",
    fill="#FFFFFF",
    font=("Montserrat Light", 15 * -1)
)

canvas.create_text(
    347.0,
    294.0,
    anchor="nw",
    text=f"-{buff_2_name} {buff_2}",
    fill="#FFFFFF",
    font=("Montserrat Light", 15 * -1)
)

canvas.create_text(
    287.0,
    333.0,
    anchor="nw",
    text="-DEBUFF: ",
    fill="#FF4C4C",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    367.0,
    333.0,
    anchor="nw",
    text=f"-{debuff_1_name} {debuff_1}",
    fill="#FFFFFF",
    font=("Montserrat Light", 15 * -1)
)

canvas.create_text(
    367.0,
    353.0,
    anchor="nw",
    text=f"-{debuff_2_name} {debuff_2}",
    fill="#FFFFFF",
    font=("Montserrat Light", 15 * -1)
)

canvas.create_text(
    528.0,
    196.0,
    anchor="nw",
    text=n_cat,
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    528.0,
    175.0,
    anchor="nw",
    text="Category:",
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    637.0,
    198.0,
    anchor="nw",
    text=f"{val:,}",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    637.0,
    177.0,
    anchor="nw",
    text="Value:",
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    740.0,
    198.0,
    anchor="nw",
    text=qty,
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    740.0,
    177.0,
    anchor="nw",
    text="Qty",
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_rectangle(
    149.0,
    99.0,
    279.0,
    229.0,
    fill="#2E2E2E",
    outline="")

max_width, max_height = 164.615385, 126.153846

image_image_3 = thesystem.system.get_item_button_image(name, max_width, max_height)
image_3 = canvas.create_image(
    214.0,
    164.0,
    image=image_image_3
)

if typs=='Item':

    button_image_1 = PhotoImage(
        file=get_stuff_path("sell.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (equipment.finish(qty=qty, equiipment_check=equiipment_check),thesystem.system.selling_item(name,window,val)),
        relief="flat"
    )
    button_1.place(
        x=622.0,
        y=445.0,
        width=135.0,
        height=25.0
    )

    if equiipment_check_bool:
        canvas.create_text(
            500.0,
            480.0,
            anchor="nw",
            text="Already Equipped!",
            fill="#FFD337",
            font=("Exo Bold", 13 * -1)
        )

    button_image_2 = PhotoImage(
        file=get_stuff_path("equip.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.equip_item(cat,item_full_data,window),
        relief="flat"
    )
    button_2.place(
        x=774.0,
        y=445.0,
        width=76.0,
        height=25.0
    )

    button_image_3 = PhotoImage(
        file=get_stuff_path("return.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: ex_close(window),
        relief="flat"
    )
    button_3.place(
        x=819.0,
        y=64.0,
        width=40.0,
        height=40.0
    )

else:
    button_image_3 = PhotoImage(
        file=get_stuff_path("return.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: ex_close(window),
        relief="flat"
    )
    button_3.place(
        x=819.0,
        y=64.0,
        width=40.0,
        height=40.0
    )

side = PhotoImage(file=get_stuff_path("blue.png"))
canvas.create_image(35.0, 270.0, image=side)
canvas.create_image(925.0, 294.0, image=side)

canvas.create_rectangle(
    0.0,
    0.0,
    240.0,
    24.0,
    fill="#0c679b",
    outline="")

canvas.create_rectangle(
    0.0,
    513.0,
    925.0,
    555.0,
    fill="#0c679b",
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    957.0,
    36.0,
    fill="#0c679b",
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (60, 490))
canvas.create_image(50.0, 270.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (60, 490))
canvas.create_image(900.0, 275.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    478.0,
    21.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    480.0,
    530.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    # Update top image
    image_index = (image_index + 1) % len(top_preloaded_images)
    canvas.itemconfig(top_image, image=top_preloaded_images[image_index])

    # Update bottom image
    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    canvas.itemconfig(bottom_image, image=bottom_preloaded_images[bot_image_index])

    # Schedule next update (24 FPS)
    window.after(1000 // 24, update_images)

# Start the animation
update_images()

window.resizable(False, False)
window.mainloop()
