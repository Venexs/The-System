
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess
import ujson
import threading
import csv
import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.penalty

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    get_stuff_path_str=pres_file_data["Anime"]["Message Box"]

def get_stuff_path(key):
    full_path=get_stuff_path_str+'/'+key
    return full_path

window = Tk()

stop_event=threading.Event()

initial_height = 0
target_height = 144
window_width = 715

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window,transp_clr)

with open("Files/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

if setting_data["Settings"]["Performernce (ANIME):"] == "True":
    top_images = [f"thesystem/{all_prev}top_bar/{top_val}{str(2).zfill(4)}.png"]
    bottom_images = [f"thesystem/{all_prev}bottom_bar/{str(2).zfill(4)}.png"]

else:
    top_images = [f"thesystem/{all_prev}top_bar/{top_val}{str(i).zfill(4)}.png" for i in range(2, 501, 4)]
    bottom_images = [f"thesystem/{all_prev}bottom_bar/{str(i).zfill(4)}.png" for i in range(2, 501, 4)]

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)
subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])
thesystem.system.center_window(window,window_width,target_height)

# Preload top and bottom images
top_preloaded_images = thesystem.system.preload_images(top_images, (715, 41))
bottom_preloaded_images = thesystem.system.preload_images(bottom_images, (715, 41))

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])    

def ex_close(window,):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=20, delay=1)


window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(eve=''):
    if setting_data["Settings"]["Performernce (ANIME):"] != "True":
        stop_event.set()
        update_thread.join()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=30, delay=1)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 144,
    width = 715,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    448.0,
    277.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Anime"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 430.0, 263.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    369.0,
    78.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    366.0,
    47.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    348.0,
    67.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    384.0,
    67.0,
    image=image_image_5
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    677.0,
    71.0,
    image=image_image_8
)

side = PhotoImage(file=get_stuff_path("blue.png"))
if job.upper()!="NONE":
    side = PhotoImage(file=get_stuff_path("purple.png"))
canvas.create_image(677.0, 71.0, image=side)
canvas.create_image(47.0, 72.0, image=side)

canvas.create_rectangle(
    0.0,
    0.0,
    760.0,
    30.0,
    fill=transp_clr,    
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    162.0,
    16.0,
    fill=transp_clr,    
    outline="")

canvas.create_rectangle(
    0.0,
    123.0,
    715.0,
    144.0,
    fill=transp_clr,    
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (30, 100))
canvas.create_image(82.0, 76.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (30, 114))
canvas.create_image(640.0, 75.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    357.0,
    20.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    370.0,
    128.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    # Update top image
    image_index = (image_index + 1) % len(top_preloaded_images)
    canvas.itemconfig(top_image, image=top_preloaded_images[image_index])

    # Update bottom image
    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    canvas.itemconfig(bottom_image, image=bottom_preloaded_images[bot_image_index])

    # Schedule next update (24 FPS)
    window.after(1000 // 24, update_images)

# Start the animation
if setting_data["Settings"]["Performernce (ANIME):"] != "True":
    update_thread = threading.Thread(target=update_images)
    update_thread.start()

entry_1 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=333.0,
    y=79.0,
    width=30.0,
    height=31.0
)

entry_2 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=369.0,
    y=79.0,
    width=30.0,
    height=31.0
)

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    612.0,
    99.0,
    image=image_image_11
)

canvas.tag_bind(image_11, "<ButtonPress-1>", lambda event: thesystem.penalty.complete(entry_1, entry_2, window))

window.resizable(False, False)
window.mainloop()
