
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess
from PIL import Image, ImageDraw, ImageTk
import json
import threading
import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

initial_height = 0
target_height = 144
window_width = 715

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.make_window_transparent(window)
thesystem.system.center_window(window,window_width,target_height)
subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])

window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 144,
    width = 715,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

def fade_out(window, alpha):
    if alpha > 0:
        window.attributes('-alpha', alpha)
        alpha -= 0.05
        window.after(1, fade_out, window, alpha)
    else:
        window.attributes('-alpha', 0)

def move_rectangle_up(rectangle_id, final_y, step_y, delay):
    current_coords = canvas.coords(rectangle_id)
    current_y1 = current_coords[1]
    current_y2 = current_coords[3]

    if current_y1 > final_y:
        new_y1 = current_y1 - step_y
        new_y2 = current_y2 - step_y
        canvas.coords(rectangle_id, 0.0, new_y1, 715.0, new_y2)
        window.after(delay, move_rectangle_up, rectangle_id, final_y, step_y, delay)

def move_rectangle_down(rectangle_id, final_y, step_y, delay):
    current_coords = canvas.coords(rectangle_id)
    current_y1 = current_coords[1]
    current_y2 = current_coords[3]

    if current_y1 < final_y:
        new_y1 = current_y1 + step_y
        new_y2 = current_y2 + step_y
        canvas.coords(rectangle_id, 0.0, new_y1, 715.0, new_y2)
        window.after(delay, move_rectangle_down, rectangle_id, final_y, step_y, delay)

def move_image_up(image_id, canvas, step=1, delay=10, val=24):
    coords = canvas.coords(image_id)
    new_y = coords[1] - step

    if new_y >= val:
        canvas.coords(image_id, coords[0], new_y)
        canvas.after(delay, move_image_up, image_id, canvas, step, delay)

def move_image_down(image_id, canvas, step=1, delay=10, val=130):
    coords = canvas.coords(image_id)
    new_y = coords[1] + step

    if new_y <= val:
        canvas.coords(image_id, coords[0], new_y)
        canvas.after(delay, move_image_down, image_id, canvas, step, delay)

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(eve):
    threading.Thread(target=fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files\Mod\default\sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=5, delay=1)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    430.0,
    163.0,
    image=image_image_1
)

with open("Files\Mod\presets.json", 'r') as pres_file:
    pres_file_data=json.load(pres_file)
    video_path=pres_file_data["Anime"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 430.0, 263.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    363.0,
    77.0,
    image=image_image_2
)

glow_color = "#FFFFFF"
glow_width = 5
text_color="#FFFFFF",
font=("Montserrat", 40 * -1)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    596.0,
    53.0,
    image=image_image_3
)

canvas.tag_bind(image_3, "<ButtonPress-1>", ex_close)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    47.0,
    72.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    677.0,
    71.0,
    image=image_image_5
)

canvas.create_rectangle(
    158.0,
    0.0,
    732.0,
    30.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    162.0,
    16.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    0.0,
    123.0,
    715.0,
    144.0,
    fill="#0C679B",
    outline="")

rectangle1_id=canvas.create_rectangle(
    0.0,
    73.0,
    715.0,
    144.0,
    fill="#0C679B",
    outline="")

rectangle2_id=canvas.create_rectangle(
    0.0,
    0.0,
    715.0,
    73.0,
    fill="#0C679B",
    outline="")


image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    357.0,
    50.0,
    image=image_image_6
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    357.0,
    100.0,
    image=image_image_7
)

canvas.tag_bind(image_6, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_6, "<B1-Motion>", move_window)

step,delay=1,1

def start_animations():
    threading.Thread(target=move_image_up, args=(image_6, canvas, step, 1)).start()
    threading.Thread(target=move_image_down, args=(image_7, canvas, step, 1)).start()
    threading.Thread(target=move_rectangle_down, args=(rectangle1_id, 300, 2, delay)).start()
    threading.Thread(target=move_rectangle_up, args=(rectangle2_id, -177, 2, delay)).start()

window.after(1, start_animations)

window.resizable(False, False)
window.mainloop()
