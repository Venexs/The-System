
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import json
import csv
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / "assets/frame0"
EQUIPMENT_TEMP_FILE = 'Files/Temp Files/Equipment Temp.csv'
INVENTORY_FILE = 'Files/Inventory.json'
EQUIPMENT_FILE = 'Files/Equipment.json'
STATUS_FILE = 'Files/status.json'
PRESETS_FILE = "Files/Mod/presets.json"

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(win):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=20, delay=1)


subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])

window = Tk()

initial_height = 0
target_height = 373
window_width = 553

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.make_window_transparent(window)
thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 373,
    width = 555,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)


# ! ======================================================================
# ! FILE RETRIEVAL
# ! ======================================================================


name1=name2=name3=name4=name5='-'
rank1=rank2=rank3=rank4=rank5='X'
dat1=dat2=dat3=dat4=dat5={}

with open('Files/Temp Files/Equipment Temp.csv', 'r') as fop:
    fr=csv.reader(fop)
    for k in fr:
        cat=k[0]
        try:
            typ=k[1]
        except:
            print()
        equipment_temp=k
        break
    
with open('Files/Inventory.json', 'r') as fout:
    data=json.load(fout)
    rol=list(data.keys())
c = 0
for k in rol:
    if data[k][0]["cat"] == cat:  # Check if the category matches
        if c == 0:
            name1, rank1 = k, data[k][0]["rank"]
            dat1 = {k: data[k]}  # Store only the current item with its name as the key
        elif c == 1:
            name2, rank2 = k, data[k][0]["rank"]
            dat2 = {k: data[k]}
        elif c == 2:
            name3, rank3 = k, data[k][0]["rank"]
            dat3 = {k: data[k]}
        elif c == 3:
            name4, rank4 = k, data[k][0]["rank"]
            dat4 = {k: data[k]}
        elif c == 4:
            name5, rank5 = k, data[k][0]["rank"]
            dat5 = {k: data[k]}
        c += 1


# ! ======================================================================
# ! FILE INJECTION
# ! ======================================================================

def opens(val, name):
    def load_json(file_path):
        with open(file_path, 'r') as file:
            return json.load(file)

    def save_json(file_path, data):
        with open(file_path, 'w') as file:
            json.dump(data, file, indent=6)

    def resolve_buff_name(buff_key):
        buff_map = {
            "AGIbuff": "AGI",
            "STRbuff": "STR",
            "VITbuff": "VIT",
            "INTbuff": "INT",
            "PERbuff": "PER",
            "MANbuff": "MAN",
            "AGIdebuff": "AGI",
            "STRdebuff": "STR",
            "VITdebuff": "VIT",
            "INTdebuff": "INT",
            "PERdebuff": "PER",
            "MANdebuff": "MAN",
        }
        return buff_map.get(buff_key, None)

    def process_item_buffs(item_data, status_data, sign=1):
        buffs = (item_data).get("buff", {})
        debuffs = (item_data).get("debuff", {})
        try:
            for key, value in buffs.items():
                buff_name = resolve_buff_name(key)
                if buff_name:
                    status_data["equipment"][0][buff_name] += sign * value
        except:
                print()
        try:
            for key, value in debuffs.items():
                debuff_name = resolve_buff_name(key)
                if debuff_name:
                    status_data["equipment"][0][debuff_name] -= sign * value
        except:
            print()

    # Load equipment and status files
    equipment_data = load_json('Files/Equipment.json')
    status_data = load_json('Files/status.json')

    # Process the currently equipped item if it exists
    if equipment_data.get(cat):
        current_item_name = list(equipment_data[cat].keys())[0]
        current_item_data = equipment_data[cat][current_item_name]
        process_item_buffs(current_item_data[0], status_data, sign=-1)  # Remove current item buffs

    # Save updated status data after removing old buffs
    save_json('Files/status.json', status_data) 

    # Update equipment data with the new item
    if name != '-':
        new_item_data_map = {1: dat1, 2: dat2, 3: dat3, 4: dat4, 5: dat5}
        equipment_data[cat] = (new_item_data_map[val])
        save_json('Files/Equipment.json', equipment_data)


        # Process the new item's buffs
        new_item_name = list(equipment_data[cat].keys())[0]
        new_item_data = equipment_data[cat][new_item_name][0]
        process_item_buffs(new_item_data, status_data, sign=1)  # Add new item buffs

        # Save updated status data after applying new buffs
        save_json('Files/status.json', status_data)

    # Launch the GUI and close the current window
    subprocess.Popen(['python', 'Anime Version/Equipment/gui.py'])
    window.quit()


with open("Files\Mod\presets.json", 'r') as pres_file:
    pres_file_data=json.load(pres_file)
    normal_font_col=pres_file_data["Anime"]["Normal Font Color"]
    video_path=pres_file_data["Anime"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 277.0, 300.0)

# Utility Functions
def relative_to_assets(path: str) -> Path:
    """Returns the relative path to assets."""
    return ASSETS_PATH / path

def load_json(file_path):
    """Loads JSON data from a file."""
    try:
        with open(file_path, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        print(f"Error: {file_path} not found.")
        return {}

def save_json(file_path, data):
    """Saves JSON data to a file."""
    try:
        with open(file_path, 'w') as file:
            json.dump(data, file, indent=6)
    except Exception as e:
        print(f"Error saving to {file_path}: {e}")

def resolve_buff_name(buff_key):
    """Maps buff/debuff keys to corresponding attribute names."""
    buff_map = {
        "AGIbuff": "AGI", "STRbuff": "STR", "VITbuff": "VIT",
        "INTbuff": "INT", "PERbuff": "PER", "MANbuff": "MAN",
        "AGIdebuff": "AGI", "STRdebuff": "STR", "VITdebuff": "VIT",
        "INTdebuff": "INT", "PERdebuff": "PER", "MANdebuff": "MAN",
    }
    return buff_map.get(buff_key)

def process_item_buffs(item_data, status_data, sign=1):
    """Applies or removes buffs/debuffs to/from the status data."""
    for buff_type in ("buff", "debuff"):
        items = item_data.get(buff_type, {})
        for key, value in items.items():
            attribute = resolve_buff_name(key)
            if attribute:
                status_data["equipment"][0][attribute] += sign * value

# Command to open and handle equipment selection
def handle_selection(val, name):
    equipment_data = load_json(EQUIPMENT_FILE)
    status_data = load_json(STATUS_FILE)

    if equipment_data.get(cat):
        current_item = list(equipment_data[cat].keys())[0]
        process_item_buffs(equipment_data[cat][current_item][0], status_data, sign=-1)

    if name != '-':
        new_item_data = {1: dat1, 2: dat2, 3: dat3, 4: dat4, 5: dat5}.get(val)
        equipment_data[cat] = new_item_data
        save_json(EQUIPMENT_FILE, equipment_data)

        new_item_name = list(new_item_data.keys())[0]
        process_item_buffs(new_item_data[new_item_name][0], status_data, sign=1)

    save_json(STATUS_FILE, status_data)
    subprocess.Popen(['python', 'Anime Version/Equipment/gui.py'])
    window.quit()

# GUI Initialization
canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 531,
    width = 555,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    277.0,
    595.0,
    image=image_image_1
)

with open("Files\Mod\presets.json", 'r') as pres_file:
    pres_file_data=json.load(pres_file)
    normal_font_col=pres_file_data["Anime"]["Normal Font Color"]
    video_path=pres_file_data["Anime"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 277.0, 350.0, resize_factor=1)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    287.0,
    418.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    274.0,
    120.0,
    image=image_image_3
)


# Load dynamic data
inventory_data = load_json(INVENTORY_FILE)
presets = load_json(PRESETS_FILE)

# Populate Equipment List
names = ["-", "-", "-", "-", "-"]
ranks = ["X", "X", "X", "X", "X"]

for idx, item in enumerate(inventory_data.keys()):
    if inventory_data[item][0]["cat"] == cat and idx < 5:
        names[idx] = item
        ranks[idx] = inventory_data[item][0]["rank"]


button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))

images=[]
image_image_4 = PhotoImage(file=relative_to_assets("image_4.png"))
# Add Buttons and Labels Dynamically
for i, (name, rank) in enumerate(zip(names, ranks)):
    y_offset = 164 + i * 32

    canvas.create_image(
        280.0,
        (y_offset+13),
        image=image_image_4
    )

    canvas.create_text(68.0, y_offset, anchor="nw", text=name, fill=normal_font_col, font=("Montserrat Regular", 18 * -1))
    canvas.create_text(391.0, y_offset, anchor="nw", text=f"{rank}-Rank", fill=normal_font_col, font=("Montserrat Medium", 18 * -1))
    button = Button(
        image=button_image_1,
        borderwidth=0, highlightthickness=0, command=lambda i=i: handle_selection(i + 1, names[i]), relief="flat"
    )
    button.place(x=481.0, y=y_offset, width=24.0, height=24.0)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    0.0,
    197.29241943359375,
    image=image_image_9
)

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    553.8004760742188,
    204.6931381225586,
    image=image_image_10
)

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    280.0,
    22.0,
    image=image_image_11
)

canvas.tag_bind(image_11, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_11, "<B1-Motion>", move_window)

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    300.0,
    364.0,
    image=image_image_12
)

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_6.place(
    x=489.5352478027344,
    y=62.5848388671875,
    width=21.407020568847656,
    height=20.974361419677734
)

window.resizable(False, False)
window.mainloop()
