
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import csv
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.itemequip
import thesystem.misc

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / "assets/frame0"
EQUIPMENT_TEMP_FILE = 'Files/Temp Files/Equipment Temp.csv'
INVENTORY_FILE = 'Files/Player Data/Inventory.json'
EQUIPMENT_FILE = 'Files/Player Data/Equipment.json'
STATUS_FILE = 'Files/Player Data/Status.json'
PRESETS_FILE = "Files/Mod/presets.json"

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(win):
    if setting_data["Settings"]["Performernce (ANIME):"] != "True":
        stop_event.set()
        update_thread.join()
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=20, delay=1)

window = Tk()
stop_event=threading.Event()


initial_height = 0
target_height = 373
window_width = 553

window.geometry(f"{window_width}x{initial_height}")

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window,transp_clr)


with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (580, 38), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (580, 33), job, type_="bottom")


subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 373,
    width = 555,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)


# ! ======================================================================
# ! FILE RETRIEVAL
# ! ======================================================================


name1=name2=name3=name4=name5='-'
rank1=rank2=rank3=rank4=rank5='X'
dat1=dat2=dat3=dat4=dat5={}

with open('Files/Temp Files/Equipment Temp.csv', 'r') as fop:
    fr=csv.reader(fop)
    for k in fr:
        cat=k[0]
        try:
            typ=k[1]
        except:
            print()
        equipment_temp=k
        break
    
with open('Files/Player Data/Inventory.json', 'r') as fout:
    data=ujson.load(fout)
    rol=list(data.keys())
c = 0
for k in rol:
    if data[k][0]["cat"] == cat:  # Check if the category matches
        if c == 0:
            name1, rank1 = k, data[k][0]["rank"]
            dat1 = {k: data[k]}  # Store only the current item with its name as the key
        elif c == 1:
            name2, rank2 = k, data[k][0]["rank"]
            dat2 = {k: data[k]}
        elif c == 2:
            name3, rank3 = k, data[k][0]["rank"]
            dat3 = {k: data[k]}
        elif c == 3:
            name4, rank4 = k, data[k][0]["rank"]
            dat4 = {k: data[k]}
        elif c == 4:
            name5, rank5 = k, data[k][0]["rank"]
            dat5 = {k: data[k]}
        c += 1


# ! ======================================================================
# ! FILE INJECTION
# ! ======================================================================


# GUI Initialization
canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 531,
    width = 555,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    277.0,
    595.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    normal_font_col=pres_file_data["Anime"]["Normal Font Color"]
    video_path=pres_file_data["Anime"][video]
    preloaded_frames = np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 277.0, 350.0, resize_factor=1, pause_duration=0.4)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    287.0,
    418.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    274.0,
    120.0,
    image=image_image_3
)

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    279.0,
    240.0,
    image=image_image_13
)

# Load dynamic data
inventory_data = thesystem.misc.load_ujson(INVENTORY_FILE)
presets = thesystem.misc.load_ujson(PRESETS_FILE)

# Populate Equipment List
names = ["", "", "", "", ""]
ranks = ["X", "X", "X", "X", "X"]
ac_ranks = ["", "", "", "", ""]
state=["hidden", "hidden", "hidden", "hidden", "hidden"]

match_count = 0
for item in inventory_data.keys():
    if inventory_data[item][0]["cat"] == cat:
        if match_count < 5:
            names[match_count] = item
            ranks[match_count] = inventory_data[item][0]["rank"]
            ac_ranks[match_count] = str(inventory_data[item][0]["rank"])+" Rank"
            state[match_count] = "normal"
            match_count += 1


button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))

images=[]
image_image_4 = PhotoImage(file=relative_to_assets("image_4.png"))
# Add Buttons and Labels Dynamically
for i, (name, rank) in enumerate(zip(names, ac_ranks)):
    y_offset = 164 + i * 32

    canvas.create_image(
        280.0,
        (y_offset+13),
        image=image_image_4,
        state=state[i]
    )

    canvas.create_text(68.0, y_offset, anchor="nw", text=name, fill=normal_font_col, font=("Montserrat Regular", 18 * -1))
    canvas.create_text(391.0, y_offset, anchor="nw", text=f"{rank}", fill=normal_font_col, font=("Montserrat Medium", 18 * -1))
    
    btn = canvas.create_image(
        481.0,
        y_offset+13,
        image=button_image_1,
        state=state[i]
    )

    canvas.tag_bind(btn, "<ButtonPress-1>", lambda event, i=i: thesystem.itemequip.handle_selection(i + 1, names[i], cat, window, dat1, dat2, dat3, dat4, dat5))

side = PhotoImage(file=relative_to_assets("blue.png"))
if job.upper()!="NONE":
    side = PhotoImage(file=relative_to_assets("purple.png"))
canvas.create_image(0.0, 197.0, image=side)
canvas.create_image(553.0, 204.0, image=side)

canvas.create_rectangle(
    0.0,
    0.0,
    200.0,
    34.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    364.0,
    640.0,
    825.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    640.0,
    49.0,
    fill=transp_clr,
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (52, 333))
canvas.create_image(0.0, 197.0, image=image_40)

canvas.create_rectangle(
    0.0,
    950.0,
    640.0,
    825.0,
    fill=transp_clr,
    outline="")

image_50 = thesystem.system.side_bar("right_bar.png", (52, 320))
canvas.create_image(540.0, 204.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    280.0,
    35.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    300.0,
    364.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)
# Start the animation
if setting_data["Settings"]["Performernce (ANIME):"] != "True":
    update_thread = threading.Thread(target=update_images)
    update_thread.start()

# =================================================================================================


button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_6.place(
    x=489.5352478027344,
    y=62.5848388671875,
    width=21.407020568847656,
    height=20.974361419677734
)

window.resizable(False, False)
window.mainloop()
