
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Listbox, Frame, Scrollbar, ttk
from tkinter import ttk
import json
import csv
import subprocess
import random
import cv2
from PIL import Image, ImageTk
from datetime import datetime, timedelta
import threading
import sys
import os
from supabase import create_client
import os
from infisical_client import ClientSettings, InfisicalClient, GetSecretOptions, AuthenticationOptions, UniversalAuthMethod
from tkinter import messagebox
import asyncio
import threading

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.online

client = InfisicalClient(ClientSettings(
    auth=AuthenticationOptions(
        universal_auth=UniversalAuthMethod(
            client_id="0fa8dbf8-92ee-4889-bd48-1b5dd2d22e87",
            client_secret="a2c9a58bda26c914e333e6c0f7c35e019b30c3afa67b5dc8419a142ee8b2aec8",
        )
    )
))

URL = thesystem.online.get_url(client)
KEY = thesystem.online.get_key(client)

supabase = create_client(URL, KEY)


subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

initial_height = 0
target_height = 369
window_width = 879

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.make_window_transparent(window)
thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)


SESSION_FILE = "Files/Data/session.json"

def load_session():
    """Load session data from the session file."""
    if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:
        with open(SESSION_FILE, "r") as f:
            session_data = json.load(f)
            if all(key in session_data for key in ["access_token", "refresh_token", "expires_in"]):
                return session_data

session = load_session()

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def close():
    subprocess.Popen(['python', f'Anime Version/Guild Menu/gui.py'])
    thesystem.online.ex_close(window)
    

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 369,
    width = 879,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    675.0,
    375.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=json.load(pres_file)
    normal_font_col=pres_file_data["Anime"]["Normal Font Color"]
    video_path=pres_file_data["Anime"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 478.0, 213.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    435.0,
    180.52554321289062,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    199.99966430664062,
    61.0,
    image=image_image_3
)


button_image_1 = PhotoImage(
    file=relative_to_assets("button_8.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=close,
    relief="flat"
)
button_1.place(
    x=750.0,
    y=40.0
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    2.0,
    180.25450134277344,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    850.1459350585938,
    196.4259796142578,
    image=image_image_5
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    510.0,
    10.0,
    image=image_image_6
)

canvas.tag_bind(image_6, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_6, "<B1-Motion>", move_window)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    500.0,
    353.0,
    image=image_image_7
)

rank_priority = {
    'X': -2,
    'Z': -1,
    'National': 0,
    'SSS': 1,
    'SS': 2,
    'S': 3,
    'A': 4,
    'B': 5,
    'C': 6,
    'D': 7,
    'E': 8
}

hovered_item = None

def on_treeview_hover(event):
    global hovered_item
    # Identify the item and column under the mouse cursor
    item_id = treeview.identify_row(event.y)
    column = treeview.identify_column(event.x)

    # Get the current user ID and the player's current guild
    user_id = thesystem.online.get_current_user_id(supabase_client=supabase, session=session)
    membership_response = supabase.table('status').select('guild_id').eq('user_id', thesystem.online.get_current_user_id(supabase_client=supabase, session=session)).execute()
    current_guild_id = membership_response.data[0]['guild_id'] if membership_response.data else None

    # Reset previously hovered item if it's different
    if hovered_item and hovered_item != item_id:
        # Clear the text completely for previously hovered item
        treeview.item(hovered_item, values=(
            treeview.item(hovered_item, "values")[0],  # Name
            treeview.item(hovered_item, "values")[1],  # Rank
            treeview.item(hovered_item, "values")[2],  # Members
            ""  # Clear text for previously hovered item
        ))
        hovered_item = None

    # Only process hover events over the 'Join' column
    if item_id and column == '#4':
        # Update the hovered item
        hovered_item = item_id

        # Determine the hover text
        hover_text = "In Guild" if item_id == current_guild_id else "Switch Guild"

        # Change the text dynamically when hovered
        treeview.item(item_id, values=(
            treeview.item(item_id, "values")[0],  # Name
            treeview.item(item_id, "values")[1],  # Rank
            treeview.item(item_id, "values")[2],  # Members
            hover_text  # Dynamic hover text
        ))

def on_treeview_leave(event):
    global hovered_item
    # Reset the last hovered item's text to be empty when mouse leaves
    if hovered_item:
        treeview.item(hovered_item, values=(
            treeview.item(hovered_item, "values")[0],  # Name
            treeview.item(hovered_item, "values")[1],  # Rank
            treeview.item(hovered_item, "values")[2],  # Members
            ""  # Clear the text when mouse leaves
        ))
        hovered_item = None

def on_treeview_click(event):
    # Identify the item clicked
    item_id = treeview.identify_row(event.y)
    column = treeview.identify_column(event.x)

    if not item_id:
        print("No guild selected.")
        return

    # Fetch current user's guild
    user_id = thesystem.online.get_current_user_id(supabase_client=supabase, session=session)
    membership_response = supabase.table('status').select('guild_id').eq('user_id', thesystem.online.get_user_name(supabase_client=supabase, session=session)).execute()
    current_guild_id = membership_response.data[0]['guild_id'] if membership_response.data else None

    if column == '#4':  # Check if it's the 'Join/Switch' column
        if item_id == current_guild_id:
            pass
        else:
            if current_guild_id != None:
                thesystem.online.switch_guild(thesystem.online.get_user_name(supabase_client=supabase, session=session), item_id, supabase=supabase, session=session)
                thesystem.online.update_guild_status(session=session, treeview=treeview)
            else:
                thesystem.online.join_guild(item_id, supabase_client=supabase, session=session)






        
def successclose():
    subprocess.Popen(['python', f'Anime Version/Guild List/success.py'])
    thesystem.online.ex_close(window)
    



# Create a frame for the Treeview
frame = Frame(window, bg='#010616')
frame.pack(padx=80, pady=100, fill='both', expand=True)

columns = ('Name', 'Rank', 'Members', 'Join')

treeview = ttk.Treeview(frame, columns=columns, show='headings', selectmode='extended')
treeview.pack(side='left', fill='both', expand=True)

# Define headings and column widths
treeview.heading('Name', text='Guild Name')
treeview.heading('Rank', text='Rank')
treeview.heading('Members', text='Members')
treeview.heading('Join', text='')
treeview.column('Name', width=150)
treeview.column('Rank', width=25)
treeview.column('Members', width=25)
treeview.column('Join', width=25)

# Apply style for row borders
style = ttk.Style()
style.theme_use('clam')
style.configure('Treeview', rowheight=15, borderwidth=10, relief="groove", font=('Montserrat Bold', 10))
style.configure('Treeview', background='black', fieldbackground='black', foreground='white')
style.map('Treeview', background=[('selected', 'skyblue')], foreground=[('selected', 'black')])
style.map('Treeview', background=[('selected', 'skyblue')], foreground=[('selected', 'black')])


treeview.bind("<Motion>", on_treeview_hover)  # Hover
treeview.bind("<Enter>", on_treeview_hover)   # On Enter the widget
treeview.bind("<Leave>", on_treeview_leave)   # On Leave the widget
treeview.bind('<ButtonRelease-1>', on_treeview_click)  # Click
# Add vertical scrollbar

# Load data into Treeview
thesystem.online.load_guilds(treeview, supabase=supabase, rank_priority=rank_priority)
    
window.resizable(False, False)
window.mainloop()
