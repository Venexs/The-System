
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# Fork by Venexs


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import csv
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.misc
import thesystem.misc as misc
import thesystem.nightmarket
import thesystem.inventory


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

initial_height = 0
target_height = 455
window_width = 746

job=misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.make_window_transparent(window, transp_clr)
thesystem.system.center_window(window,window_width,target_height)
thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

window.configure(bg = "#FFFFFF")

set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (748, 39), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (763, 36), job, type_="bottom")

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 455,
    width = 746,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    609.0,
    301.0,
    image=image_image_1
)

pres_file_data=misc.load_ujson("Files/Mod/presets.json")
video_path=pres_file_data["Anime"][video]
preloaded_frames = np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 478.0, 313.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    379.00000762939453,
    233.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    201.0,
    88.0,
    image=image_image_3
)

canvas.create_rectangle(
    0.0,
    0.0,
    60.0,
    455.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    697.0,
    0.0,
    746.0,
    458.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    119.0,
    0.0,
    381.0,
    38.0,
    fill="#652AA3",
    outline="")

canvas.create_rectangle(
    60.0,
    421.0,
    923.0,
    460.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    50.0,
    0.0,
    643.0,
    44.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    137.0,
    0.0,
    765.0,
    40.0,
    fill=transp_clr,
    outline="")

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    33.0,
    235.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    716.0,
    231.0,
    image=image_image_5
)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    375.0,
    29.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    387.0,
    437.0,
    image=bottom_preloaded_images[bot_image_index]
)

weekly_data = thesystem.nightmarket.get_weekly_night_market_data()
s_rank_data = weekly_data["rank_items"]["S"]
b_rank_data = weekly_data["rank_items"]["B"]
c_rank_data = weekly_data["rank_items"]["C"]
d_rank_data = weekly_data["rank_items"]["D"]

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    176.0,
    233.0,
    image=image_image_8
)

canvas.create_rectangle(
    118.0,
    139.0,
    235.0,
    327.0,
    fill="#1C1C1C",
    outline="")

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    166.0,
    190.0,
    image=image_image_9
)

s_item_name = list(s_rank_data.keys())[0]
s_rarity = s_rank_data[s_item_name]["rarity"]
s_price = s_rank_data[s_item_name]["data"]["Value"]
s_acquisition_rank = s_rank_data[s_item_name]["data"]["rank"]

canvas.create_text(
    125.0,
    233.0,
    anchor="nw",
    text=f"[{s_item_name}]",
    fill="#FFFFFF",
    font=("Montserrat Bold", 8 * -1)
)

canvas.create_text(
    125.0,
    251.0,
    anchor="nw",
    text="ACQUISITION RANK:",
    fill="#FFFFFF",
    font=("Montserrat Regular", 8 * -1)
)

canvas.create_text(
    125.0,
    262.0,
    anchor="nw",
    text=f"[{s_acquisition_rank}]",
    fill="#FFFFFF",
    font=("Montserrat Bold", 10 * -1)
)

canvas.create_text(
    125.0,
    283.0,
    anchor="nw",
    text="PRICE:",
    fill="#FFFFFF",
    font=("Montserrat Regular", 8 * -1)
)

canvas.create_text(
    141.0,
    294.0,
    anchor="nw",
    text=f"{s_price}",
    fill="#FFFFFF",
    font=("Montserrat Bold", 10 * -1)
)

canvas.create_rectangle(
    124.0,
    294.0,
    139.0,
    309.0,
    fill="#FFFFFF",
    outline="")

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    308.0,
    233.0,
    image=image_image_10
)

canvas.create_rectangle(
    250.0,
    139.0,
    367.0,
    327.0,
    fill="#1C1C1C",
    outline="")

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    298.0,
    190.0,
    image=image_image_11
)

b_item_name = list(b_rank_data.keys())[0]
b_rarity = b_rank_data[b_item_name]["rarity"]
b_price = b_rank_data[b_item_name]["data"]["Value"]
b_acquisition_rank = b_rank_data[b_item_name]["data"]["rank"]

canvas.create_text(
    257.0,
    233.0,
    anchor="nw",
    text=f"[{b_item_name}]",
    fill="#FFFFFF",
    font=("Montserrat Bold", 8 * -1)
)

canvas.create_text(
    257.0,
    251.0,
    anchor="nw",
    text="ACQUISITION RANK:",
    fill="#FFFFFF",
    font=("Montserrat Regular", 8 * -1)
)

canvas.create_text(
    257.0,
    262.0,
    anchor="nw",
    text=f"[{b_acquisition_rank}]",
    fill="#FFFFFF",
    font=("Montserrat Bold", 10 * -1)
)

canvas.create_text(
    257.0,
    283.0,
    anchor="nw",
    text="PRICE:",
    fill="#FFFFFF",
    font=("Montserrat Regular", 8 * -1)
)

canvas.create_text(
    273.0,
    294.0,
    anchor="nw",
    text=f"{b_price}",
    fill="#FFFFFF",
    font=("Montserrat Bold", 10 * -1)
)

canvas.create_rectangle(
    256.0,
    294.0,
    271.0,
    309.0,
    fill="#FFFFFF",
    outline="")

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    440.0,
    233.0,
    image=image_image_12
)

canvas.create_rectangle(
    382.0,
    139.0,
    499.0,
    327.0,
    fill="#1C1C1C",
    outline="")

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    430.0,
    190.0,
    image=image_image_13
)

c_item_name = list(c_rank_data.keys())[0]
c_rarity = c_rank_data[c_item_name]["rarity"]
c_price = c_rank_data[c_item_name]["data"]["Value"]
c_acquisition_rank = c_rank_data[c_item_name]["data"]["rank"]

canvas.create_text(
    389.0,
    233.0,
    anchor="nw",
    text=f"[{c_item_name}]",
    fill="#FFFFFF",
    font=("Montserrat Bold", 8 * -1)
)

canvas.create_text(
    389.0,
    251.0,
    anchor="nw",
    text="ACQUISITION RANK:",
    fill="#FFFFFF",
    font=("Montserrat Regular", 8 * -1)
)

canvas.create_text(
    389.0,
    262.0,
    anchor="nw",
    text=f"[{c_acquisition_rank}]",
    fill="#FFFFFF",
    font=("Montserrat Bold", 10 * -1)
)

canvas.create_text(
    389.0,
    283.0,
    anchor="nw",
    text="PRICE:",
    fill="#FFFFFF",
    font=("Montserrat Regular", 8 * -1)
)

canvas.create_text(
    405.0,
    294.0,
    anchor="nw",
    text=f"{c_price}",
    fill="#FFFFFF",
    font=("Montserrat Bold", 10 * -1)
)

canvas.create_rectangle(
    388.0,
    294.0,
    403.0,
    309.0,
    fill="#FFFFFF",
    outline="")

image_image_14 = PhotoImage(
    file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(
    572.0,
    233.0,
    image=image_image_14
)

canvas.create_rectangle(
    514.0,
    139.0,
    631.0,
    327.0,
    fill="#1C1C1C",
    outline="")

image_image_15 = PhotoImage(
    file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(
    562.0,
    190.0,
    image=image_image_15
)

d_item_name = list(d_rank_data.keys())[0]
d_rarity = d_rank_data[d_item_name]["rarity"]
d_price = d_rank_data[d_item_name]["data"]["Value"]
d_acquisition_rank = d_rank_data[d_item_name]["data"]["rank"]

canvas.create_text(
    521.0,
    233.0,
    anchor="nw",
    text=f"[{d_item_name}]",
    fill="#FFFFFF",
    font=("Montserrat Bold", 8 * -1)
)

canvas.create_text(
    521.0,
    251.0,
    anchor="nw",
    text="ACQUISITION RANK:",
    fill="#FFFFFF",
    font=("Montserrat Regular", 8 * -1)
)

canvas.create_text(
    521.0,
    262.0,
    anchor="nw",
    text=f"[{d_acquisition_rank}]",
    fill="#FFFFFF",
    font=("Montserrat Bold", 10 * -1)
)

canvas.create_text(
    521.0,
    283.0,
    anchor="nw",
    text="PRICE:",
    fill="#FFFFFF",
    font=("Montserrat Regular", 8 * -1)
)

canvas.create_text(
    537.0,
    294.0,
    anchor="nw",
    text=f"{d_price}",
    fill="#FFFFFF",
    font=("Montserrat Bold", 10 * -1)
)

canvas.create_rectangle(
    520.0,
    294.0,
    535.0,
    309.0,
    fill="#FFFFFF",
    outline="")

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

update_images()

window.resizable(False, False)
window.mainloop()
