
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# Fork by Venexs


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import json
import csv
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import time
import sys
import os
import atexit
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.castle
import thesystem.misc as misc


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

initial_height = 0
target_height = 300
window_width = 322

window.geometry(f"{window_width}x{initial_height}")
stop_event=threading.Event()

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window, transp_clr)

with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (332, 30), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (322, 25), job, type_="bottom")

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

thesystem.system.animate_window_open(window, target_height, window_width, step=50, delay=1)

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root

def ex_close(eve=0):
    if setting_data["Settings"]["Performernce (ANIME):"] != "True":
        stop_event.set()
        update_thread.join()
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=50, delay=1)

def count_completed_images(data):
    hidden_images = data.get("hidden_images", {})
    total_images = len(hidden_images)
    completed_images = sum(1 for img in hidden_images.values() if img.get("Completed"))
    
    return total_images, completed_images

def count_statuses(data):
    total_items = len(data)
    done_count = sum(1 for status in data.values() if status == "Done")
    doing_count = sum(1 for status in data.values() if status == "Doing")
    undone_count = total_items - done_count - doing_count
    
    return done_count, doing_count, total_items

with open("Files/Player Data/image_visibility.json", 'r') as f:
    data = ujson.load(f)

with open("Files/Player Data/Demon_Floor.json", 'r') as f1:
    floor_data = ujson.load(f1)

total_images, completed_images = count_completed_images(data)
done_count, doing_count, total_items = count_statuses(floor_data)

def check_castle_status(file_path, stop_event):
    time.sleep(3)
    while not stop_event.is_set():
        with open(file_path, "r") as file:
            data = json.load(file)
        
        if data.get("Castle") == "Open":
            ex_close()
            break

def start_checking(file_path):
    stop_event = threading.Event()
    thread = threading.Thread(target=check_castle_status, args=(file_path, stop_event))
    thread.start()
    return thread, stop_event

json_file_path = "Files/Player Data/Tabs.json"
checker_thread, stop_event = start_checking(json_file_path)

atexit.register(stop_event.set)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 300,
    width = 322,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    40.0,
    71.0,
    420.0,
    513.0,
    fill="#FFFFFF",
    outline="")

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Anime"][video]
    preloaded_frames = np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 478.0, 277.0, pause_duration=0.7)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    162.0,
    136.0,
    image=image_image_1
)

canvas.create_text(
    80.0,
    24.0,
    anchor="nw",
    text="THE DEMONâ€™S CASTLE",
    fill="#FFFFFF",
    font=("Montserrat Bold", 14 * -1)
)

canvas.create_text(
    58.0,
    234.0,
    anchor="nw",
    text="FLOOR: ",
    fill="#FFFFFF",
    font=("Montserrat Bold", 13 * -1)
)

if done_count+doing_count>=100:
    canvas.create_text(
    111.0,
    234.0,
    anchor="nw",
    text="Defeat Demon Monarch Baran",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

else:
    canvas.create_text(
        111.0,
        234.0,
        anchor="nw",
        text=f"{done_count+doing_count}/{total_items}",
        fill="#FFFFFF",
        font=("Montserrat Medium", 13 * -1)
    )

canvas.create_text(
    58.0,
    250.0,
    anchor="nw",
    text="DEMON ZONES:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 13 * -1)
)

canvas.create_text(
    170.0,
    250.0,
    anchor="nw",
    text=f"{completed_images}/{total_images}",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

canvas.create_rectangle(
    -20.0,
    0.0,
    50.0,
    300.0,
    fill=f"{transp_clr}",
    outline="")

canvas.create_rectangle(
    270.0,
    0.0,
    322.0,
    300.0,
    fill=f"{transp_clr}",
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    322.0,
    20.0,
    fill=f"{transp_clr}",
    outline="")

canvas.create_rectangle(
    0.0,
    279.0,
    322.0,
    300.0,
    fill=f"{transp_clr}",
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (33, 270))
canvas.create_image(40.0, 150.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (33, 270))
canvas.create_image(276.0, 150.0, image=image_50)

image_index = 0
bot_image_index = 0 

top_image = canvas.create_image(
    160.0,
    14.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    160.0,
    275.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

# Start the animation
if setting_data["Settings"]["Performernce (ANIME):"] != "True":
    update_thread = threading.Thread(target=update_images)
    update_thread.start()


image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    260.0,
    36.0,
    image=image_image_2
)

canvas.tag_bind(image_2, "<ButtonPress-1>", ex_close)

window.resizable(False, False)
window.mainloop()
