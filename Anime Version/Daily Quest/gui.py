
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from datetime import datetime, timedelta, date
import threading
import time
import random
import json
import csv
import subprocess
import cv2
from PIL import Image, ImageTk
import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.dailyquest as dailyquest

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

with open('Files\Checks\Secret_Quest_Check.json', 'r') as secrer_quest:
    secrer_quest_data=json.load(secrer_quest)
    day_num=secrer_quest_data["Day"]
    tdy_week_num=datetime.today().weekday()

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def update_timer(end_time):
    remaining_time = end_time - datetime.now()

    if remaining_time.days < 0:
        window.quit()

    hours, remainder = divmod(remaining_time.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    timer_text = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    canvas.itemconfig(timer, text=timer_text)

    window.after(1000, update_timer, end_time)

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(win):
    with open("Files/Tabs.json",'r') as tab_son:
        tab_son_data=json.load(tab_son)

    with open("Files/Tabs.json",'w') as fin_tab_son:
        tab_son_data["Daily"]='Close'
        json.dump(tab_son_data,fin_tab_son,indent=4)
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=20, delay=1)

with open("Files/Checks/Daily_time_check.csv", 'r') as Daily_date_check_file:
    fr=csv.reader(Daily_date_check_file)
    for k in fr:
        date_old=k[0]
        # Rew_check checks if the rewards have been given
        rew_check=k[1]
        # today check is a part of Rew_check, ensuring if the quest was completed today
        tdy_check=k[2]

today = date.today()
today_date_str = today.strftime("%Y-%m-%d")

daily_quest_raw, player_data, final_data = dailyquest.dailys_init()
daily_quest_data = daily_quest_raw[0]
pl_push, pl_sit, pl_sqat, pl_run, pl_int, pl_slp = player_data
fl_push, fl_sit, fl_sqat, fl_run, fl_int, fl_slp = final_data

rank = dailyquest.get_rank()

try:
    date_from_string = datetime.strptime(date_old, "%Y-%m-%d").date()
except:
    date_from_string = today - timedelta(days = 2)

full_check=False

if date_from_string < today:
    full_check=False
    with open("Files/Checks/Daily_time_check.csv", 'w',  newline='') as fin_daily_date_check_file:
        fw1=csv.writer(fin_daily_date_check_file)
        fw1.writerow([today_date_str,"False","Incomplete"])

elif date_from_string==today:
    if tdy_check=='Complete':
        full_check=True

if full_check==False:
    with open("Files/Tabs.json",'r') as tab_son:
        tab_son_data=json.load(tab_son)

    with open("Files/Tabs.json",'w') as fin_tab_son:
        tab_son_data["Daily"]='Open'
        json.dump(tab_son_data,fin_tab_son,indent=4)

    window = Tk()

    initial_height = 0
    target_height = 774
    window_width = 477

    window.geometry(f"{window_width}x{initial_height}")
    thesystem.system.make_window_transparent(window)
    thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

    top_images = [f"thesystem/top_bar/dailyquest.py{str(i).zfill(4)}.png" for i in range(1, 501)]
    bottom_images = [f"thesystem/bottom_bar/{str(i).zfill(4)}.png" for i in range(1, 501)]

    # Preload top and bottom images
    top_preloaded_images = thesystem.system.preload_images(top_images, (488, 38))
    bottom_preloaded_images = thesystem.system.preload_images(bottom_images, (488, 33))

    subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])

    window.configure(bg = "#FFFFFF")
    window.attributes('-alpha',0.8)
    window.overrideredirect(True)
    window.wm_attributes("-topmost", True)

    canvas = Canvas(
        window,
        bg = "#FFFFFF",
        height = 774,
        width = 477,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        277.0,
        495.0,
        image=image_image_1
    )

    with open("Files\Mod\presets.json", 'r') as pres_file:
        pres_file_data=json.load(pres_file)
        normal_font_col=pres_file_data["Anime"]["Normal Font Color"]
    video_path=pres_file_data["Anime"]["Video"]
    player = thesystem.system.VideoPlayer(canvas, video_path, 277.0, 400.0, resize_factor=0.8)

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        245.0,
        403.0,
        image=image_image_2
    )

    image_image_3 = PhotoImage(
        file=relative_to_assets("image_3.png"))
    image_3 = canvas.create_image(
        241.0,
        102.0,
        image=image_image_3
    )

    image_image_4 = PhotoImage(
        file=relative_to_assets("image_4.png"))
    image_4 = canvas.create_image(
        244.0,
        194.0,
        image=image_image_4
    )

    timer=canvas.create_text(
        140.0,
        648.0,
        anchor="nw",
        text="00:00:00",
        fill=normal_font_col,
        font=("Exo Bold", 52 * -1)
    )

    canvas.create_text(
        91.0,
        142.0,
        anchor="nw",
        text="[Daily Quest: Player Training has arrived]",
        fill=normal_font_col,
        font=("Montserrat Regular", 15 * -1)
    )

    canvas.create_text(
        86.0,
        244.0,
        anchor="nw",
        text="Push-ups",
        fill=normal_font_col,
        font=("Montserrat Regular", 14 * -1)
    )

    canvas.create_text(
        86.0,
        284.0,
        anchor="nw",
        text="Sit-ups",
        fill=normal_font_col,
        font=("Montserrat Regular", 14 * -1)
    )

    canvas.create_text(
        86.0,
        323.0,
        anchor="nw",
        text="Squats",
        fill=normal_font_col,
        font=("Montserrat Regular", 14 * -1)
    )

    canvas.create_text(
        86.0,
        363.0,
        anchor="nw",
        text="Running",
        fill=normal_font_col,
        font=("Montserrat Regular", 14 * -1)
    )

    canvas.create_text(
        86.0,
        420.0,
        anchor="nw",
        text="Chapter Reading",
        fill=normal_font_col,
        font=("Montserrat Regular", 14 * -1)
    )

    canvas.create_text(
        86.0,
        459.0,
        anchor="nw",
        text="Proper Last Night Sleep",
        fill=normal_font_col,
        font=("Montserrat Regular", 14 * -1)
    )

    pushup_txt=canvas.create_text(
        315.0,
        246.0,
        anchor="nw",
        text=f"[{pl_push}/{fl_push}]",
        fill=normal_font_col,
        font=("Montserrat Regular", 14 * -1)
    )

    situp_txt=canvas.create_text(
        315.0,
        284.0,
        anchor="nw",
        text=f"[{pl_sit}/{fl_sit}]",
        fill=normal_font_col,
        font=("Montserrat Regular", 14 * -1)
    )

    squat_txt=canvas.create_text(
        315.0,
        322.0,
        anchor="nw",
        text=f"[{pl_sqat}/{fl_sqat}]",
        fill=normal_font_col,
        font=("Montserrat Regular", 14 * -1)
    )

    run_txt=canvas.create_text(
        313.0,
        363.0,
        anchor="nw",
        text=f"[{pl_run}/{fl_run}km]",
        fill=normal_font_col,
        font=("Montserrat Regular", 14 * -1)
    )

    int_txt=canvas.create_text(
        333.0,
        420.0,
        anchor="nw",
        text=f"[{pl_int}/{fl_int}]",
        fill=normal_font_col,
        font=("Montserrat Regular", 14 * -1)
    )

    sleep_txt=canvas.create_text(
        334.0,
        459.0,
        anchor="nw",
        text=f"[{pl_slp}/{fl_slp}]",
        fill=normal_font_col,
        font=("Montserrat Regular", 14 * -1)
    )

    image_image_5 = PhotoImage(
        file=relative_to_assets("image_5.png"))
    image_5 = canvas.create_image(
        242.0,
        363.0,
        image=image_image_5
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: update_pushup(),
        relief="flat"
    )
    button_1.place(
        x=380.0,
        y=244.0,
        width=20.0,
        height=20.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: update_situp(),
        relief="flat"
    )
    button_2.place(
        x=380.0,
        y=284.0,
        width=20.0,
        height=20.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: update_sqat(),
        relief="flat"
    )
    button_3.place(
        x=380.0,
        y=321.0,
        width=20.0,
        height=20.0
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("button_4.png"))
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: update_run(),
        relief="flat"
    )
    button_4.place(
        x=380.0,
        y=363.0,
        width=20.0,
        height=20.0
    )

    button_image_5 = PhotoImage(
        file=relative_to_assets("button_5.png"))
    button_5 = Button(
        image=button_image_5,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: update_int(),
        relief="flat"
    )
    button_5.place(
        x=380.0,
        y=420.0,
        width=20.0,
        height=20.0
    )

    button_image_6 = PhotoImage(
        file=relative_to_assets("button_6.png"))
    button_6 = Button(
        image=button_image_6,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: update_sleep(),
        relief="flat"
    )
    button_6.place(
        x=382.0,
        y=458.0,
        width=20.0,
        height=20.0
    )

    def update_pushup():
        subprocess.Popen(['python', 'Files\Mod\default\sfx_point.py'])
        #global pushup_txt
        current_text=int((((canvas.itemcget(pushup_txt, "text")).split("/"))[0])[1:])
        with open("Files/Data/Daily_Quest.json", 'w') as write_daily_quest_file:
            daily_quest_data["Player"]["Push"]+=1
            json.dump(daily_quest_data, write_daily_quest_file, indent=4)
        canvas.itemconfig(pushup_txt, text=f"[{current_text+1}/{fl_push}]")

    def update_situp():
        subprocess.Popen(['python', 'Files\Mod\default\sfx_point.py'])
        #global situp_txt
        current_text=int((((canvas.itemcget(situp_txt, "text")).split("/"))[0])[1:])
        with open("Files/Data/Daily_Quest.json", 'w') as write_daily_quest_file:
            daily_quest_data["Player"]["Sit"]+=1
            json.dump(daily_quest_data, write_daily_quest_file, indent=4)
        canvas.itemconfig(situp_txt, text=f"[{current_text+1}/{fl_sit}]")

    def update_sqat():
        subprocess.Popen(['python', 'Files\Mod\default\sfx_point.py'])
        #global situp_txt
        current_text=int((((canvas.itemcget(squat_txt, "text")).split("/"))[0])[1:])
        with open("Files/Data/Daily_Quest.json", 'w') as write_daily_quest_file:
            daily_quest_data["Player"]["Squat"]+=1
            json.dump(daily_quest_data, write_daily_quest_file, indent=4)
        canvas.itemconfig(squat_txt, text=f"[{current_text+1}/{fl_sit}]")

    def update_run():
        subprocess.Popen(['python', 'Files\Mod\default\sfx_point.py'])
        #global run_txt
        current_text=float((((canvas.itemcget(run_txt, "text")).split("/"))[0])[1:])
        with open("Files/Data/Daily_Quest.json", 'w') as write_daily_quest_file:
            daily_quest_data["Player"]["Run"]+=0.5
            json.dump(daily_quest_data, write_daily_quest_file, indent=4)
        canvas.itemconfig(run_txt, text=f"[{current_text+0.5}/{fl_run}]")

    def update_int():
        subprocess.Popen(['python', 'Files\Mod\default\sfx_point.py'])
        #global int_txt
        current_text=float((((canvas.itemcget(int_txt, "text")).split("/"))[0])[1:])
        with open("Files/Data/Daily_Quest.json", 'w') as write_daily_quest_file:
            daily_quest_data["Player"]["Int_type"]+=0.5
            json.dump(daily_quest_data, write_daily_quest_file, indent=4)
        canvas.itemconfig(int_txt, text=f"[{current_text+0.5}/{fl_int}]")

    def update_sleep():
        subprocess.Popen(['python', 'Files\Mod\default\sfx_point.py'])
        #global sleep_txt
        current_text=int((((canvas.itemcget(sleep_txt, "text")).split("/"))[0])[1:])
        with open("Files/Data/Daily_Quest.json", 'w') as write_daily_quest_file:
            daily_quest_data["Player"]["Sleep"]+=1
            json.dump(daily_quest_data, write_daily_quest_file, indent=4)
        canvas.itemconfig(sleep_txt, text=f"[{current_text+1}/{fl_slp}]")

    canvas.create_text(
        96.0,
        510.0,
        anchor="nw",
        text="Preview Rewards",
        fill=normal_font_col    ,
        font=("Montserrat Light", 13 * -1)
    )

    button_image_7 = PhotoImage(
        file=relative_to_assets("button_7.png"))
    button_7 = Button(
        image=button_image_7,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (thesystem.system.daily_preview(window),ex_close(window)),
        relief="flat"
    )
    button_7.place(
        x=73.0,
        y=507.0,
        width=20.0,
        height=20.0
    )

    image_image_6 = PhotoImage(
        file=relative_to_assets("image_6.png"))
    image_6 = canvas.create_image(
        244.0,
        598.0,
        image=image_image_6
    )

    button_image_8 = PhotoImage(
        file=relative_to_assets("button_8.png"))
    button_8 = Button(
        image=button_image_8,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: thesystem.system.check_daily_comp(today_date_str, window),
        relief="flat"
    )
    button_8.place(
        x=273.0,
        y=519.0,
        width=160.0,
        height=27.0
    )

    side = PhotoImage(file=relative_to_assets("blue.png"))
    canvas.create_image(15.0, 381.0, image=side)
    canvas.create_image(468.0, 404.0, image=side)

    canvas.create_rectangle(
        0.0,
        0.0,
        200.0,
        34.0,
        fill="#0C679B",
        outline="")

    canvas.create_rectangle(
        0.0,
        743.0,
        515.0,
        774.0,
        fill="#0C679B",
        outline="")

    canvas.create_rectangle(
        0.0,
        0.0,
        498.0,
        49.0,
        fill="#0C679B",
        outline="")
    
    image_40 = thesystem.system.side_bar("left_bar.png", (101, 722))
    canvas.create_image(0.0, 396.0, image=image_40)

    image_50 = thesystem.system.side_bar("right_bar.png", (80, 718))
    canvas.create_image(470.0, 390.0, image=image_50)

    image_index = 0
    bot_image_index = 0

    top_image = canvas.create_image(
        238.0,
        35.0,
        image=top_preloaded_images[image_index]
    )

    canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
    canvas.tag_bind(top_image, "<B1-Motion>", move_window)

    bottom_image = canvas.create_image(
        244.0,
        750.0,
        image=bottom_preloaded_images[bot_image_index]
    )

    step,delay=1,1

    def update_images():
        global image_index, bot_image_index

        # Update top image
        image_index = (image_index + 1) % len(top_preloaded_images)
        canvas.itemconfig(top_image, image=top_preloaded_images[image_index])

        # Update bottom image
        bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
        canvas.itemconfig(bottom_image, image=bottom_preloaded_images[bot_image_index])

        # Schedule next update (24 FPS)
        window.after(1000 // 24, update_images)

    # Start the animation
    update_images()

    button_image_9 = PhotoImage(
        file=relative_to_assets("button_9.png"))
    button_9 = Button(
        image=button_image_9,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: ex_close(window),
        relief="flat"
    )
    button_9.place(
        x=416.0,
        y=61.0,
        width=20.0,
        height=20.0
    )

    end_time = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
    update_timer(end_time)
    window.resizable(False, False)
    window.mainloop()

elif full_check==True:
    if rew_check=="True":
        thesystem.system.message_open("Quest Completed")
    else:
        with open("Files\Temp Files\Daily Rewards.csv", 'w', newline='') as rew_csv_open:
            rew_fw=csv.writer(rew_csv_open)
            rew_fw.writerow(["Reward"])
        subprocess.Popen(['python', 'Anime Version/Daily Quest Rewards/gui.py'])