
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import csv
import subprocess
import threading
from PIL import Image, ImageTk
from datetime import datetime, timedelta
import pandas as pd
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.dungeon
import thesystem.system
import thesystem.dungeon as dungeonbk
import thesystem.misc

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

with open("Files/Player Data/Tabs.json",'r') as tab_son:
    tab_son_data=ujson.load(tab_son)

with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
    tab_son_data["Dungeons"]='Open'
    ujson.dump(tab_son_data,fin_tab_son,indent=4)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

initial_height = 0
target_height = 666
window_width = 475

window.geometry(f"{window_width}x{initial_height}")
stop_event=threading.Event()

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window,transp_clr)

with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

thesystem.system.animate_window_open(window, target_height, window_width, step=35, delay=1)

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (490, 34), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (490, 34), job, type_="bottom")

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])
presets_data = thesystem.misc.load_ujson("Files/Mod/presets.json")


e_rank=d_rank=c_rank=b_rank=a_rank=s_rank=red_gate=0

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(win):
    if setting_data["Settings"]["Performernce (ANIME):"] != "True":
        stop_event.set()
        update_thread.join()
    with open("Files/Player Data/Tabs.json",'r') as tab_son:
        tab_son_data=ujson.load(tab_son)

    with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
        tab_son_data["Dungeons"]='Close'
        ujson.dump(tab_son_data,fin_tab_son,indent=4)
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=20, delay=1)

e_rank,d_rank,c_rank,b_rank,a_rank,s_rank=thesystem.dungeon.dun_check()

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 666,
    width = 475,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    383.0,
    413.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    normal_font_col=pres_file_data["Anime"]["Normal Font Color"]
    video_path=pres_file_data["Anime"][video]
    preloaded_frames = np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 478.0, 330.0, resize_factor=0.8, pause_duration=0.3)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    238.0,
    344.27220916748047,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    145.0,
    84.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    81.0,
    151.49267578125,
    image=image_image_4
)

canvas.tag_bind(image_4, "<ButtonPress-1>", lambda event: dungeonbk.open_e_dunfile(window))

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    198.0,
    145.0,
    image=image_image_5
)

canvas.create_text(
    135.0,
    153.0,
    anchor="nw",
    text=f"Available Today: {e_rank}",
    fill="#FFFFFF",
    font=("Montserrat Medium", 11 * -1)
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    81.0,
    238.33364868164062,
    image=image_image_6
)

canvas.tag_bind(image_6, "<ButtonPress-1>", lambda event: dungeonbk.open_d_dunfile(window))

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    200.0,
    235.0,
    image=image_image_7
)

canvas.create_text(
    135.0,
    243.0,
    anchor="nw",
    text=f"Available Today: {d_rank}",
    fill="#FFFFFF",
    font=("Montserrat Medium", 11 * -1)
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    81.0,
    325.1746520996094,
    image=image_image_8
)

canvas.tag_bind(image_8, "<ButtonPress-1>", lambda event: dungeonbk.open_c_dunfile(window))

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    199.0,
    315.0,
    image=image_image_9
)

canvas.create_text(
    135.0,
    326.0,
    anchor="nw",
    text=f"Available Today: {c_rank}",
    fill="#FFFFFF",
    font=("Montserrat Medium", 11 * -1)
)

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    81.0,
    412.015625,
    image=image_image_10
)

canvas.tag_bind(image_10, "<ButtonPress-1>", lambda event: dungeonbk.open_b_dunfile(window))

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    199.0,
    402.0,
    image=image_image_11
)

canvas.create_text(
    135.0,
    412.0,
    anchor="nw",
    text=f"Available Today: {b_rank}",
    fill="#FFFFFF",
    font=("Montserrat Medium", 11 * -1)
)

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    81.0,
    498.8565673828125,
    image=image_image_12
)

canvas.tag_bind(image_12, "<ButtonPress-1>", lambda event: dungeonbk.open_a_dunfile(window))

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    199.0,
    492.0,
    image=image_image_13
)

canvas.create_text(
    135.0,
    501.0,
    anchor="nw",
    text=f"Available Today: {a_rank}",
    fill="#FFFFFF",
    font=("Montserrat Medium", 11 * -1)
)

image_image_14 = PhotoImage(
    file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(
    81.0,
    585.6975708007812,
    image=image_image_14
)

canvas.tag_bind(image_14, "<ButtonPress-1>", lambda event: dungeonbk.open_s_dunfile(window))

image_image_15 = PhotoImage(
    file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(
    198.0,
    579.0,
    image=image_image_15
)

canvas.create_text(
    135.0,
    588.0,
    anchor="nw",
    text=f"Available Today: {s_rank}",
    fill="#FFFFFF",
    font=("Montserrat Medium", 11 * -1)
)

side = PhotoImage(file=relative_to_assets("blue.png"))
if job.upper()!="NONE":
    side = PhotoImage(file=relative_to_assets("purple.png"))
canvas.create_image(-15.0, 348.0, image=side)
canvas.create_image(490.0, 351.0, image=side)

canvas.create_rectangle(
    0.0,
    27.0,
    101.0,
    21.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    -10.0,
    645.0,
    494.0,
    716.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    488.0,
    34.0,
    fill=transp_clr,
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (81, 640))
canvas.create_image(-5.0, 360.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (42, 635))
canvas.create_image(455.0, 340.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    240.0,
    27.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    240.0,
    660.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

# Start the animation
if setting_data["Settings"]["Performernce (ANIME):"] != "True":
    update_thread = threading.Thread(target=update_images)
    update_thread.start()

# =================================================================

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_1.place(
    x=411.0,
    y=63.3824462890625,
    width=20.0,
    height=20.0
)

image_image_20 = PhotoImage(
    file=relative_to_assets("image_20.png"))
image_20 = canvas.create_image(
    366.0,
    537.0,
    image=image_image_20
)

canvas.tag_bind(image_20, "<ButtonPress-1>", lambda event: dungeonbk.instance_dungeon(window))

image_image_21 = PhotoImage(
    file=relative_to_assets("image_21.png"))
image_21 = canvas.create_image(
    366.0,
    597.0,
    image=image_image_21
)

image_image_22 = PhotoImage(
    file=relative_to_assets("image_22.png"))
image_22 = canvas.create_image(
    247.0,
    75.0,
    image=image_image_22
)

canvas.tag_bind(image_22, "<ButtonPress-1>", lambda event: thesystem.system.info_open("Dungeons"))

window.resizable(False, False)
window.mainloop()
