
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Checkbutton, IntVar, ttk, StringVar
import ujson
import csv
import subprocess
import threading
from PIL import Image, ImageTk
from datetime import datetime, timedelta
import pandas as pd
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.settings as settings

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

with open("Files/Player Data/Tabs.json",'r') as tab_son:
    tab_son_data=ujson.load(tab_son)

with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
    tab_son_data["Settings"]='Open'
    ujson.dump(tab_son_data,fin_tab_son,indent=4)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

initial_height = 0
target_height = 666
window_width = 475

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.animate_window_open(window, target_height, window_width, step=35, delay=1)

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

stop_event=threading.Event()

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window,transp_clr)

with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (490, 34), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (490, 34), job, type_="bottom")

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

checkbox_var0 = IntVar(value=0)
checkbox_var2 = IntVar(value=0)
checkbox_var3 = IntVar(value=0)

with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

checkbox_var3 = IntVar(value=1 if setting_data["Settings"].get("Main_Penalty", "False") == "True" else 0)
checkbox_var2 = IntVar(value=1 if setting_data["Settings"].get("Performernce (ANIME)", "False") == "True" else 0)
checkbox_var0 = IntVar(value=1 if setting_data["Settings"].get("Main_Penalty", "False") == "True" else 0)

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event): 
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def is_valid_decimal(new_value):
    if new_value == "":
        return True  # allow clearing the field
    try:
        float(new_value)
        return True
    except ValueError:
        return False

def is_valid_decimal_non(new_value):
    if new_value == "":
        return True  # allow clearing the field
    try:
        if float(new_value)<0:
            return False
        if float(new_value)>1:
            return False
        float(new_value)
        return True
    except ValueError:
        return False


def ex_close(win):
    if setting_data["Settings"]["Performernce (ANIME):"] != "True":
        stop_event.set()
        update_thread.join()
    with open("Files/Player Data/Tabs.json",'r') as tab_son:
        tab_son_data=ujson.load(tab_son)

    with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
        tab_son_data["Settings"]='Close'
        ujson.dump(tab_son_data,fin_tab_son,indent=4)
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=20, delay=1)

def theme_open():
    with open("Files/Checks/theme_open.csv", 'w', newline='') as info_open:
        fw=csv.writer(info_open)
        fw.writerow(["True"])
        
    subprocess.Popen(['python', 'First/Theme Check/gui.py'])
    ex_close(window)

def info_open():
    with open("Files/Checks/info_open.csv", 'w', newline='') as info_open:
        fw=csv.writer(info_open)
        fw.writerow(["True"])

    subprocess.Popen(['python', 'First/Info/gui.py'])
    ex_close(window)

def dailys_open():
    with open("Files/Checks/daily_open.csv", 'w', newline='') as info_open:
        fw=csv.writer(info_open)
        fw.writerow(["True"])

    subprocess.Popen(['python', 'First/Daily Quest Tweak/gui.py'])
    ex_close(window)

def penalty_open():
    with open("Files/Checks/penalty_open.csv", 'w', newline='') as info_open:
        fw=csv.writer(info_open)
        fw.writerow(["True"])

    subprocess.Popen(['python', 'First/Penalty Tweak/gui.py'])
    ex_close(window)

def apply_changes():
    subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
    with open("Files/Player Data/Settings.json", 'r') as settings_open:
        setting_data=ujson.load(settings_open)
    setting_data["Settings"]["Transparency"] = float(entry_3.get())
    with open("Files/Player Data/Settings.json", 'w') as settings_open:
        ujson.dump(setting_data, settings_open, indent=4)

unchecked_image = PhotoImage(file="assets/frame0/Off.png")
checked_image  = PhotoImage(file="assets/frame0/On.png")

vcmd_dec_non = window.register(is_valid_decimal_non)

vcmd_dec = window.register(is_valid_decimal)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 666,
    width = 475,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)
canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    383.0,
    413.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    normal_font_col=pres_file_data["Anime"]["Normal Font Color"]
    video_path=pres_file_data["Anime"][video]
    preloaded_frames = np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 478.0, 330.0, resize_factor=0.8, pause_duration=0.3)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    238.0,
    344.272216796875,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    145.0,
    84.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    240.0,
    365.0,
    image=image_image_4
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: theme_open(),
    relief="flat"
)
button_1.place(
    x=73.0,
    y=148.0,
    width=156.0,
    height=34.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: info_open(),
    relief="flat"
)
button_2.place(
    x=73.0,
    y=194.0,
    width=156.0,
    height=34.0
)

button_image_30 = PhotoImage(
    file=relative_to_assets("dailys.png"))
button_30 = Button(
    image=button_image_30,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: dailys_open(),
    relief="flat"
)
button_30.place(
    x=246.0,
    y=148.0,
    width=156.0,
    height=34.0
)

button_image_40 = PhotoImage(
    file=relative_to_assets("penalty.png"))
button_40 = Button(
    image=button_image_40,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: penalty_open(),
    relief="flat"
)
button_40.place(
    x=246.0,
    y=194.0,
    width=156.0,
    height=34.0
)

side = PhotoImage(file=relative_to_assets("blue.png"))
if job.upper()!="NONE":
    side = PhotoImage(file=relative_to_assets("purple.png"))
canvas.create_image(-15.0, 348.0, image=side)
canvas.create_image(490.0, 351.0, image=side)

canvas.create_rectangle(
    0.0,
    27.0,
    101.0,
    21.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    -10.0,
    645.0,
    494.0,
    716.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    488.0,
    34.0,
    fill=transp_clr,
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (81, 640))
canvas.create_image(-5.0, 360.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (42, 635))
canvas.create_image(455.0, 340.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    240.0,
    27.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    240.0,
    660.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

# Start the animation
if setting_data["Settings"]["Performernce (ANIME):"] != "True":
    update_thread = threading.Thread(target=update_images)
    update_thread.start()

# =================================================================

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_3.place(
    x=411.0,
    y=63.3824462890625,
    width=20.0,
    height=20.0
)

canvas.create_text(
    73.0,
    260.0,
    anchor="nw",
    text="Have Penalty for Daily Quests:",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 11 * -1)
)

checkbox = Checkbutton(
    window,
    variable=checkbox_var0,
    command= lambda: settings.settings_ope(checkbox_var0, checkbox_var0, checkbox_var2, checkbox_var3),
    image=unchecked_image,
    selectimage=checked_image,
    compound="center",       # Place the image to the left of the text
    indicatoron=False,       # Hide the default checkbox indicator
    bd=0,
    highlightthickness=0,    # Remove the focus highlight around the widget
    padx=0,                  # Remove internal horizontal padding
    pady=0
)

# Position the checkbox using place
checkbox.place(x=317, y=266-5, width=14, height=14)
# Position the checkbox using place

canvas.create_text(
    73.0,
    334.0-34,
    anchor="nw",
    text="Transparency Value (0.1 t0 1.0) : ",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 11 * -1)
)

entry_3 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0,
    validate="key",
    validatecommand=(vcmd_dec_non, '%P')
)
entry_3.place(
    x=317.0,
    y=300.0,
    width=50.0,
    height=18.0
)


canvas.create_text(
    73.0,
    334.0,
    anchor="nw",
    text="High Performance for Anime Version:",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 11 * -1)
)

checkbox2 = Checkbutton(
    window,
    variable=checkbox_var2,
    command= lambda: settings.settings_ope(checkbox_var2, checkbox_var0, checkbox_var2, checkbox_var3),
    image=unchecked_image,
    selectimage=checked_image,
    compound="center",       # Place the image to the left of the text
    indicatoron=False,       # Hide the default checkbox indicator
    bd=0,
    highlightthickness=0,    # Remove the focus highlight around the widget
    padx=0,                  # Remove internal horizontal padding
    pady=0
)

# Position the checkbox using place
checkbox2.place(x=317, y=342-8, width=14, height=14)

canvas.create_text(
    73.0,
    334.0+34,
    anchor="nw",
    text="Voice Control : ",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 11 * -1)
)

checkbox3 = Checkbutton(
    window,
    variable=checkbox_var3,
    command= lambda: settings.settings_ope(checkbox_var2, checkbox_var0, checkbox_var2, checkbox_var3),
    image=unchecked_image,
    selectimage=checked_image,
    compound="center",       # Place the image to the left of the text
    indicatoron=False,       # Hide the default checkbox indicator
    bd=0,
    highlightthickness=0,    # Remove the focus highlight around the widget
    padx=0,                  # Remove internal horizontal padding
    pady=0
)

# Position the checkbox using place
checkbox3.place(x=317, y=342-8+(73/2), width=14, height=14)

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: apply_changes(),
    relief="flat"
)
button_6.place(
    x=258.0,
    y=581.0,
    width=160.0,
    height=27.0
)

window.resizable(False, False)
window.mainloop()
