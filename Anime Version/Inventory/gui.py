# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import json
import csv
import subprocess
import cv2
from PIL import Image, ImageTk
import threading
import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

with open("Files/Tabs.json",'r') as tab_son:
    tab_son_data=json.load(tab_son)

with open("Files/Tabs.json",'w') as fin_tab_son:
    tab_son_data["Inventory"]='Open'
    json.dump(tab_son_data,fin_tab_son,indent=4)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

initial_height = 0
target_height = 592
window_width = 855

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.make_window_transparent(window)
subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])
thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(win):
    with open("Files/Tabs.json",'r') as tab_son:
        tab_son_data=json.load(tab_son)

    with open("Files/Tabs.json",'w') as fin_tab_son:
        tab_son_data["Inventory"]='Close'
        json.dump(tab_son_data,fin_tab_son,indent=4)
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files\Mod\default\sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=50, delay=1)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 592,
    width = 855,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    479.0,
    364.0,
    image=image_image_1
)

with open("Files\Mod\presets.json", 'r') as pres_file:
    pres_file_data=json.load(pres_file)
    video_path=pres_file_data["Anime"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 479.0, 364.0)
 
image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    470.0,
    311.0,
    image=image_image_2
)

canvas.create_rectangle(
    23.0,
    160.0,
    832.0,
    497.0,
    fill="#2E2E2E",
    outline="")

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    46.0,
    147.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    433.0,
    117.0,
    image=image_image_4
)

with open("Files/Inventory.json", 'r') as fson:
    data=json.load(fson)

rol=list(data.keys())

button_images = []
item_images = []

x_start, y_start = 49, 171
spacing_x, spacing_y = 100, 100
buttons_per_row = 8

def create_inventory_item(canvas, window, item_data, x, y):
    tr_n = item_data.get('name', '')
    name = item_data.get('tr_n', '')
    qt = item_data.get('qty', '')
    cat = item_data.get('cat', '')
    r = item_data.get('rank', '')
    d = item_data.get('desc', '')
    b = item_data.get('buff', '')
    db = item_data.get('debuff', '')

    # Load button image
    button_image = thesystem.system.get_inventory_button_image(tr_n)
    button_images.append(button_image)  # Prevent garbage collection

    button = Button(
        image=button_image,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: (thesystem.system.inventory_item_data(tr_n, r, cat, d, b, db, window),ex_close(window)),
        relief="flat"
    )
    button.place(x=x, y=y, width=68, height=82)

    # Load item image and add to canvas
    item_image = PhotoImage(file=relative_to_assets("image_5.png"))
    item_images.append(item_image)  # Prevent garbage collection
    canvas.create_image(x - 7, y + 42, image=item_image)

    # Background rectangle and text
    canvas.create_rectangle(x - 20, y + 84, x + 73, y + 98, fill="#3B3B3B", outline="")
    canvas.create_text(x - 20, y + 85, anchor="nw", text=name, fill="#FFFFFF", font=("Montserrat Medium", 10 * -1))
    canvas.create_text(x + 7, y + 68, anchor="nw", text=qt, fill="#FFFFFF", font=("Montserrat Medium", 10 * -1))

for i, key in enumerate(rol[:24]):
    item_data = {
        "name": key,
        "tr_n":thesystem.system.inventory_name_cut(key),
        "qty": data[key][0].get('qty', ''),
        "cat": data[key][0].get('cat', ''),
        "rank": data[key][0].get('rank', ''),
        "desc": data[key][0].get('desc', ''),
        "buff": data[key][0].get('buff', ''),
        "debuff": data[key][0].get('debuff', '')
    }
    x = x_start + (i % buttons_per_row) * spacing_x
    y = y_start + (i // buttons_per_row) * spacing_y
    create_inventory_item(canvas, window, item_data, x, y)


'''button_image_25 = PhotoImage(
#    file=relative_to_assets("button_25.png"))
#button_25 = Button(
#    image=button_image_25,
#    borderwidth=0,
#    highlightthickness=0,
#    command=lambda: subprocess.Popen(['python', 'Anime Version/Inventory Addition/gui.py']),
#    relief="flat"
#)
#button_25.place(
#    x=793.0,
#    y=124.0,
#    width=33.0,
#    height=33.0
#)'''

canvas.create_rectangle(
    0.0,
    0.0,
    299.0,
    26.0,
    fill="#0c679b",
    outline="")

canvas.create_rectangle(
    -60.0,
    552.0,
    990.0,
    592.0,
    fill="#0c679b",
    outline="")

image_image_29 = PhotoImage(
    file=relative_to_assets("image_29.png"))
image_29 = canvas.create_image(
    -10.0,
    283.77264404296875,
    image=image_image_29
)

image_image_30 = PhotoImage(
    file=relative_to_assets("image_30.png"))
image_30 = canvas.create_image(
    851.018310546875,
    308.69981384277344,
    image=image_image_30
)

canvas.create_rectangle(
    187.0,
    0.0,
    910.0,
    38.0,
    fill="#0c679b",
    outline="")

image_image_31 = PhotoImage(
    file=relative_to_assets("image_31.png"))
image_31 = canvas.create_image(
    427.0,
    22.0,
    image=image_image_31
)

canvas.tag_bind(image_31, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_31, "<B1-Motion>", move_window)

image_image_32 = PhotoImage(
    file=relative_to_assets("image_32.png"))
image_32 = canvas.create_image(
    427.0,
    555.0,
    image=image_image_32
)

button_image_26 = PhotoImage(
    file=relative_to_assets("button_26.png"))
button_26 = Button(
    image=button_image_26,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_26.place(
    x=806.0,
    y=64.0,
    width=20.0,
    height=20.0
)

window.resizable(False, False)
window.mainloop()