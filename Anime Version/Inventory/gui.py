# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import csv
import subprocess
import cv2
from PIL import Image, ImageTk
import threading
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.inventory

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

with open("Files/Player Data/Tabs.json",'r') as tab_son:
    tab_son_data=ujson.load(tab_son)

with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
    tab_son_data["Inventory"]='Open'
    ujson.dump(tab_son_data,fin_tab_son,indent=4)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

stop_event=threading.Event()

initial_height = 0
target_height = 592
window_width = 855

window.geometry(f"{window_width}x{initial_height}")
job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window,transp_clr)

with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

thesystem.system.animate_window_open(window, target_height, window_width, step=40, delay=1)

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

# Preload top and bottom images
top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (970, 40), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (970, 40), job, type_="bottom")

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(win):
    if setting_data["Settings"]["Performernce (ANIME):"] != "True":
        stop_event.set()
        update_thread.join()

    with open("Files/Player Data/Tabs.json",'r') as tab_son:
        tab_son_data=ujson.load(tab_son)

    with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
        tab_son_data["Inventory"]='Close'
        ujson.dump(tab_son_data,fin_tab_son,indent=4)
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=50, delay=1)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 592,
    width = 855,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    479.0,
    364.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Anime"][video]
    preloaded_frames=np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 479.0, 364.0, pause_duration=0.5)
 
image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    470.0,
    311.0,
    image=image_image_2
)

canvas.create_rectangle(
    23.0,
    160.0,
    832.0,
    497.0,
    fill="#2E2E2E",
    outline="")

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    46.0,
    147.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    433.0,
    117.0,
    image=image_image_4
)

with open("Files/Player Data/Inventory.json", 'r') as fson:
    data=ujson.load(fson)

rol=list(data.keys())

button_images = []
item_images = []

x_start, y_start = 49, 171
spacing_x, spacing_y = 100, 100
buttons_per_row = 8

image5=relative_to_assets("image_5.png")

for i, key in enumerate(rol[:24]):
    item_data = {
        "name": key,
        "tr_n":thesystem.inventory.inventory_name_cut(key),
        "qty": data[key][0].get('qty', ''),
        "cat": data[key][0].get('cat', ''),
        "rank": data[key][0].get('rank', ''),
        "desc": data[key][0].get('desc', ''),
        "buff": data[key][0].get('buff', ''),
        "debuff": data[key][0].get('debuff', '')
    }
    x = x_start + (i % buttons_per_row) * spacing_x
    y = y_start + (i // buttons_per_row) * spacing_y
    thesystem.inventory.create_inventory_item(canvas, window, item_data, x, y, button_images, item_images, image5)


'''button_image_25 = PhotoImage(
#    file=relative_to_assets("button_25.png"))
#button_25 = Button(
#    image=button_image_25,
#    borderwidth=0,
#    highlightthickness=0,
#    command=lambda: subprocess.Popen(['python', 'Anime Version/Inventory Addition/gui.py']),
#    relief="flat"
#)
#button_25.place(
#    x=793.0,
#    y=124.0,
#    width=33.0,
#    height=33.0
#)'''

side = PhotoImage(file=relative_to_assets("blue.png"))
if job.upper()!="NONE":
    side = PhotoImage(file=relative_to_assets("purple.png"))
canvas.create_image(-10.0, 283.0, image=side)
canvas.create_image(851.0, 308.0, image=side)

canvas.create_rectangle(
    0.0,
    0.0,
    101.0,
    21.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    520.0,
    1000.0,
    716.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    1000.0,
    34.0,
    fill=transp_clr,
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (101, 520))
canvas.create_image(-13.0, 280.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (80, 500))
canvas.create_image(851.0, 280.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    472.0,
    20.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    427.0,
    530.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

# Start the animation
if setting_data["Settings"]["Performernce (ANIME):"] != "True":
    update_thread = threading.Thread(target=update_images)
    update_thread.start()

# =========================================================================================================


button_image_26 = PhotoImage(
    file=relative_to_assets("button_26.png"))
button_26 = Button(
    image=button_image_26,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_26.place(
    x=806.0,
    y=64.0,
    width=20.0,
    height=20.0
)

window.resizable(False, False)
window.mainloop()