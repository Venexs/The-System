# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# Fork by Venexs


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import csv
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import sys
import os
import numpy as np
import json

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.misc as misc


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    get_stuff_path_str=pres_file_data["Anime"]["Default"]

def get_stuff_path(key):
    full_path=get_stuff_path_str+'/'+key
    return full_path

window = Tk()
stop_event=threading.Event()

initial_height = 0
target_height = 449
window_width = 696

window.geometry(f"{window_width}x{initial_height}")

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window,transp_clr)

thesystem.system.center_window(window,window_width,target_height)
thesystem.system.animate_window_open(window, target_height, window_width, step=50, delay=1)


with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (695, 39), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (702, 36), job, type_="bottom")

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(win):
    with open("Files/Player Data/Tabs.json",'r') as tab_son:
        tab_son_data=ujson.load(tab_son)

    with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
        tab_son_data["Intro"]='Close'
        ujson.dump(tab_son_data,fin_tab_son,indent=4)
        
    if setting_data["Settings"]["Performernce (ANIME):"] != "True":
        stop_event.set()
        update_thread.join()
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=20, delay=1)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 449,
    width = 696,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=get_stuff_path("backgroud.png"))
image_1 = canvas.create_image(
    609.0,
    301.0,
    image=image_image_1
)

pres_file_data=misc.load_ujson("Files/Mod/presets.json")
video_path=pres_file_data["Anime"][video]
preloaded_frames = np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 478, 313)

image_image_2 = PhotoImage(
    file=get_stuff_path("frame.png"))
image_2 = canvas.create_image(
    348.0,
    233.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=get_stuff_path("alert.png"))
image_3 = canvas.create_image(
    379.0,
    94.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=get_stuff_path("!.png"))
image_4 = canvas.create_image(
    186.0,
    94.0,
    image=image_image_4
)

button_image_2 = PhotoImage(
    file=get_stuff_path("close.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_2.place(
    x=564.0,
    y=52.0,
    width=23,
    height=23,
)

with open("Files/Temp Files/Rank file.csv", "r") as f:
    reader = csv.reader(f)
    for row in reader:
        if len(row) == 1:
            old_lvl = int(row[0])
            status_data = misc.load_ujson("Files/Player Data/Status.json")
            name = status_data["status"][0]["name"]
            level = status_data["status"][0]["level"]
            
            text_id = canvas.create_text(
                0,  # Temporary X position
                155.0,
                anchor="nw",
                text=f"[{name}] has been promoted!",
                fill="#FFFFFF",
                font=("Montserrat Regular", 13 * -1)
            )

            # Window A
                        
            old_rank=thesystem.system.give_ranking(old_lvl)
            new_rank=thesystem.system.give_ranking(level)
                

            text_id = canvas.create_text(
                0,  # Temporary X position
                201.0,
                anchor="nw",
                text=F"[{old_rank} Rank]   Lv.{old_lvl}",
                fill="#FFFFFF",
                font=("Montserrat Regular", 15 * -1)
            )

            # Ensure the text is drawn before getting its bounding box
            canvas.update_idletasks()

            # Get text width
            text_bbox = canvas.bbox(text_id)
            text_width = text_bbox[2] - text_bbox[0]

            # Get canvas width and calculate centered X position
            canvas_width = canvas.winfo_width()
            center_x = (canvas_width - text_width) / 2

            # Move text to the centered position
            canvas.coords(text_id, center_x, 201.0)

            # Window B
            text_id = canvas.create_text(
                0,  # Temporary X position
                277.0,
                anchor="nw",
                text=f"[{new_rank} Rank]   Lv.{level}",
                fill="#00FF2A",
                font=("Montserrat Bold", 15 * -1)
            )

            # Get text bounding box
            canvas.update_idletasks()  # Ensure the text is drawn
            text_bbox = canvas.bbox(text_id)
            text_width = text_bbox[2] - text_bbox[0]

            # Get canvas width and calculate centered X position
            canvas_width = canvas.winfo_width()
            center_x = (canvas_width - text_width) / 2

            # Move text to the new position
            canvas.coords(text_id, center_x, 277.0)


        elif len(row) > 1:
            name_of_skill = row[0]
            old_level = row[1]
            # Get new level from Skill.json
            with open("Files/Player Data/Skill.json", "r") as skill_file:
                skills = json.load(skill_file)
            new_level = None
            if name_of_skill in skills:
                new_level = skills[name_of_skill][0].get("lvl", None)
            # Display skill level up message
            if new_level is not None:
                skill_text_id = canvas.create_text(
                    0,  # Temporary X position
                    155.0,
                    anchor="nw",
                    text=f"Skill [{name_of_skill}] leveled up!",
                    fill="#FFD700",
                    font=("Montserrat Bold", 13 * -1)
                )
                canvas.update_idletasks()
                text_bbox = canvas.bbox(skill_text_id)
                text_width = text_bbox[2] - text_bbox[0]
                canvas_width = canvas.winfo_width()
                center_x = (canvas_width - text_width) / 2
                canvas.coords(skill_text_id, center_x, 320.0)

                text_id = canvas.create_text(
                    0,  # Temporary X position
                    201.0,
                    anchor="nw",
                    text=F"[{name_of_skill}]   Lv.{old_level}",
                    fill="#FFFFFF",
                    font=("Montserrat Regular", 15 * -1)
                )

                # Ensure the text is drawn before getting its bounding box
                canvas.update_idletasks()

                # Get text width
                text_bbox = canvas.bbox(text_id)
                text_width = text_bbox[2] - text_bbox[0]

                # Get canvas width and calculate centered X position
                canvas_width = canvas.winfo_width()
                center_x = (canvas_width - text_width) / 2

                # Move text to the centered position
                canvas.coords(text_id, center_x, 201.0)

                # Window B
                text_id = canvas.create_text(
                    0,  # Temporary X position
                    277.0,
                    anchor="nw",
                    text=f"[{name_of_skill}]   Lv.{new_level}",
                    fill="#00FF2A",
                    font=("Montserrat Bold", 15 * -1)
                )

                # Get text bounding box
                canvas.update_idletasks()  # Ensure the text is drawn
                text_bbox = canvas.bbox(text_id)
                text_width = text_bbox[2] - text_bbox[0]

                # Get canvas width and calculate centered X position
                canvas_width = canvas.winfo_width()
                center_x = (canvas_width - text_width) / 2

                # Move text to the new position
                canvas.coords(text_id, center_x, 277.0)

# Ensure the text is drawn before getting its bounding box
canvas.update_idletasks()

# Get text width
text_bbox = canvas.bbox(text_id)
text_width = text_bbox[2] - text_bbox[0]

# Get canvas width and calculate centered X position
canvas_width = canvas.winfo_width()
center_x = (canvas_width - text_width) / 2

# Move text to the centered position
canvas.coords(text_id, center_x, 155.0)


image_image_5 = PhotoImage(
    file=get_stuff_path("old rank box.png"))
image_5 = canvas.create_image(
    348.0,
    211.0,
    image=image_image_5
)

image_image_60 = PhotoImage(
    file=get_stuff_path("rank up.png"))
image_6 = canvas.create_image(
    348.0,
    251.0,
    image=image_image_60
)


image_image_6 = PhotoImage(
    file=get_stuff_path("new rank box.png"))
image_6 = canvas.create_image(
    347.0,
    287.0,
    image=image_image_6
)


canvas.create_rectangle(
    0.0,
    0.0,
    696.0,
    29.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    5.0,
    60.0,
    455.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    647.0,
    0.0,
    696.0,
    458.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    119.0,
    0.0,
    381.0,
    38.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    56.0,
    421.0,
    923.0,
    460.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    50.0,
    19.0,
    643.0,
    44.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    137.0,
    -10.0,
    765.0,
    50.0,
    fill=transp_clr,
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (47, 393))
canvas.create_image(33.0, 235.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (46, 385))
canvas.create_image(666.0, 235.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    348.0,
    29.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    357.0,
    437.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

update_thread = threading.Thread(target=update_images)
update_thread.start()
window.resizable(False, False)
window.mainloop()
