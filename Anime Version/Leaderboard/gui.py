
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label, Listbox, Scrollbar, Frame, Y, TOP, BOTH, X
import threading
import json
import csv
import subprocess
import time
import cv2
from PIL import Image, ImageTk
from datetime import datetime, timedelta
import pandas as pd
import sys
import math
import os
from supabase import create_client, Client
import asyncio
from datetime import date
import random
from dotenv import load_dotenv, set_key
from dotenv import load_dotenv, set_key
from infisical_client import ClientSettings, InfisicalClient, GetSecretOptions, AuthenticationOptions, UniversalAuthMethod

client = InfisicalClient(ClientSettings(
    auth=AuthenticationOptions(
        universal_auth=UniversalAuthMethod(
            client_id="0fa8dbf8-92ee-4889-bd48-1b5dd2d22e87",
            client_secret="a2c9a58bda26c914e333e6c0f7c35e019b30c3afa67b5dc8419a142ee8b2aec8",
        )
    )
))


def get_url():
    # access value
    name = client.getSecret(options=GetSecretOptions(
        environment="dev",
        project_id="a7b312a2-feb6-42bc-92cb-387e37463076",
        secret_name="SUPABASE_URL"
    ))
    return f"{name.secret_value}"
def get_key():
    # access value
    name = client.getSecret(options=GetSecretOptions(
        environment="dev",
        project_id="a7b312a2-feb6-42bc-92cb-387e37463076",
        secret_name="SUPABASE_KEY"
    ))
    return f"{name.secret_value}"

URL = get_url()
KEY = get_key()

supabase: Client = create_client(URL, KEY)

current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, '../../'))
sys.path.insert(0, project_root)

import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")
window = Tk()
window.geometry("488x0")  # Initial collapsed height
window.configure(bg="#FFFFFF")
window.attributes('-alpha', 0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)
thesystem.system.make_window_transparent(window)

# Animate window open
window_width = 488
target_height = 716
subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])
thesystem.system.animate_window_open(window, target_height, window_width, step=40, delay=1)

# Load JSON data once to reduce file I/O
def load_json(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

status_data = load_json("Files/status.json")
presets_data = load_json("Files/Mod/presets.json")

# Helper Functions
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def start_move(event):
    global lastx, lasty
    lastx, lasty = event.x_root, event.y_root

def move_window(event):
    global lastx, lasty
    x = window.winfo_x() + (event.x_root - lastx)
    y = window.winfo_y() + (event.y_root - lasty)
    window.geometry(f"+{x}+{y}")
    lastx, lasty = event.x_root, event.y_root

# Update and Close Functions
def ex_close(event=None):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=20, delay=1)

# Initialize Canvas and Widgets
canvas = Canvas(window, bg="#FFFFFF", height=716, width=488, bd=0, highlightthickness=0, relief="ridge")
canvas.place(x=0, y=0)

# Load images once to avoid redundant processing
images = {
    "background": PhotoImage(file=relative_to_assets("image_1.png")),
    "stats": [
        PhotoImage(file=relative_to_assets(f"image_{i}.png")) for i in range(2, 6)
    ]
}

# Background image and character attributes
canvas.create_image(430.0, 363.0, image=images["background"])
player = thesystem.system.VideoPlayer(canvas, presets_data["Anime"]["Video"], 430.0, 363.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    230.0,
    367.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    150.0,
    117.0,
    image=image_image_3
)

canvas.create_rectangle(
    0.0,
    0.0,
    101.0,
    21.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    0.0,
    678.0,
    494.0,
    716.0,
    fill="#0C679B",
    outline="")

image_image_19 = PhotoImage(
    file=relative_to_assets("image_19.png"))
image_19 = canvas.create_image(
    -15.0,
    348.0,
    image=image_image_19
)

image_image_20 = PhotoImage(
    file=relative_to_assets("image_20.png"))
image_20 = canvas.create_image(
    462.0,
    351.0,
    image=image_image_20
)

canvas.create_rectangle(
    92.0,
    0.0,
    488.0,
    34.0,
    fill="#0C679B",
    outline="")

button_image_8 = PhotoImage(
    file=relative_to_assets("button_8.png"))
button_8 = Button(
    image=button_image_8,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_8.place(
    x=390.0,
    y=55.0,
    width=20.0,
    height=20.0
)

image_image_21 = PhotoImage(
    file=relative_to_assets("image_21.png"))
image_21 = canvas.create_image(
    244.0,
    (19),
    image=image_image_21
)

canvas.tag_bind(image_21, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_21, "<B1-Motion>", move_window)

image_image_22 = PhotoImage(
    file=relative_to_assets("image_22.png"))
image_22 = canvas.create_image(
    295.0,
    680,
    image=image_image_22
)


SESSION_FILE = "Files/Data/session.json"

def load_session():
    """Load session data from the session file."""
    if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:
        with open(SESSION_FILE, "r") as f:
            session_data = json.load(f)
            if all(key in session_data for key in ["access_token", "refresh_token", "expires_in"]):
                return session_data

session = load_session()


table_name = "status"  # Replace with the actual table name
name_column = "name"  # Replace with the actual name column name
level_column = "level"  # Replace with the actual level column name


def get_all_names_and_levels(table_name, name_column, level_column, users_table="status", username_column="name"):
    try:
        # Get the current authenticated user's username
        user_response = supabase.auth.get_user(session["access_token"])  # Using sync call
        if user_response and user_response.user:
            current_user_id = user_response.user.id

            # Fetch the current user's status to get the username
            user_status = supabase.table(users_table) \
                .select(username_column) \
                .eq("user_id", current_user_id) \
                .single() \
                .execute()

            if user_status.data:  # Access the 'data' attribute directly
                current_username = user_status.data[username_column]
                print(f"Current username: {current_username}")  # Debugging

                # Query to exclude the current user's username and fetch name and level
                response = supabase.table(table_name) \
                    .select(f"{name_column}, {level_column}") \
                    .order(level_column, desc=True) \
                    .execute()

                if response.data:  # Check if data is returned
                    names_and_levels = [
                        (row[level_column], row[name_column]) for row in response.data
                    ]
                    print(f"Names and levels retrieved: {names_and_levels}")  # Log the results
                    return names_and_levels
                else:
                    print(f"No data found in table {table_name}")
                    return []
            else:
                print("Unable to fetch current user's username.")
                return []
        else:
            print("No user is authenticated.")
            return []  # Return an empty list if no user is logged in
    except Exception as e:
        print(f"An error occurred: {e}")
        subprocess.Popen(["python", "Logs/Start/gui.py"])
        quit()
        return []  # Return an empty list on error


def main():
    global names_and_levels
    names_and_levels = get_all_names_and_levels(table_name, name_column, level_column)


main()
listbox_container = Frame(window)
listbox_container.pack(side="top", fill="y", expand=True, padx=(0, 40), pady=150)

# Configure the Frame to not propagate its size to the Listbox
listbox_container.pack_propagate(False)
listbox_container.config(width=350)  # Set the desired width for the Frame

# Populate the listbox
listbox = Listbox(
    listbox_container,  # Place the Listbox inside the Frame
    bg='#010616',
    width=350,  # Set the desired width for the Listbox (will be constrained by the Frame)
    height=10,  # Set an initial height - it will expand with fill="y"
    highlightthickness=0,
    bd=0,
    selectmode="single",  # Disables selection mode
    font=("Montserrat Bold", 12),
    fg="white",  # Set the font color to white (or any color you prefer)
    activestyle="none",
)

listbox.pack(side="right", fill="y", expand=True, anchor="center") # Pack the Listbox to the RIGHT

scrollbar = Scrollbar(listbox_container, command=listbox.yview)
scrollbar.pack(side="left", fill="y", padx=(0, 5))  # Pack the Scrollbar to the LEFT

listbox.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=listbox.yview)

# Insert names with levels into the listbox
for level, name in names_and_levels:
    listbox.insert("end", f"Level {level}: {name}")
    
listbox.config(selectbackground="skyblue", selectforeground="black")  # Customize selection color


window.resizable(False, False)
window.mainloop()
