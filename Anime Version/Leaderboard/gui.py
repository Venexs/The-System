
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import asyncio
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label, Listbox, Scrollbar
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import json
import time
import sys
import os
from supabase import create_client, Client
import asyncio
from datetime import date
import random
from dotenv import load_dotenv, set_key
from dotenv import load_dotenv, set_key
from infisical_client import ClientSettings, InfisicalClient, GetSecretOptions, AuthenticationOptions, UniversalAuthMethod

client = InfisicalClient(ClientSettings(
    auth=AuthenticationOptions(
        universal_auth=UniversalAuthMethod(
            client_id="0fa8dbf8-92ee-4889-bd48-1b5dd2d22e87",
            client_secret="a2c9a58bda26c914e333e6c0f7c35e019b30c3afa67b5dc8419a142ee8b2aec8",
        )
    )
))


def get_url():
    # access value
    name = client.getSecret(options=GetSecretOptions(
        environment="dev",
        project_id="a7b312a2-feb6-42bc-92cb-387e37463076",
        secret_name="SUPABASE_URL"
    ))
    return f"{name.secret_value}"
def get_key():
    # access value
    name = client.getSecret(options=GetSecretOptions(
        environment="dev",
        project_id="a7b312a2-feb6-42bc-92cb-387e37463076",
        secret_name="SUPABASE_KEY"
    ))
    return f"{name.secret_value}"

URL = get_url()
KEY = get_key()

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

supabase: Client = create_client(URL, KEY)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

initial_height = 0
initial_width = 0
target_height = 431
window_width = 712

thesystem.system.make_window_transparent(window)

window.geometry(f"{initial_width}x{initial_height}")
thesystem.system.animate_window_open_middle(window, target_height, window_width, step=20, delay=1)

thesystem.system.center_window(window,window_width,target_height)
window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.6)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

def animate_window_close(window, target_height, width, step=2, delay=5):
    current_height = window.winfo_height()
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()

    window.geometry(f"{width}x{current_height}+{screen_width//2 - width//2}+{screen_height//2 - current_height//2}")

    if current_height > target_height:
        new_height = max(current_height - step, target_height)
    else:
        new_height = current_height
    
    new_y = screen_height // 2 - new_height // 2
    window.geometry(f"{width}x{new_height}+{screen_width//2 - width//2}+{new_y}")

    if new_height > target_height:
        window.after(delay, animate_window_close, window, target_height, width, step, delay)
    else:
        window.quit()

def ex_close(eve):
    subprocess.Popen(['python', os.path.join(project_root, 'Files/Mod/default/sfx_close.py')])
    animate_window_close(window, initial_height, window_width, step=45, delay=1)


canvas = Canvas(
    window,
    bg = "#0678FF",
    height = 432,
    width = 712,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    356.0,
    216.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    356.0,
    216.0,
    image=image_image_2
)

button_image_20 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_20 = Button(
    image=button_image_20,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_20.place(
    x=655.0,
    y=35.0,
    width=21.20473861694336,
    height=24.221660614013672
)

transparent_image = Image.new('RGBA', (1, 1), (0, 0, 0, 0))  # Create a 1x1 transparent image
transparent_photo = ImageTk.PhotoImage(transparent_image)

# Add this line below the existing canvas placements
opponent_name_text = canvas.create_text(
    350, 0,  # x, y coordinates
    anchor="n",
    text="Leaderboard",
    fill="White",  # Text color
    font=("Montserrat Bold", 14),
)

SESSION_FILE = "Files/Data/session.json"

def load_session():
    """Load session data from the session file."""
    if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:
        with open(SESSION_FILE, "r") as f:
            session_data = json.load(f)
            if all(key in session_data for key in ["access_token", "refresh_token", "expires_in"]):
                return session_data

session = load_session()


table_name = "status"  # Replace with the actual table name
name_column = "name"  # Replace with the actual name column name
level_column = "level"  # Replace with the actual level column name


def get_all_names_and_levels(table_name, name_column, level_column, users_table="status", username_column="name"):
    try:
        # Get the current authenticated user's username
        user_response = supabase.auth.get_user(session["access_token"])  # Using sync call
        if user_response and user_response.user:
            current_user_id = user_response.user.id

            # Fetch the current user's status to get the username
            user_status = supabase.table(users_table) \
                .select(username_column) \
                .eq("user_id", current_user_id) \
                .single() \
                .execute()

            if user_status.data:  # Access the 'data' attribute directly
                current_username = user_status.data[username_column]
                print(f"Current username: {current_username}")  # Debugging

                # Query to exclude the current user's username and fetch name and level
                response = supabase.table(table_name) \
                    .select(f"{name_column}, {level_column}") \
                    .order(level_column, desc=True) \
                    .execute()

                if response.data:  # Check if data is returned
                    names_and_levels = [
                        (row[level_column], row[name_column]) for row in response.data
                    ]
                    print(f"Names and levels retrieved: {names_and_levels}")  # Log the results
                    return names_and_levels
                else:
                    print(f"No data found in table {table_name}")
                    return []
            else:
                print("Unable to fetch current user's username.")
                return []
        else:
            print("No user is authenticated.")
            return []  # Return an empty list if no user is logged in
    except Exception as e:
        print(f"An error occurred: {e}")
        subprocess.Popen(["python", "Logs/Start/gui.py"])
        quit()
        return []  # Return an empty list on error


def main():
    global names_and_levels
    names_and_levels = get_all_names_and_levels(table_name, name_column, level_column)


main()

# Populate the listbox
listbox = Listbox(
    window,
    bg='dodgerblue3',
    width=600,
    height=600,
    highlightcolor="deepskyblue2",
    highlightthickness=2,
    bd=0,
    selectmode="single",  # Disables selection mode
    font=("Montserrat Bold", 12),
    fg="white",  # Set the font color to white (or any color you prefer)
    activestyle="none"
)

listbox.pack(side="bottom", fill="both", expand=True, padx=20, pady=100)

scrollbar = Scrollbar(listbox)
scrollbar.pack(side="right", fill="y")

listbox.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=listbox.yview)

# Insert names with levels into the listbox
for level, name in names_and_levels:
    listbox.insert("end", f"Level {level}: {name}")
    
listbox.config(selectbackground="skyblue", selectforeground="black")  # Customize selection color

window.resizable(False, False)
window.mainloop()
