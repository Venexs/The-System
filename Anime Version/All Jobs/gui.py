
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import json
import csv
import subprocess
import cv2
from PIL import Image, ImageTk

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])

window = Tk()

window.geometry("696x449")
window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

class VideoPlayer:
    def __init__(self, canvas, video_path, x, y, frame_skip=2, resize_factor=0.8):
        self.canvas = canvas
        self.video_path = video_path
        self.cap = cv2.VideoCapture(video_path)
        self.x = x
        self.y = y
        self.frame_skip = frame_skip  # Number of frames to skip
        self.resize_factor = resize_factor  # Factor to resize frames
        self.image_id = self.canvas.create_image(self.x, self.y)
        self.frame_count = 0
        self.update_frame()

    def update_frame(self):
        ret, frame = self.cap.read()
        
        if not ret:
            # If the video has ended, reset the capture object
            self.cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
            ret, frame = self.cap.read()

        if ret:
            self.frame_count += 1
            if self.frame_count % self.frame_skip == 0:  # Skip frames for performance
                frame = cv2.resize(frame, (0, 0), fx=self.resize_factor, fy=self.resize_factor)
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                img = Image.fromarray(frame)
                imgtk = ImageTk.PhotoImage(image=img)
                self.canvas.itemconfig(self.image_id, image=imgtk)
                self.canvas.imgtk = imgtk

        self.canvas.after(10, self.update_frame)

    def __del__(self):
        self.cap.release()

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(win):
    win.quit()

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 449,
    width = 696,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    609.0,
    301.0,
    image=image_image_1
)

with open("Files\Mod\presets.json", 'r') as pres_file:
    pres_file_data=json.load(pres_file)
    video_path=pres_file_data["Anime"]["Video"]
player = VideoPlayer(canvas, video_path, 478.0, 313.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    348.0,
    233.0,
    image=image_image_2
)

def prog():
    canvas.itemconfig("First", state="normal")
    window.after(5000, second)

def second():
    canvas.itemconfig("First", state="hidden")
    canvas.itemconfig("Second", state="normal")
    window.after(5000, third)

def third():
    with open('Files\Skills\Skill.json', 'r') as skill_file:
        skill_file_data=json.load(skill_file)
        skill_file_data["Strength Augmentation"]=[{
            "lvl":1,
            "type":"Job",
            "desc":"You have a Greater Strength Augumentation than the Average Man",
            "pl_point":0,
            
            "base":"STR",
            "rewards":{
                "STRav":10,
                "Gauntlet of the Eternal Guardian":1
            }
        }]

        skill_file_data["Exponential Strength"]=[{
            "lvl":1,
            "type":"Job",
            "desc":"All Strength Gains are faster than they were before. Results show faster as well",
            "pl_point":0,
            
            "base":"STR",
            "rewards":{
                "STRav":10,
                "Amulet of Protection":1
            }
        }]

    with open('Files\Skills\Skill.json', 'w') as fin_skill_file:
        json.dump(skill_file_data, fin_skill_file, indent=6)

    with open("Files/status.json", 'r') as fson:
        data=json.load(fson)
    data["status"][1]['job']="Beserker"

    with open("Files/status.json", 'w') as fson:
        json.dump(data, fson, indent=6)

    canvas.itemconfig("First", state="hidden")
    canvas.itemconfig("Second", state="hidden")
    canvas.itemconfig("Third", state="normal")

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    379.0,
    110.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    186.0,
    110.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    348.0,
    225.0,
    image=image_image_5,
    tags="First",
    state="hidden"
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    347.0,
    225.0,
    image=image_image_6,
    tags="Second",
    state="hidden"
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    347.0,
    225.0,
    image=image_image_7,
    tags="Third",
    state="hidden"
)
image_0=canvas.create_rectangle(
    0.0,
    0.0,
    696.0,
    29.0,
    fill="#333333",
    outline="")

canvas.tag_bind(image_0, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_0, "<B1-Motion>", move_window)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_1.place(
    x=670.0,
    y=3.0,
    width=23.0,
    height=23.0
)

prog()

window.resizable(False, False)
window.mainloop()
