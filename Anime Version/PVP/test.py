
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label, Listbox, Scrollbar
import subprocess
import random
import threading
import cv2
from PIL import Image, ImageTk
import json
import time
from datetime import datetime, timedelta
import time
import sys
import os
from supabase import create_client, Client
import asyncio
from dotenv import load_dotenv, set_key
from infisical_client import ClientSettings, InfisicalClient, GetSecretOptions, AuthenticationOptions, UniversalAuthMethod

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

client = InfisicalClient(ClientSettings(
    auth=AuthenticationOptions(
        universal_auth=UniversalAuthMethod(
            client_id="0fa8dbf8-92ee-4889-bd48-1b5dd2d22e87",
            client_secret="a2c9a58bda26c914e333e6c0f7c35e019b30c3afa67b5dc8419a142ee8b2aec8",
        )
    )
))

reps_count = 0  # Starting count of reps


def get_url():
    # access value
    name = client.getSecret(options=GetSecretOptions(
        environment="dev",
        project_id="a7b312a2-feb6-42bc-92cb-387e37463076",
        secret_name="SUPABASE_URL"
    ))
    return f"{name.secret_value}"
def get_key():
    # access value
    name = client.getSecret(options=GetSecretOptions(
        environment="dev",
        project_id="a7b312a2-feb6-42bc-92cb-387e37463076",
        secret_name="SUPABASE_KEY"
    ))
    return f"{name.secret_value}"

URL = get_url()
KEY = get_key()
SESSION_FILE = "Files/Data/session.json"

supabase: Client = create_client(URL, KEY)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)




# Set the countdown duration to 10 minutes (600 seconds)
countdown_duration = timedelta(minutes=10)

# Function to start the countdown and store it in Supabase
def start_countdown():
    start_time = datetime.now()
    end_time = start_time + countdown_duration

    # Convert datetime objects to ISO 8601 string format before storing
    start_time_str = start_time.isoformat()
    end_time_str = end_time.isoformat()

    # Store start and end times as strings in Supabase
    response = supabase.table("countdowns").insert({
        "start_time": start_time_str,
        "end_time": end_time_str,
        "current_time": start_time_str,  # Initial state of countdown
    }).execute()

    # Log the full response to check its structure
    print(f"Response: {response}")

    # Access the response data correctly
    countdown_data = response.data
    if countdown_data:
        countdown_id = countdown_data[0]['id']
        print(f"Countdown started with ID: {countdown_id}")
        return countdown_id
    else:
        print("No data returned from Supabase insert.")
        return None

# Function to update the countdown from Supabase and display it in the Tkinter canvas
def update_canvas_timer(canvas, opponent_name_text, countdown_id):
    response = supabase.table("countdowns").select("current_time", "end_time").eq("id", countdown_id).execute()
    global WinorLoseText
    if response.data:
        current_time_str = response.data[0]['current_time']
        end_time_str = response.data[0]['end_time']

        # Define a flexible format string to handle potential variations
        format_string = "%Y-%m-%dT%H:%M:%S.%f"  # Adjust format based on Supabase data

        try:
            current_time = datetime.strptime(current_time_str, format_string)
            end_time = datetime.strptime(end_time_str, format_string)
        except ValueError:
            # Handle errors if parsing fails (optional)
            print(f"Error parsing timestamps: {current_time_str}, {end_time_str}")
            # Consider using fallback values or logging the error

        # Calculate remaining time
        remaining_time = end_time - current_time
        remaining_seconds = max(0, remaining_time.total_seconds())  # Don't allow negative countdown

        # Format remaining time as MM:SS
        minutes = int(remaining_seconds // 60)
        seconds = int(remaining_seconds % 60)
        timercode = f"{minutes:02d}:{seconds:02d}"

        # Update the canvas text with the remaining time
        canvas.itemconfig(opponent_name_text, text=f"TIME: {timercode}")

        # Update the current time in Supabase every second
        new_current_time = datetime.now().isoformat()
        supabase.table("countdowns").update({"current_time": new_current_time}).eq("id", countdown_id).execute()
        
        
        if remaining_seconds <= 0:
            subprocess.Popen(['python', 'Anime Version/PVP/gui3.py'])
            exit()
            return
        canvas.after(250, update_canvas_timer, canvas, opponent_name_text, countdown_id)

table_name = "status"  # Replace with the actual table name
name_column = "name"  # Replace with the actual name column name
SESSION_FILE = "Files/Data/session.json"

def load_session():
    """Load session data from the session file."""
    if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:
        with open(SESSION_FILE, "r") as f:
            session_data = json.load(f)
            if all(key in session_data for key in ["access_token", "refresh_token", "expires_in"]):
                return session_data

session = load_session()

def get_current_user_id():
    try:
        user_response = supabase.auth.get_user(session["access_token"])  # Synchronous call
        if user_response and user_response.user:
            return user_response.user.id
        else:
            print("User is not authenticated or response is invalid.")  # Add logging for better debugging
            return None
    except Exception as e:
        print(f"Error getting user: {e}")
        return None
    
user_id = get_current_user_id()

def get_other_user_id():
    try:
        response = supabase.table("pvp_invites") \
            .select("inviter_id") \
            .eq("invitee_id", user_id) \
            .execute()
        
        if response.data:
            # Assuming you only want the first row
            id = response.data[0]["inviter_id"]
            return id
        else:
            print("No pending invite found.")
            return None
    except Exception as e:
        print(f"Error fetching invite: {e}")
        return None

other_user_id = get_other_user_id()

created_at = datetime.now()

def create_reps_row():
    """Create a new row for reps in the Supabase database."""
    global reps_count
    response = supabase.table('reps').insert({
        'user_id': user_id,
        'reps_count': reps_count,
        'created_at': created_at.isoformat()  # Convert datetime to ISO string
    }).execute()
create_reps_row()



def get_reps_from_db():
    """Get the most recent reps count from the Supabase database."""
    global reps_count
    try:
        # Fetch the newest row for the user_id
        response = supabase.table('reps') \
            .select('reps_count') \
            .eq('user_id', user_id) \
            .order('created_at', desc=True) \
            .limit(1) \
            .execute()
        
        if response.data:
            # Extract reps_count from the newest row
            reps_count = response.data[0]['reps_count']
            update_reps_display()
        else:
            reps_count = 0  # Default to 0 reps
            update_reps_display()
    except Exception as e:
        print(f"Error fetching reps count from the database: {e}")
        reps_count = 0  # Default to 0 reps in case of error
        update_reps_display()

        
def update_reps_in_db():
    response = (
        supabase.table("reps")
        .update({
            'reps_count': reps_count 
        })
        .eq('user_id', user_id) 
        .execute() 
    )


def add_reps():
    """Increment reps by 10."""
    global reps_count
    reps_count += 10
    update_reps_display()
    update_reps_in_db()

def subtract_reps():
    """Decrement reps by 10, ensuring it doesn't go below 0."""
    global reps_count
    reps_count = max(0, reps_count - 10)
    update_reps_display()
    update_reps_in_db()

def update_reps_display():
    """Update the reps count display on the Tkinter canvas."""
    canvas.itemconfig(reps_text, text=f"Reps: {reps_count}")


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")
window = Tk()
window.geometry("488x0")  # Initial collapsed height
window.configure(bg="#FFFFFF")
window.attributes('-alpha', 0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)
thesystem.system.make_window_transparent(window)

# Animate window open
window_width = 488
target_height = 716
subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])
thesystem.system.animate_window_open(window, target_height, window_width, step=40, delay=1)

# Load JSON data once to reduce file I/O
def load_json(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

status_data = load_json("Files/status.json")
presets_data = load_json("Files/Mod/presets.json")

# Helper Functions
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def start_move(event):
    global lastx, lasty
    lastx, lasty = event.x_root, event.y_root

def move_window(event):
    global lastx, lasty
    x = window.winfo_x() + (event.x_root - lastx)
    y = window.winfo_y() + (event.y_root - lasty)
    window.geometry(f"+{x}+{y}")
    lastx, lasty = event.x_root, event.y_root

# Update and Close Functions
def ex_close(event=None):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=20, delay=1)

# Initialize Canvas and Widgets
canvas = Canvas(window, bg="#FFFFFF", height=716, width=488, bd=0, highlightthickness=0, relief="ridge")
canvas.place(x=0, y=0)

# Load images once to avoid redundant processing
images = {
    "background": PhotoImage(file=relative_to_assets("image_1.png")),
    "stats": [
        PhotoImage(file=relative_to_assets(f"image_{i}.png")) for i in range(2, 6)
    ]
}

# Background image and character attributes
canvas.create_image(430.0, 363.0, image=images["background"])
player = thesystem.system.VideoPlayer(canvas, presets_data["Anime"]["Video"], 430.0, 363.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    230.0,
    367.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    225.0,
    117.0,
    anchor="n",
    image=image_image_3
)

canvas.create_rectangle(
    0.0,
    0.0,
    101.0,
    21.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    0.0,
    678.0,
    494.0,
    716.0,
    fill="#0C679B",
    outline="")

image_image_19 = PhotoImage(
    file=relative_to_assets("image_19.png"))
image_19 = canvas.create_image(
    -15.0,
    348.0,
    image=image_image_19
)

image_image_20 = PhotoImage(
    file=relative_to_assets("image_20.png"))
image_20 = canvas.create_image(
    462.0,
    351.0,
    image=image_image_20
)

canvas.create_rectangle(
    92.0,
    0.0,
    488.0,
    34.0,
    fill="#0C679B",
    outline="")

button_image_8 = PhotoImage(
    file=relative_to_assets("button_8.png"))
button_8 = Button(
    image=button_image_8,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_8.place(
    x=390.0,
    y=55.0,
    width=20.0,
    height=20.0
)

image_image_21 = PhotoImage(
    file=relative_to_assets("image_21.png"))
image_21 = canvas.create_image(
    244.0,
    (19),
    image=image_image_21
)

canvas.tag_bind(image_21, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_21, "<B1-Motion>", move_window)

image_image_22 = PhotoImage(
    file=relative_to_assets("image_22.png"))
image_22 = canvas.create_image(
    295.0,
    680,
    image=image_image_22
)

canvas = Canvas(
    window,
    bg = "#0678FF",
    height = 432,
    width = 712,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

transparent_image = Image.new('RGBA', (1, 1), (0, 0, 0, 0))  # Create a 1x1 transparent image
transparent_photo = ImageTk.PhotoImage(transparent_image)



def get_random_exercise():
    try:
        # Load the JSON file
        with open('Files/Data/exercises.json') as file:
            data = json.load(file)

        # Ensure the data is a list
        if not isinstance(data, list):
            raise ValueError("The JSON file must contain a list of exercises.")

        # Return a random exercise
        return random.choice(data)

    except (FileNotFoundError, json.JSONDecodeError, ValueError) as e:
        return f"Error: {e}"


exercise = get_random_exercise()

Text2 = canvas.create_text(
    350, 200,
    anchor="n",
    text="DO AS MANY {exercise} AS YOU CAN IN 10 MINUTES!",  # Initial text
    fill="White",
    font=("Montserrat Bold", 10),
)

opponent_name_text = canvas.create_text(
    350, 200,
    anchor="n",
    text="TIME: 00:00",  # Initial text
    fill="White",
    font=("Montserrat Bold", 10),
)

# Start the countdown in the backend
countdown_id = start_countdown()

# Start updating the canvas with the countdown
update_canvas_timer(canvas, opponent_name_text, countdown_id)

# Display the initial reps count on the canvas
reps_text = canvas.create_text(
    175, 400,
    text=f"Reps: {reps_count}",  # Initial value of reps
    fill="White",
    font=("Montserrat Bold", 14),
)

# Create the button to add 10 reps
add_reps_button = Button(
    window,
    text="+ 10 Reps",
    command=add_reps,
    bg="#0678FF",
    fg="white",
    font=("Montserrat Bold", 12)
)
add_reps_button.place(x=175, y=200, width=100, height=30)  # Position the button

# Create the button to subtract 10 reps
subtract_reps_button = Button(
    window,
    text="- 10 Reps",
    command=subtract_reps,
    bg="#FF3B3F",
    fg="white",
    font=("Montserrat Bold", 12)
)
subtract_reps_button.place(x=175, y=600, width=100, height=30)  # Position the button

# Fetch initial reps count from Supabase when the app starts
get_reps_from_db()
        
        
window.resizable(False, False)
window.mainloop()
