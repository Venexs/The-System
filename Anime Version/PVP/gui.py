
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import asyncio
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label, Listbox, Scrollbar
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import json
import time
import sys
import os
from supabase import create_client, Client
import asyncio
from datetime import date
import random

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


URL = "https://smewvswweqnpwzngdtco.supabase.co"
KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNtZXd2c3d3ZXFucHd6bmdkdGNvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQyMDY2NjcsImV4cCI6MjA0OTc4MjY2N30.0SSN0bbwzFMCGC47XUuwqyKfF__Zikm_rJHqXWf78PU"

supabase: Client = create_client(URL, KEY)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

initial_height = 0
initial_width = 0
target_height = 431
window_width = 712

thesystem.system.make_window_transparent(window)

window.geometry(f"{initial_width}x{initial_height}")
thesystem.system.animate_window_open_middle(window, target_height, window_width, step=20, delay=1)

thesystem.system.center_window(window,window_width,target_height)
window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.6)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

def animate_window_close(window, target_height, width, step=2, delay=5):
    current_height = window.winfo_height()
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()

    window.geometry(f"{width}x{current_height}+{screen_width//2 - width//2}+{screen_height//2 - current_height//2}")

    if current_height > target_height:
        new_height = max(current_height - step, target_height)
    else:
        new_height = current_height
    
    new_y = screen_height // 2 - new_height // 2
    window.geometry(f"{width}x{new_height}+{screen_width//2 - width//2}+{new_y}")

    if new_height > target_height:
        window.after(delay, animate_window_close, window, target_height, width, step, delay)
    else:
        window.quit()

def ex_close(eve):
    subprocess.Popen(['python', 'E:\System\Edited\SystemUpdate3\System_SL-main\Files\Mod\default\sfx_close.py'])
    animate_window_close(window, initial_height, window_width, step=45, delay=1)


canvas = Canvas(
    window,
    bg = "#0678FF",
    height = 432,
    width = 712,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    356.0,
    216.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    356.0,
    216.0,
    image=image_image_2
)

button_image_20 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_20 = Button(
    image=button_image_20,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_20.place(
    x=655.0,
    y=35.0,
    width=21.20473861694336,
    height=24.221660614013672
)

transparent_image = Image.new('RGBA', (1, 1), (0, 0, 0, 0))  # Create a 1x1 transparent image
transparent_photo = ImageTk.PhotoImage(transparent_image)

# Add this line below the existing canvas placements
opponent_name_text = canvas.create_text(
    350, 0,  # x, y coordinates
    anchor="n",
    text="Select your contender...",
    fill="White",  # Text color
    font=("Montserrat Bold", 14),
)

SESSION_FILE = "Files/Data/session.json"

def load_session():
    """Load session data from the session file."""
    if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:
        with open(SESSION_FILE, "r") as f:
            session_data = json.load(f)
            if all(key in session_data for key in ["access_token", "refresh_token", "expires_in"]):
                return session_data

session = load_session()


table_name = "status"  # Replace with the actual table name
name_column = "name"  # Replace with the actual name column name


def get_current_user_id():
    try:
        user_response = supabase.auth.get_user(session["access_token"])  # Synchronous call
        if user_response and user_response.user:
            return user_response.user.id
        else:
            print("User is not authenticated.")  # Add logging for better debugging
            return None
    except Exception as e:
        print(f"Error getting user: {e}")
        return None
    

def get_all_names(table_name, name_column, users_table="status", username_column="name"):
    try:
        # Get the current authenticated user's username
        user_response = supabase.auth.get_user(session["access_token"])  # Using sync call
        if user_response and user_response.user:
            current_user_id = user_response.user.id
            
            # Fetch the current user's status to get the username
            user_status = supabase.table(users_table) \
                .select(username_column) \
                .eq("user_id", current_user_id) \
                .single() \
                .execute()

            if user_status.data:  # Access the 'data' attribute directly
                current_username = user_status.data[username_column]
                print(f"Current username: {current_username}")  # Debugging

                # Query to exclude the current user's username
                response = supabase.table(table_name) \
                    .select(name_column) \
                    .neq(name_column, current_username) \
                    .execute()

                if response.data:  # Check if data is returned
                    names = [row[name_column] for row in response.data]
                    print(f"Names retrieved: {names}")  # Log the names list
                    return names
                else:
                    print(f"No names found in table {table_name}")
                    return []
            else:
                print("Unable to fetch current user's username.")
                return []
        else:
            print("No user is authenticated.")
            return []  # Return an empty list if no user is logged in
    except Exception as e:
        print(f"An error occurred: {e}")
        return []  # Return an empty list on error

def send_pvp_invite(invitee_username):
    """Send a PVP invite to a selected player."""
    try:
        # Get the current user's ID
        current_user_id = get_current_user_id()
        if not current_user_id:
            print("Error", "User is not authenticated.")
            return

        # Fetch the invitee's ID from the table based on their username
        response = supabase.table("status") \
            .select("user_id") \
            .eq("name", invitee_username) \
            .single() \
            .execute()

        if response.data:
            invitee_id = response.data["user_id"]
            timesent = date.today().isoformat()
            # Insert a new invite into the pvp_invites table
            random_id = random.randint(1, 1000000)
            invite_data = {
                "inviter_id": current_user_id,
                "invitee_id": invitee_id,
                "status": "pending",
                "created_at": timesent,  # Or use a specific timestamp function
                "id": random_id
            }

            invite_response = supabase.table("pvp_invites").insert(invite_data).execute()
            if invite_response.data:
                print("Success", f"PVP invite sent to {invitee_username}.")
                ex_close(window)
                subprocess.Popen(['python', 'E:\System\Edited\SystemUpdate3\System_SL-main\Anime Version\PVP\gui1.py', selected_username])
            else:
                print("Error", "Failed to send PVP invite.")
        else:
            print("Error", f"Player {invitee_username} not found.")

    except Exception as e:
        print(f"Error sending PVP invite: {e}")
        print("Error", "An error occurred while sending the PVP invite.")




def main():
    global names
    names = get_all_names(table_name, name_column)
    current_user_id = get_current_user_id()

main()

def on_select(event):
    
    global selected_username # Declare a global variable to store the selected username
    # Get the index of the selected item
    selected_index = listbox.curselection()[0]
        
    # Check if an item is selected
    if selected_index >= 0:
        selected_username = names[selected_index]
        print(f"Selected username: {selected_username}")  # Print for debugging



listbox = Listbox(window, bg='dodgerblue3', width=150, height=150, highlightcolor="deepskyblue2", highlightthickness=2, bd=0, selectmode="single")  # Allow only single selection
listbox.pack(side="bottom", fill="both", expand=True, padx=20, pady=100)
listbox.bind("<<ListboxSelect>>", on_select)  # Bind the selection event

scrollbar = Scrollbar(listbox)
scrollbar.pack(side="right", fill="y")

listbox.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=listbox.yview)

for name in names:
    listbox.insert("end", name)
    

def Fight():
    global selected_username  # Access the global variable
    
    if selected_username:
        # Use the selected_username for your further actions (e.g., pass it to another script)
        send_pvp_invite(selected_username)

    else:
        print("Please select a username first!")

    
image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))

# Create the button
button = Button(
    image=image_image_11, 
    borderwidth=0, 
    highlightthickness=0,
    command=Fight
)

button.place(x=133.0, y=382.0) 


window.resizable(False, False)
window.mainloop()
