
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label, Listbox, Scrollbar, Frame, Y, TOP, BOTH, X
import threading
import json
import csv
import subprocess
import time
import cv2
from PIL import Image, ImageTk
from datetime import datetime, timedelta
import pandas as pd
import sys
import math
import os
from supabase import create_client, Client
import asyncio
from datetime import date
import random
from dotenv import load_dotenv, set_key
from dotenv import load_dotenv, set_key
from infisical_client import ClientSettings, InfisicalClient, GetSecretOptions, AuthenticationOptions, UniversalAuthMethod

client = InfisicalClient(ClientSettings(
    auth=AuthenticationOptions(
        universal_auth=UniversalAuthMethod(
            client_id="0fa8dbf8-92ee-4889-bd48-1b5dd2d22e87",
            client_secret="a2c9a58bda26c914e333e6c0f7c35e019b30c3afa67b5dc8419a142ee8b2aec8",
        )
    )
))


def get_url():
    # access value
    name = client.getSecret(options=GetSecretOptions(
        environment="dev",
        project_id="a7b312a2-feb6-42bc-92cb-387e37463076",
        secret_name="SUPABASE_URL"
    ))
    return f"{name.secret_value}"
def get_key():
    # access value
    name = client.getSecret(options=GetSecretOptions(
        environment="dev",
        project_id="a7b312a2-feb6-42bc-92cb-387e37463076",
        secret_name="SUPABASE_KEY"
    ))
    return f"{name.secret_value}"

URL = "https://smewvswweqnpwzngdtco.supabase.co"
KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNtZXd2c3d3ZXFucHd6bmdkdGNvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQyMDY2NjcsImV4cCI6MjA0OTc4MjY2N30.0SSN0bbwzFMCGC47XUuwqyKfF__Zikm_rJHqXWf78PU"

supabase: Client = create_client(URL, KEY)

current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, '../../'))
sys.path.insert(0, project_root)

import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets/frame0")
window = Tk()
window.geometry("488x0")  # Initial collapsed height
window.configure(bg="#FFFFFF")
window.attributes('-alpha', 0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)
thesystem.system.make_window_transparent(window)

# Animate window open
window_width = 488
target_height = 716
subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])
thesystem.system.animate_window_open(window, target_height, window_width, step=40, delay=1)

# Load JSON data once to reduce file I/O
def load_json(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

status_data = load_json("Files/status.json")
presets_data = load_json("Files/Mod/presets.json")

# Helper Functions
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def start_move(event):
    global lastx, lasty
    lastx, lasty = event.x_root, event.y_root

def move_window(event):
    global lastx, lasty
    x = window.winfo_x() + (event.x_root - lastx)
    y = window.winfo_y() + (event.y_root - lasty)
    window.geometry(f"+{x}+{y}")
    lastx, lasty = event.x_root, event.y_root

# Update and Close Functions
def ex_close(event=None):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=20, delay=1)

# Initialize Canvas and Widgets
canvas = Canvas(window, bg="#FFFFFF", height=716, width=488, bd=0, highlightthickness=0, relief="ridge")
canvas.place(x=0, y=0)

# Load images once to avoid redundant processing
images = {
    "background": PhotoImage(file=relative_to_assets("image_1.png")),
    "stats": [
        PhotoImage(file=relative_to_assets(f"image_{i}.png")) for i in range(2, 6)
    ]
}

# Background image and character attributes
canvas.create_image(430.0, 363.0, image=images["background"])
player = thesystem.system.VideoPlayer(canvas, presets_data["Anime"]["Video"], 430.0, 363.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    230.0,
    367.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    225.0,
    117.0,
    anchor="n",
    image=image_image_3
)

canvas.create_rectangle(
    0.0,
    0.0,
    101.0,
    21.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    0.0,
    678.0,
    494.0,
    716.0,
    fill="#0C679B",
    outline="")

image_image_19 = PhotoImage(
    file=relative_to_assets("image_19.png"))
image_19 = canvas.create_image(
    -15.0,
    348.0,
    image=image_image_19
)

image_image_20 = PhotoImage(
    file=relative_to_assets("image_20.png"))
image_20 = canvas.create_image(
    462.0,
    351.0,
    image=image_image_20
)

canvas.create_rectangle(
    92.0,
    0.0,
    488.0,
    34.0,
    fill="#0C679B",
    outline="")

button_image_8 = PhotoImage(
    file=relative_to_assets("button_8.png"))
button_8 = Button(
    image=button_image_8,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_8.place(
    x=390.0,
    y=55.0,
    width=20.0,
    height=20.0
)

image_image_21 = PhotoImage(
    file=relative_to_assets("image_21.png"))
image_21 = canvas.create_image(
    244.0,
    (19),
    image=image_image_21
)

canvas.tag_bind(image_21, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_21, "<B1-Motion>", move_window)

image_image_22 = PhotoImage(
    file=relative_to_assets("image_22.png"))
image_22 = canvas.create_image(
    295.0,
    680,
    image=image_image_22
)


SESSION_FILE = "Files/Data/session.json"

def load_session():
    """Load session data from the session file."""
    if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:
        with open(SESSION_FILE, "r") as f:
            session_data = json.load(f)
            if all(key in session_data for key in ["access_token", "refresh_token", "expires_in"]):
                return session_data

session = load_session()




# Function to check invite status periodically
def poll_invite_status():
    while True:
        try:
            response = supabase.table("pvp_invites") \
                .select("status") \
                .eq("inviter_id", user_id) \
                .execute()
            
            if response.data:
                # Check if any invite has been accepted
                for invite in response.data:
                    if invite["status"] == "accepted":
                        ex_close(window)
                        subprocess.Popen(['python', f'Anime Version/PVP/gui2.py'])
                        return  # Exit the thread once the invite is accepted
        except Exception as e:
            print(f"Error checking invite status: {e}")
        
        time.sleep(1)  # Check every 5 seconds


    # Start polling for invite status in a separate thread
    threading.Thread(target=poll_invite_status, daemon=True).start()

    window.resizable(False, False)
    window.mainloop()
    
    
def get_current_user_id():
    try:
        user_response = supabase.auth.get_user(session["access_token"])  # Synchronous call
        if user_response and user_response.user:
            return user_response.user.id
        else:
            print("User is not authenticated.")  # Add logging for better debugging
            return None
    except Exception as e:
        print(f"Error getting user: {e}")
        return None
    
user_id = get_current_user_id()

def get_invite_status():
    try:
        response = supabase.table("pvp_invites") \
            .select("inviter_id") \
            .eq("status", "accepted") \
            .eq("inviter_id", user_id) \
            .execute()
        
        if response.data:
            # Assuming you only want the first row
            id = response.data[0]["inviter_id"]
            return 
        else:
            print("No pending invite found.")
            return None
    except Exception as e:
        print(f"Error fetching invite: {e}")
        return None

InviteStatus = supabase.table("pvp_invites").select("status").eq("inviter_id", user_id).execute()


transparent_image = Image.new('RGBA', (1, 1), (0, 0, 0, 0))  # Create a 1x1 transparent image
transparent_photo = ImageTk.PhotoImage(transparent_image)

# Add this line below the existing canvas placements
opponent_name_text = canvas.create_text(
    225, 200,  # x, y coordinates
    anchor="center",
    text="""REQUEST TO BATTLE SENT...""",
    fill="White",  # Text color
    font=("Montserrat Bold", 14),
)

opponent_name_text1 = canvas.create_text(
    235, 250,  # x, y coordinates
    anchor="center",
    text="""Please do not close this window.
    It will cancel your request.""",
    fill="Red",  # Text color
    font=("Montserrat Bold", 12),
)



if __name__ == "__main__":
    if len(sys.argv) > 1:
        selected_username = sys.argv[1]
        print(f"Received username: {selected_username}")
    else:
        print("No username received!")
        
    threading.Thread(target=poll_invite_status, daemon=True).start()

    window.resizable(False, False)
    window.mainloop()
    
        

window.resizable(False, False)
window.mainloop()
