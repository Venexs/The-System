
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label, Listbox, Scrollbar
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import json
import time
from datetime import datetime, timedelta
import time
import sys
import os
from supabase import create_client, Client
import asyncio
from dotenv import load_dotenv, set_key
from infisical_client import ClientSettings, InfisicalClient, GetSecretOptions, AuthenticationOptions, UniversalAuthMethod
from datetime import datetime, timedelta, date
import csv

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

client = InfisicalClient(ClientSettings(
    auth=AuthenticationOptions(
        universal_auth=UniversalAuthMethod(
            client_id="0fa8dbf8-92ee-4889-bd48-1b5dd2d22e87",
            client_secret="a2c9a58bda26c914e333e6c0f7c35e019b30c3afa67b5dc8419a142ee8b2aec8",
        )
    )
))


def get_url():
    # access value
    name = client.getSecret(options=GetSecretOptions(
        environment="dev",
        project_id="a7b312a2-feb6-42bc-92cb-387e37463076",
        secret_name="SUPABASE_URL"
    ))
    return f"{name.secret_value}"
def get_key():
    # access value
    name = client.getSecret(options=GetSecretOptions(
        environment="dev",
        project_id="a7b312a2-feb6-42bc-92cb-387e37463076",
        secret_name="SUPABASE_KEY"
    ))
    return f"{name.secret_value}"

URL = get_url()
KEY = get_key()
SESSION_FILE = "Files/Data/session.json"

supabase: Client = create_client(URL, KEY)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


table_name = "status"  # Replace with the actual table name
name_column = "name"  # Replace with the actual name column name
SESSION_FILE = "Files/Data/session.json"

def load_session():
    """Load session data from the session file."""
    if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:
        with open(SESSION_FILE, "r") as f:
            session_data = json.load(f)
            if all(key in session_data for key in ["access_token", "refresh_token", "expires_in"]):
                return session_data

session = load_session()

def get_current_user_id():
    try:
        user_response = supabase.auth.get_user(session["access_token"])  # Synchronous call
        if user_response and user_response.user:
            return user_response.user.id
        else:
            print("User is not authenticated or response is invalid.")  # Add logging for better debugging
            return None
    except Exception as e:
        print(f"Error getting user: {e}")
        return None
    
    
user_id = get_current_user_id()

def get_other_user_id():
    """Get the ID of the user you're fighting against."""
    try:
        # Check if the current user is the invitee
        response = supabase.table("pvp_invites") \
            .select("inviter_id") \
            .eq("invitee_id", user_id) \
            .limit(1) \
            .execute()
        
        if response.data and len(response.data) > 0:
            return response.data[0]["inviter_id"]  # The inviter is the opponent

        # Check if the current user is the inviter
        response = supabase.table("pvp_invites") \
            .select("invitee_id") \
            .eq("inviter_id", user_id) \
            .limit(1) \
            .execute()

        if response.data and len(response.data) > 0:
            return response.data[0]["invitee_id"]  # The invitee is the opponent

    except Exception as e:
        print(f"Error retrieving opponent: {e}")
        return None

    return None

other_user = get_other_user_id()

with open("Files/status.json", 'r') as rank_check_file:
    rank_check_data=json.load(rank_check_file)
    
def get_rank():
    with open("Files/status.json", 'r') as rank_check_file:
        rank_check_data=json.load(rank_check_file)
        lvl=rank_check_data["status"][0]['level']

        if lvl>=1 and lvl<=10:
            rank="E"
        elif lvl>=11 and lvl<=20:
            rank="D"
        elif lvl>=21 and lvl<=30:
            rank="C"
        elif lvl>=31 and lvl<=45:
            rank="B"
        elif lvl>=46 and lvl<=65:
            rank="A"
        elif lvl>=66 and lvl<=80:
            rank="S"
        elif lvl>=81 and lvl<=90:
            rank="SS"
        elif lvl>=91 and lvl<=100:
            rank="SSS"
        elif lvl>=101:
            rank="National"
    return rank
current_user_reps = supabase.table("reps").select("reps_count").eq("user_id", user_id).execute()
rank = get_rank()
av_str = current_user_reps / 8
av_int = current_user_reps / 8
coins = current_user_reps * 4
xp_pl = current_user_reps / 2

def rewards():
    with open("Files/Status.json", 'w') as status_import:
        rank_check_data["status"][0]['coins']+=coins
        rank_check_data["avail_eq"][0]['str_based']+=av_str
        rank_check_data["avail_eq"][0]['int_based']+=av_int
        rank_check_data["status"][0]['XP']+=xp_pl
        rank_check_data["status"][0]["fatigue"]+=(thesystem.system.give_fatigue_from_rank(rank)*2)
        json.dump(rank_check_data, status_import, indent=4)
        subprocess.Popen(['python', 'Anime Version/Status Tab/gui.py'])
    window.quit()


if other_user:
    # Fetch reps count for the opponent
    other_user_response = supabase.table("reps").select("reps_count").eq("user_id", other_user).execute()
    if other_user_response.data and len(other_user_response.data) > 0:
        other_user_reps = other_user_response.data[0]["reps_count"]
    else:
        other_user_reps = 0  # Default to 0 if no reps are found

    # Fetch reps count for the current user
    user_response = supabase.table("reps").select("reps_count").eq("user_id", user_id).execute()
    if user_response.data and len(user_response.data) > 0:
        user_reps = user_response.data[0]["reps_count"]
    else:
        user_reps = 0  # Default to 0 if no reps are found

    # Determine win/lose message
    if user_reps > other_user_reps:
        WinorLoseText = "Arise... The Player will be handsomely rewarded. Your Reps: {user_reps} Opponent's Reps: {other_user_reps}."
        rewards()
        time.sleep(4)
        exit()
    elif user_reps < other_user_reps:
        WinorLoseText = "Live and learn... Your Reps: {user_reps} Opponent's Reps: {other_user_reps}."
        time.sleep(4)
        exit()
    else:
        WinorLoseText = "Somehow you both got away. Your Reps: {user_reps} Opponent's Reps: {other_user_reps}."
        time.sleep(4)
        exit()
else:
    WinorLoseText = "No opponent found. Please check your current status."
    



window = Tk()

initial_height = 0
initial_width = 0
target_height = 431
window_width = 712

thesystem.system.make_window_transparent(window)

window.geometry(f"{initial_width}x{initial_height}")
thesystem.system.animate_window_open_middle(window, target_height, window_width, step=20, delay=1)

thesystem.system.center_window(window,window_width,target_height)
window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.6)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

def animate_window_close(window, target_height, width, step=2, delay=5):
    current_height = window.winfo_height()
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()

    window.geometry(f"{width}x{current_height}+{screen_width//2 - width//2}+{screen_height//2 - current_height//2}")

    if current_height > target_height:
        new_height = max(current_height - step, target_height)
    else:
        new_height = current_height
    
    new_y = screen_height // 2 - new_height // 2
    window.geometry(f"{width}x{new_height}+{screen_width//2 - width//2}+{new_y}")

    if new_height > target_height:
        window.after(delay, animate_window_close, window, target_height, width, step, delay)
    else:
        
        window.quit()

def ex_close(eve):
    subprocess.Popen(['python', os.path.join(project_root, 'Files/Mod/default/sfx_close.py')])
    animate_window_close(window, initial_height, window_width, step=45, delay=1)


canvas = Canvas(
    window,
    bg = "#0678FF",
    height = 432,
    width = 712,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    356.0,
    216.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    356.0,
    216.0,
    image=image_image_2
)

button_image_20 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_20 = Button(
    image=button_image_20,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_20.place(
    x=655.0,
    y=35.0,
    width=21.20473861694336,
    height=24.221660614013672
)


transparent_image = Image.new('RGBA', (1, 1), (0, 0, 0, 0))  # Create a 1x1 transparent image
transparent_photo = ImageTk.PhotoImage(transparent_image)


# Display the initial reps count on the canvas
reps_text = canvas.create_text(
    350, 0,
    anchor="n",
    text=WinorLoseText,  # Initial value of reps
    fill="White",
    font=("Montserrat Bold", 14),
)

        
window.resizable(False, False)
window.mainloop()
