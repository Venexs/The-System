
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# Fork by Venexs


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import csv
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import sys
import os
import textwrap

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    get_stuff_path_str=pres_file_data["Anime"]["High Long Size"]

def get_stuff_path(key):
    full_path=get_stuff_path_str+'/'+key
    return full_path

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root

def ex_close(win):
    if setting_data["Settings"]["Performernce (ANIME):"] != "True":
        stop_event.set()
        update_thread.join()
    thesystem.misc.update_screen("Daily","Close")
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=30, delay=1)

def split_description(desc_full):
    words = desc_full.split()
    parts = []
    current_part = ""
    
    for word in words:
        if len(current_part) + len(word) + 1 > 77:
            parts.append(current_part.strip())
            current_part = word
        else:
            current_part += " " + word if current_part else word
    
    if current_part:
        parts.append(current_part.strip())
    
    while len(parts) < 6:
        parts.append("")
    
    return tuple(parts[:6])


window = Tk()
stop_event=threading.Event()

initial_height = 0
target_height = 606
window_width = 477

window.geometry(f"{window_width}x{initial_height}")

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window,transp_clr)

with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

if setting_data["Settings"]["Performernce (ANIME):"] == "True":
    top_images = [f"thesystem/{all_prev}top_bar/{top_val}{str(2).zfill(4)}.png"]
    bottom_images = [f"thesystem/{all_prev}bottom_bar/{str(2).zfill(4)}.png"]

else:
    top_images = [f"thesystem/{all_prev}top_bar/{top_val}{str(i).zfill(4)}.png" for i in range(2, 501, 4)]
    bottom_images = [f"thesystem/{all_prev}bottom_bar/{str(i).zfill(4)}.png" for i in range(2, 501, 4)]

thesystem.system.animate_window_open(window, target_height, window_width, step=50, delay=1)

# Preload top and bottom images
top_preloaded_images = thesystem.system.preload_images(top_images, (488, 38))
bottom_preloaded_images = thesystem.system.preload_images(bottom_images, (488, 33))

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

name="Quest Name"
desc1=desc2=desc3=desc4=desc5=desc6=""

with open("Files/Temp Files/Event.csv") as f:
    reader = csv.reader(f)
    for row in reader:
        name=row[0]

with open("Files/Player Data/Player Events.json" , "r") as f:
    data = ujson.load(f)
    full_desc=data[name]["desc"]

desc1, desc2, desc3, desc4, desc5, desc6 = split_description(full_desc)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 606,
    width = 477,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    277.0,
    495.0,
    image=image_image_1
)

pres_file_data=thesystem.misc.load_ujson("Files/Mod/presets.json")
normal_font_col=pres_file_data["Anime"]["Normal Font Color"]
video_path=pres_file_data["Anime"][video]
player = thesystem.system.VideoPlayer(canvas, video_path, 277.0, 400.0, resize_factor=0.6, pause_duration=0.5, buffer_size=50)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    244.0,
    403.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    241.0,
    102.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    244.0,
    204.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    242.0,
    334.0,
    image=image_image_5
)

canvas.create_text(
    144.0,
    152.0,
    anchor="nw",
    text="Urgent Quest has Arrived",
    fill="#FFFFFF",
    font=("Montserrat Medium", 15 * -1)
)

canvas.create_text(
    62.0,
    254.0,
    anchor="nw",
    text=f"[{name.upper()}]",
    fill="#FFFFFF",
    font=("Montserrat Bold", 18 * -1)
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    238.0,
    513.0,
    image=image_image_6
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat"
)
button_1.place(
    x=273.0,
    y=437.0,
    width=160.0,
    height=27.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat"
)
button_2.place(
    x=60.0,
    y=437.0,
    width=160.0,
    height=27.0
)

canvas.create_text(
    72.0,
    284.0,
    anchor="nw",
    text=desc1,
    fill="#FFFFFF",
    font=("Montserrat Medium", 14 * -1)
)

canvas.create_text(
    72.0,
    305.0,
    anchor="nw",
    text=desc2,
    fill="#FFFFFF",
    font=("Montserrat Medium", 14 * -1)
)

canvas.create_text(
    72.0,
    326.0,
    anchor="nw",
    text=desc3,
    fill="#FFFFFF",
    font=("Montserrat Medium", 14 * -1)
)

canvas.create_text(
    72.0,
    347.0,
    anchor="nw",
    text=desc4,
    fill="#FFFFFF",
    font=("Montserrat Medium", 14 * -1)
)

canvas.create_text(
    72.0,
    368.0,
    anchor="nw",
    text=desc5,
    fill="#FFFFFF",
    font=("Montserrat Medium", 14 * -1)
)

canvas.create_text(
    72.0,
    389.0,
    anchor="nw",
    text=desc6,
    fill="#FFFFFF",
    font=("Montserrat Medium", 14 * -1)
)

side = PhotoImage(file=get_stuff_path("blue.png"))
if job.upper()!="NONE":
    side = PhotoImage(file=get_stuff_path("purple.png"))
canvas.create_image(15.0, 381.0, image=side)
canvas.create_image(468.0, 404.0, image=side)

canvas.create_rectangle(
    0.0,
    0.0,
    200.0,
    34.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    498.0,
    49.0,
    fill=transp_clr,
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (101, 613))
canvas.create_image(0.0, 350.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (80, 653))
canvas.create_image(470.0, 370.0, image=image_50)

canvas.create_rectangle(
    0.0,
    583.0,
    515.0,
    774.0,
    fill=transp_clr,
    outline="")

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    238.0,
    35.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    238.0,
    583.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

# Start the animation
if setting_data["Settings"]["Performernce (ANIME):"] != "True":
    update_thread = threading.Thread(target=update_images)
    update_thread.start()

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_3.place(
    x=416.0,
    y=61.0,
    width=20.0,
    height=20.0
)
window.resizable(False, False)
window.mainloop()
