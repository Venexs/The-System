
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from datetime import datetime, timedelta, date
import subprocess
import threading
import ujson
import cv2
from PIL import Image, ImageTk
import csv
import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system
import thesystem.dailyquest as dailyquest
import thesystem.misc as misc

<<<<<<< Updated upstream
with open("Files\Mod\presets.json", 'r') as pres_file:
    pres_file_data=json.load(pres_file)
    get_stuff_path_str=pres_file_data["Anime"]["Long Mid Size"]
=======
pres_file_data=misc.load_ujson("Files/Mod/presets.json")
get_stuff_path_str=pres_file_data["Anime"]["Long Mid Size"]
>>>>>>> Stashed changes

def get_stuff_path(key):
    full_path=get_stuff_path_str+'/'+key
    return full_path

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(window):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files\Mod\default\sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=20, delay=1)
    

subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])

window = Tk()

initial_height = 0
target_height = 669
window_width = 555

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.make_window_transparent(window)
thesystem.system.animate_window_open(window, target_height, window_width, step=30, delay=1)

window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

reward, type_re = dailyquest.get_check_rew()
rank = dailyquest.get_rank()
streak=dailyquest.get_streak()
title, list_of_titles_data = dailyquest.get_titles()

rank_check_data=misc.return_status()

today = date.today()
today_date_str = today.strftime("%Y-%m-%d")

if type_re=="Reward":
    final_rank_check_data=misc.load_ujson("Files/Data/Rank_Rewards.json")
    rew_list=final_rank_check_data[rank]

    av_str=av_int=rew_list[0]
    xp_pl=rew_list[1]
    coins=rew_list[2]

elif type_re=='Secret':
    final_rank_check_data=misc.load_ujson("Files/Data/Rank_Rewards.json")
    rew_list=final_rank_check_data[rank]

    av_str=av_int=(rew_list[0]*2)
    xp_pl=(rew_list[1]*2)
    coins=(rew_list[2]*2)

elif type_re=='Great Reward':
    with open("Files/Data/Daily_Quest.json", 'r') as daily_quest_file:
        daily_quest_data = ujson.load(daily_quest_file)
        gr_streak=daily_quest_data["Streak"]["Greater_value"]
    
    great_rank=False
    if gr_streak>=3:
        cr=3
    else:
        cr=2

    final_rank_check_data=misc.load_ujson("Files/Data/Rank_Rewards.json")
    rew_list=final_rank_check_data[rank]

    av_str=av_int=(rew_list[0]*cr)
    xp_pl=(rew_list[1]*cr)
    coins=(rew_list[2]*cr)
    
    if cr==3:
        great_rank=True

elif type_re=="Preview":
    with open("Files/Data/Rank_Rewards.json", 'r') as final_rank_check_file:
        final_rank_check_data=ujson.load(final_rank_check_file)
        rew_list=final_rank_check_data[rank]

        av_str=av_int=rew_list[0]
        xp_pl=rew_list[1]
        coins=rew_list[2]

def get():
    rank_check_data["status"][0]['coins']+=coins
    rank_check_data["status"][0]['XP']+=xp_pl
    rank_check_data["avail_eq"][0]['str_based']+=av_str
    rank_check_data["avail_eq"][0]['int_based']+=av_int
    rank_check_data["status"][0]["fatigue"]+=thesystem.system.give_fatigue_from_rank(rank)
    misc.dump_ujson("Files/Status.json",rank_check_data, 4)

    with open("Files/Checks/Daily_time_check.csv", 'w', newline='') as Daily_date_check_file:
        fw=csv.writer(Daily_date_check_file)
        fw.writerow([today_date_str, "True", "Complete"])

    tab_son_data=misc.load_ujson("Files/Tabs.json")

    if tab_son_data["Status"]=='Close':
        subprocess.Popen(['python', 'Anime Version/Status Tab/gui.py'])
    ex_close(window)

def secret_get():
    with open("Files/Checks/Daily_time_check.csv", 'w', newline='') as Daily_date_check_file:
        fw=csv.writer(Daily_date_check_file)
        fw.writerow([today_date_str, "True", "Complete"])

    dupli_title=False
    try:
        title_import_data=misc.load_ujson("Files/Titles/Titles.json")
        title_import_data_list=list(title_import_data.keys())
        for k in title_import_data_list:
            if k==title:
                dupli_title=True
    except:
        dupli_title=False

    if dupli_title==True:
        thesystem.system.message_open("Title Exists")

    else:
        title_import_data=misc.load_ujson("Files/Titles/Titles.json")
        title_import_data[title]=list_of_titles_data[title]
        misc.dump_ujson("Files/Titles/Titles.json",title_import_data, indent=4)

    rank_check_data["status"][0]['coins']+=coins
    rank_check_data["avail_eq"][0]['str_based']+=av_str
    rank_check_data["avail_eq"][0]['int_based']+=av_int
    rank_check_data["status"][0]['XP']+=xp_pl
    rank_check_data["status"][0]["fatigue"]+=(thesystem.system.give_fatigue_from_rank(rank)*2)
    misc.dump_ujson("Files/Status.json",rank_check_data, 4)

    with open("Files/Checks/Daily_time_check.csv", 'w', newline='') as Daily_date_check_file:
        fw=csv.writer(Daily_date_check_file)
        fw.writerow([today_date_str, "True", "Complete"])

    tab_son_data=misc.load_ujson("Files/Tabs.json")
    if tab_son_data["Status"]!='Open':
        subprocess.Popen(['python', 'Anime Version/Status Tab/gui.py'])
    window.quit()

def great_get():
    with open("Files/Checks/Daily_time_check.csv", 'w', newline='') as Daily_date_check_file:
        fw=csv.writer(Daily_date_check_file)
        fw.writerow([today_date_str, "True", "Complete"])

    dupli_title=False
    try:
        title_import_data=misc.load_ujson("Files/Titles/Titles.json")
        title_import_data_list=list(title_import_data.keys())
        for k in title_import_data_list:
            if k=="Blessed":
                dupli_title=True
    except:
        dupli_title=False

    if dupli_title==True:
        thesystem.system.message_open("Title Exists")

    else:
        title_import_data=misc.load_ujson("Files/Titles/Titles.json")
        title_import_data["Blessed"]=list_of_titles_data["Blessed"]
        misc.dump_ujson("Files/Titles/Titles.json",title_import_data, indent=4)

    rank_check_data["status"][0]['coins']+=coins
    rank_check_data["avail_eq"][0]['str_based']+=av_str
    rank_check_data["avail_eq"][0]['int_based']+=av_int
    rank_check_data["status"][0]['XP']+=xp_pl
    rank_check_data["status"][0]["fatigue"]+=(thesystem.system.give_fatigue_from_rank(rank)*2)
    misc.dump_ujson("Files/Status.json",rank_check_data, 4)

    with open("Files/Checks/Daily_time_check.csv", 'w', newline='') as Daily_date_check_file:
        fw=csv.writer(Daily_date_check_file)
        fw.writerow([today_date_str, "True", "Complete"])

    tab_son_data=misc.load_ujson("Files/Tabs.json")
    if tab_son_data["Status"]!='Open':
        subprocess.Popen(['python', 'Anime Version/Status Tab/gui.py'])
    window.quit()

def give_rev():
    if type_re=='Secret':
        secret_get()
    elif type_re=='Great Reward':
        great_get()
    else:
        get()

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 669,
    width = 555,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=get_stuff_path("image_1.png"))
image_1 = canvas.create_image(
    277.0,
    478.0,
    image=image_image_1
)

pres_file_data=misc.load_ujson("Files/Mod/presets.json")
normal_font_col=pres_file_data["Anime"]["Normal Font Color"]
video_path=pres_file_data["Anime"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 277.0, 320.0, resize_factor=0.8)

image_image_2 = PhotoImage(
    file=get_stuff_path("image_2.png"))
image_2 = canvas.create_image(
    287.0,
    364.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=get_stuff_path("image_3.png"))
image_3 = canvas.create_image(
    286.0,
    175.0,
    image=image_image_3
)
if reward:
    canvas.create_text(
        137.0,
        232.0,
        anchor="nw",
        text="Youâ€™ve got rewards! Congratulations",
        fill="#FFD337",
        font=("Exo Regular", 18 * -1)
    )
else:
    canvas.create_text(
        137.0,
        232.0,
        anchor="nw",
        text="Reward Previews",
        fill=normal_font_col,
        font=("Montserrat Regular", 18 * -1)
    )

canvas.create_rectangle(
    105.0,
    291.0,
    468.0,
    317.0,
    fill="#272727",
    outline="")

canvas.create_text(
    105.0,
    293.0,
    anchor="nw",
    text=f" 1. +{av_str} STR Based Points",
    fill=normal_font_col,
    font=("Montserrat Regular", 18 * -1)
)

canvas.create_rectangle(
    105.0,
    333.0,
    468.0,
    359.0,
    fill="#272727",
    outline="")

canvas.create_text(
    105.0,
    335.0,
    anchor="nw",
    text=f" 2. +{av_int} INT Based Points",
    fill=normal_font_col,
    font=("Montserrat Regular", 18 * -1)
)

canvas.create_rectangle(
    105.0,
    375.0,
    468.0,
    401.0,
    fill="#272727",
    outline="")

canvas.create_text(
    105.0,
    377.0,
    anchor="nw",
    text=f" 3. +{xp_pl} XP",
    fill=normal_font_col,
    font=("Montserrat Regular", 18 * -1)
)

canvas.create_rectangle(
    105.0,
    417.0,
    468.0,
    443.0,
    fill="#272727",
    outline="")

canvas.create_text(
    105.0,
    419.0,
    anchor="nw",
    text=f" 4. {coins} Gold Coins",
    fill=normal_font_col,
    font=("Montserrat Regular", 18 * -1)
)

if type_re=='Great Reward':
    if great_rank==True:
        canvas.create_rectangle(
            105.0,
            459.0,
            468.0,
            485.0,
            fill="#FFF859",
            outline="")

        canvas.create_rectangle(
            106.0,
            460.0,
            467.0,
            484.0,
            fill="#272727",
            outline="")

        canvas.create_text(
            105.0,
            459.0,
            anchor="nw",
            text=f" 5. Special Title: [Blessed]",
            fill=normal_font_col,
            font=("Montserrat Regular", 18 * -1)
        )

if type_re=='Secret':
    canvas.create_rectangle(
        105.0,
        459.0,
        468.0,
        485.0,
        fill="#FFF859",
        outline="")

    canvas.create_rectangle(
        106.0,
        460.0,
        467.0,
        484.0,
        fill="#272727",
        outline="")

    canvas.create_text(
        105.0,
        459.0,
        anchor="nw",
        text=f" 5. New Title: [{title}]",
        fill=normal_font_col,
        font=("Montserrat Regular", 18 * -1)
    )

image_0=canvas.create_rectangle(
    0.0,
    0.0,
    570.0,
    35.0,
    fill="#212121",
    outline="")

canvas.tag_bind(image_0, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_0, "<B1-Motion>", move_window)

button_image_8 = PhotoImage(
    file=get_stuff_path("button_0.png"))
button_8 = Button(
    image=button_image_8,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_8.place(
    x=520.0,
    y=3.0,
    width=28.0,
    height=28.0
)

if reward:
    button_image_1 = PhotoImage(
        file=get_stuff_path("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: give_rev(),
        relief="flat"
    )
    button_1.place(
        x=133.0,
        y=571.0,
        width=82.0,
        height=28.0
    )

    button_image_2 = PhotoImage(
        file=get_stuff_path("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda:ex_close(window),
        relief="flat"
    )
    button_2.place(
        x=358.0,
        y=571.0,
        width=82.0,
        height=28.0
    )

window.resizable(False, False)
window.mainloop()
