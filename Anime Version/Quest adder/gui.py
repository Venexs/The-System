
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk, StringVar
import subprocess
import ujson
import csv
import cv2
from PIL import Image, ImageTk
import random
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.quests
import thesystem.system

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

initial_height = 0
target_height = 417
window_width = 481

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.make_window_transparent(window)
thesystem.system.animate_window_open(window, target_height, window_width, step=45, delay=1)

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(win):
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    win.quit()

ft=13

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 417,
    width = 481,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    552.0,
    326.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Anime"]["Video"]
    preloaded_frames=np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 300.0, 190.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    240.0,
    228.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    162.0,
    71.0,
    image=image_image_3
)

entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0,
    font=('Montserrat', ft)
)
entry_1.place(
    x=30.0,
    y=116.0,
    width=369.0,
    height=20.0
)

canvas.create_text(
    30.0,
    98.0,
    anchor="nw",
    text="Enter Quest Name:",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

entry_2 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0,
    font=('Montserrat', ft)
)
entry_2.place(
    x=30.0,
    y=166.0,
    width=71.0,
    height=20.0
)

canvas.create_text(
    30.0,
    148.0,
    anchor="nw",
    text="Enter Quest Type (STR or INT): ",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

attribute_var = StringVar()

# Create the dropdown (combobox)
dropdown_3 = ttk.Combobox(
    window,
    textvariable=attribute_var,
    values=["STR", "INT"],
    state="readonly",
    font=('Montserrat', ft)  # Apply same font as original Entry
)
dropdown_3.place(
    x=30.0,
    y=216.0,
    width=171.0,
    height=20.0
)

attribute_var.set("STR")  # Set the default value to "STR"

canvas.create_text(
    30.0,
    198.0,
    anchor="nw",
    text="Quest Objective:",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

entry_4 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0,
    font=('Montserrat', ft)
)
entry_4.place(
    x=30.0,
    y=266.0,
    width=71.0,
    height=20.0
)

canvas.create_text(
    30.0,
    248.0,
    anchor="nw",
    text="Quest Amount:",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

entry_5 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0,
    font=('Montserrat', ft)
)
entry_5.place(
    x=182.0,
    y=266.0,
    width=71.0,
    height=20.0
)

canvas.create_text(
    182.0,
    248.0,
    anchor="nw",
    text="Quest Amount Type:",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    197.0,
    311.0,
    image=image_image_4
)

rank_var = StringVar()

# Create the dropdown (combobox)
dropdown_6 = ttk.Combobox(
    window,
    textvariable=rank_var,
    values=["E", "D", "C", "B"],
    state="readonly",
    font=('Montserrat', ft)
)
dropdown_6.place(
    x=28.0,
    y=348.0,
    width=71.0,
    height=20.0
)

rank_var.set("E")

canvas.create_text(
    28.0,
    330.0,
    anchor="nw",
    text="Quest Rank (E,D,C,B,A Or S) : ",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: thesystem.quests.quest_adding_func(entry_1,entry_2,attribute_var,entry_4,entry_5,rank_var,window),
    relief="flat"
)
button_1.place(
    x=350.0,
    y=381.0,
    width=109.0,
    height=22.0
)

image_0=canvas.create_rectangle(
    0.0,
    0.0,
    486.0,
    33.0,
    fill="#262626",
    outline="")

canvas.tag_bind(image_0, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_0, "<B1-Motion>", move_window)

button_image_0 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_0 = Button(
    image=button_image_0,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_0.place(
    x=453.0,
    y=2.0,
    width=28.0,
    height=28.0
)

window.resizable(False, False)
window.mainloop()
