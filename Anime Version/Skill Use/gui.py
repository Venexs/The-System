
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# Fork by Venexs


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import csv
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system 

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

stop_event=threading.Event()

initial_height = 0
target_height = 144
window_width = 587

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window,transp_clr)

with open("Files/Player Data/Settings.json", 'r') as settings_open:
    setting_data=ujson.load(settings_open)

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.animate_window_open(window, target_height, window_width,  step=20, delay=1)
#thesystem.system.center_window(window,window_width,target_height)

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

# Preload top and bottom images
top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (587, 19), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (587, 16), job, type_="bottom")

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root

def ex_close(eve):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8),daemon=True).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=5, delay=1)

with open("Files/Temp Files/Skill Use.csv", "r") as f:
    reader = csv.reader(f)
    for row in reader:
        skill_name=row[0]

with open("Files/Player Data/Skill.json", 'r') as f:
    skill_data = ujson.load(f)

levl=skill_data[skill_name][0]["lvl"]
type_=skill_data[skill_name][0]["type"]

if type_=="Passive":
    ac_type="Passive"
elif type_=="Active":
    ac_type='Active'
elif type_=="Job":
    ac_type='Job-Exclusive'

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 144,
    width = 587,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    448.0,
    277.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Anime"][video]
    preloaded_frames=np.load(video_path)
player = thesystem.system.FastVideoPlayer(canvas, preloaded_frames, 430.0, 263.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    300.0,
    72.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    299.0,
    84.0,
    image=image_image_3
)

canvas.create_text(
    163.0,
    50.0,
    anchor="nw",
    text=f"[{ac_type} Skill]",
    fill="#FFFFFF",
    font=("Montserrat Regular", 13 * -1)
)

canvas.create_text(
    174.0,
    77.0,
    anchor="nw",
    text=f"{skill_name}",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 13 * -1)
)

canvas.create_text(
    372.0,
    77.0,
    anchor="nw",
    text=f"LV.{levl}",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 13 * -1)
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    511.0,
    35.0,
    image=image_image_4
)

canvas.tag_bind(image_4, "<Button-1>", ex_close)

canvas.create_rectangle(
    527.9428100585938,
    0.0,
    590.3615341186523,
    142.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    10.0,
    78.0,
    135.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    141.0,
    0.0,
    605.0,
    20.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    153.0,
    20.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    123.0,
    600.0,
    144.0,
    fill=transp_clr,
    outline="")


image_40 = thesystem.system.side_bar("left_bar.png", (26, 115))
canvas.create_image(66.0, 70.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (25, 110))
canvas.create_image(534.0, 75.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    293.0,
    10.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    293.0,
    126.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

update_images()

window.resizable(False, False)
window.mainloop()
