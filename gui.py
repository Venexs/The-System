
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# Fork by Venexs


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import json
import csv
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
from datetime import datetime, date
import time
import pandas as pd
import sys
import os
import pandas as pd
from packaging import version
import requests

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


try:
    file_path= "Files/Player Data/Vow_status.json"
    with open(file_path, 'r') as vow_file:
        vow_status = ujson.load(vow_file)
        vow=vow_status["Vow"]

except:
    vow=False


if vow==False:
    thesystem.system.overwrite_python_file_with_text(update.py, update_new.txt)
    thing=txt='None'
    stop_thread = False  # Global flag to control the thread


    fin_data={
        "Skills":"False",
        "Quests":"False",
        "Upgrade":"False",
        "Lines":"False"
    }

    tab_data={
        "Inventory": "Close",
        "Daily": "Close",
        "Quest": "Close",
        "Skill": "Close",
        "Status": "Close",
        "Equipment": "Close",
        "Shop": "Close",
        "Dungeons": "Close",
        "Settings": "Close",
        "Calories": "Close",
        "Castle": "Close",
        "Intro": "Close",
        "Credits": "Close"
    }

    with open("Files/Player Data/Tabs.json", 'w') as tab_reset:
        json.dump(tab_data,tab_reset, indent=4)

    stop_event0 = threading.Event()
    stop_event1 = threading.Event()

    def relative_to_assets(path: str) -> Path:
        return ASSETS_PATH / Path(path)

    def load_data():
        with open('Files/Player Data/Status.json', 'r') as file:
            return json.load(file)

    # Function to save the updated JSON data
    def save_data(data):
        with open('Files/Player Data/Status.json', 'w') as file:
            json.dump(data, file, indent=4)

    # Function to reduce fatigue by 1% of fatigue_max every 3 minutes
    def reduce_fatigue():
        global stop_thread
        while not stop_thread:
            data = load_data()
            
            # Access fatigue and fatigue_max for "Sung Jin-Woo"
            character = data["status"][0]
            fatigue = character.get("fatigue", 0)
            fatigue_max = character.get("fatigue_max", 0)
            
            # Calculate the reduction amount (1% of fatigue_max, rounded to an integer)
            reduction_amount = max(1, fatigue_max // 100)
            
            # Reduce fatigue, ensuring it doesn't go below zero
            new_fatigue = max(0, fatigue - reduction_amount)
            character["fatigue"] = new_fatigue
            
            # Save updated data
            save_data(data)
            
            # Wait for 3 minutes, unless stop_thread is set to True
            for _ in range(180):  # Loop with 1-second checks for faster stopping
                if stop_thread:
                    return
                time.sleep(1)

    def start_move(event):
        window.lastx, window.lasty = event.widget.winfo_pointerxy()

    def move_window(event):
        x_root, y_root = event.widget.winfo_pointerxy()
        deltax, deltay = x_root - window.lastx, y_root - window.lasty

        if deltax != 0 or deltay != 0:  # Update only if there is actual movement
            window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
            window.lastx, window.lasty = x_root, y_root

    def timer_func():
        date_format = "%Y-%m-%d"
        with open("Files/Temp Files/Job_Change Date.csv", 'r') as time_open_csv_file:
            fr=csv.reader(time_open_csv_file)
            for k in fr:
                end_time_str=k[0]
            
        end_time = datetime.strptime(end_time_str, date_format)
        
        # Calculate the remaining time
        remaining_time = end_time - datetime.now()

        # Check if the remaining time is positive
        if remaining_time.total_seconds() <= 0:
            canvas.itemconfig(timer, text="Job Complete")
            give_job()
            return

        # Format the remaining time as days, hours, minutes, and seconds
        days = remaining_time.days
        hours, remainder = divmod(remaining_time.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        # Update the text on the Canvas
        timer_text = f"  {days:02d} Days {hours:02d}:{minutes:02d}:{seconds:02d}"
        canvas.itemconfig(timer, text=timer_text)

        # Schedule the next update after 1000 milliseconds (1 second)
        window.after(1000, timer_func)

    def give_job():
        canvas.itemconfig("job", state='hidden')
        stop_event1.set()
        with open("Files/Player Data/Job_info.json", 'r') as fson:
            data=json.load(fson)
            data["status"][0]['job_confirm']='True'

            a1=data["status"][1]["plSTR"]-data["status"][1]["STR"]
            a2=data["status"][1]["plINT"]-data["status"][1]["INT"]
            a3=data["status"][1]["plAGI"]-data["status"][1]["AGI"]
            a4=data["status"][1]["plVIT"]-data["status"][1]["VIT"]
            a5=data["status"][1]["plPER"]-data["status"][1]["PER"]
            a6=data["status"][1]["plMAN"]-data["status"][1]["MAN"]

        ability_dict={"STR":a1, "INT":a2, "AGI":a3, "VIT":a4, "PER":a5, "MAN":a6}
        abi=max(ability_dict)

        with open("Files/Player Data/Job_info.json", 'w') as stfson:
            json.dump(data, stfson, indent=4)

        if abi=="STR":
            subprocess.Popen(['python', f'{theme} Version/All Jobs/gui.py'])
        elif abi=="AGI":
            subprocess.Popen(['python', f'{theme} Version/All Jobs/gui1.py'])
        elif abi=="VIT":
            subprocess.Popen(['python', f'{theme} Version/All Jobs/gui2.py'])
        elif abi=="INT":
            subprocess.Popen(['python', f'{theme} Version/All Jobs/gui3.py'])
        elif abi=="PER":
            subprocess.Popen(['python', f'{theme} Version/All Jobs/gui4.py'])
        elif abi=="MAN":
            subprocess.Popen(['python', f'{theme} Version/All Jobs/gui5.py'])

    def check_for_job():
        while not stop_event1.is_set():
            with open("Files/Player Data/Job_info.json", 'r') as fson:
                data=json.load(fson)
            job_check=data["status"][0]['job_active']
            job_confim=data["status"][0]['job_confirm']

            if job_check=='True' and job_confim=='False':
                if data["status"][0]['job_check']=='False':
                    data["status"][0]['job_check']='True'
                    with open("Files/Player Data/Job_info.json", 'w') as fina_fson:
                        json.dump(data, fina_fson, indent=4)
            
                    subprocess.Popen(['python', f'D:/Projects/System/{theme} Version/Accept Job Change/gui.py'])
                    canvas.itemconfig("job", state='normal')
                    timer_func()
                    stop_event1.set()
                else:
                    canvas.itemconfig("job", state='normal')
                    timer_func()
                    stop_event1.set()
            time.sleep(5)
                
    def pause_thread():
        pause_event.set()
        print("Thread paused")

    def resume_thread():
        pause_event.clear()
        print("Thread resumed")

    window = Tk()

    window.geometry("920x920")

    window.configure(bg = "#292929")
    window.attributes('-alpha',0.8)
    window.overrideredirect(True)
    window.wm_attributes("-topmost", True)

    thesystem.system.make_window_transparent(window, "#292929")

    thread0 = threading.Thread(target=thesystem.system.check_midnight, args=(window, stop_event0))
    thread0.start()

    show_bar=False
    time0=25

    def open_home(event):
        global show_bar

        subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
        home_items = [
            "home", "home1", "home2", "home3", "home4", "home5", 
            "home6", "home7", "home8", "home9", "home10", "home11", 
            "home12", "home13", "home14", "home15", "home16", "home17",
            "home18"
        ]

        def show_items(index=0):
            """Recursively show items with a delay."""
            if index < len(home_items):
                canvas.itemconfig(home_items[index], state="normal")
                window.after(time0, show_items, index + 1)  # Delay before showing next item

        def hide_items(index=0):
            """Recursively hide items with a delay."""
            if index < len(home_items):
                canvas.itemconfig(home_items[-(index + 1)], state="hidden")
                window.after(time0, hide_items, index + 1)  # Delay before hiding next item

        if not show_bar:
            show_items()  # Start fade-in
            show_bar = True
        else:
            hide_items()  # Start fade-out
            show_bar = False

    def open_cal(eve):
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        with open("Files/Player Data/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Calories"]=='Close':

            with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Calories"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)
        
        subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
        subprocess.Popen(['python', f'{theme} Version/Calorie Input/gui.py'])

    def open_dungeon(event):
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

        with open("Files/Player Data/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Dungeons"]=='Close':

            with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Dungeons"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            subprocess.Popen(['python', f'{theme} Version/Dungeon/gui.py'])

    def settings_open(event):
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        with open("Files/Player Data/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Settings"]=='Close':

            with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Settings"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Settings/gui.py"
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
            subprocess.Popen(['python', inv_name])

    def credit_open(event):
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        with open("Files/Player Data/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Credits"]=='Close':

            with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Credits"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Credits/gui.py"
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
            subprocess.Popen(['python', inv_name])

    def castle_open(event):
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        with open("Files/Player Data/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Castle"]=='Close':

            with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Castle"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Demon Castle/gui.py"
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
            subprocess.Popen(['python', inv_name])

    def inv_open(event):
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        with open("Files/Player Data/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Inventory"]=='Close':

            with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Inventory"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Inventory/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def update_open(event):
        subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
        stop_event.set()
        stop_event0.set()
        stop_event1.set()
        
        # Remove this part:
        # if 'read_cal_thread' in globals():
        #     read_cal_thread.join(timeout=1)

        # Wait for the threads to finish
        thread1.join()
        thread0.join()

        subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
        subprocess.Popen(['python', 'update.py'])
        window.quit()

    def daily_open(event):
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        with open("Files/Player Data/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Daily"]=='Close':
            inv_name=f"{theme} Version/Daily Quest/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def quest_open(event):
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        with open("Files/Player Data/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Quest"]=='Close':

            with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Quest"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Quests/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def skill_open(event):
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        with open("Files/Player Data/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Skill"]=='Close':

            with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Skill"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Skills Tab/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def status_open(event):
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        with open("Files/Player Data/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Status"]=='Close':

            with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Status"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Status Tab/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def equip_open(event):
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        with open("Files/Player Data/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Equipment"]=='Close':

            with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Equipment"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Equipment/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def shop_open(event):
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        with open("Files/Player Data/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Shop"]=='Close':

            with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Shop"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Shop/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def close_full(event):
        subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
        stop_event.set()
        stop_event0.set()
        stop_event1.set()
        
        # Remove this part:
        # if 'read_cal_thread' in globals():
        #     read_cal_thread.join(timeout=1)

        # Wait for the threads to finish
        thread1.join()
        thread0.join()

        subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
        sys.exit()

    def intro(event):
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        with open("Files/Player Data/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Intro"]=='Close':

            with open("Files/Player Data/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Intro"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Intro/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def show_job():
        canvas.itemconfig("job", state="normal")

    def hide_job():
        canvas.itemconfig("job", state="hidden")

    def check_for_update() -> bool:
        github_csv_url = "https://raw.githubusercontent.com/Venexs/The-System/refs/heads/Update_RAW/version.csv"
        local_csv_path = "version.csv"
        """
        Compares local and remote version numbers to determine if an update is available.

        Args:
            github_csv_url (str): The URL to the remote version CSV file on GitHub.
            local_csv_path (str): The path to the local version CSV file.

        Returns:
            bool: True if a newer version exists, False otherwise.
        """
        def github_blob_to_raw(url):
            return url.replace("github.com", "raw.githubusercontent.com").replace("/blob/", "/")

        def get_version(path_or_url, is_remote=False):
            try:
                if is_remote:
                    response = requests.get(path_or_url)
                    response.raise_for_status()
                    df = pd.read_csv(requests.get(path_or_url).url, header=None)
                else:
                    df = pd.read_csv(path_or_url, header=None)

                if df.empty:
                    raise ValueError("CSV is empty.")
                return str(df.iloc[0, 0]).strip()
            except Exception as e:
                print(f"Error reading {'remote' if is_remote else 'local'} CSV: {e}")
                return False

        raw_url = github_blob_to_raw(github_csv_url)
        remote_ver = get_version(raw_url, is_remote=True)
        local_ver = get_version(local_csv_path)

        if remote_ver is None or local_ver is None:
            return False  # Cannot compare if either version is missing

        return version.parse(remote_ver) > version.parse(local_ver)

    def hourly_update_check():
        """
        Function to be run in a separate thread for hourly update checks.
        """
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]
        while True:
            if check_for_update():
                thesystem.system.message_open("Update")
            time.sleep(3600)

    # ? =====================================================================
    # ! The Every 5th Level Skil Checker
    thesystem.system.random_skill_check()
    # ? =====================================================================
    thesystem.system.random_quest()
    # ? =====================================================================

    with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
        theme_data=json.load(themefile)
        theme=theme_data["Theme"]

    with open("Files/Player Data/Status.json", 'r') as fson:
        data=json.load(fson)
        name=data["status"][0]['name'].upper()
        # ? =================================================
        hp=data["status"][0]['hp']
        mp=data["status"][0]['mp']
        lvl=data["status"][0]['level']
        old_lvl=f"{lvl:02d}"
        # ? =================================================
        stre=data["status"][0]['str']
        intel=data["status"][0]['int']
        agi=data["status"][0]['agi']
        vit=data["status"][0]['vit']
        per=data["status"][0]['per']
        man=data["status"][0]['man']
        # ? =================================================
        tit=data["status"][1]['title'].upper()
        job=data["status"][1]['job'].upper()
        # ? =================================================
        xp_str=data["status"][0]['XP']
        coins=data["status"][0]['coins']
        # ? =================================================
        av_str_based=data["avail_eq"][0]['str_based']
        av_int_based=data["avail_eq"][0]['int_based']
        # ? =================================================

    canvas = Canvas(
        window,
        bg = "#292929",
        height = 920,
        width = 920,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )


    canvas.place(x = 0, y = 0)
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        460.0,
        460.0,
        image=image_image_1
    )

    canvas.tag_bind(image_1, "<ButtonPress-1>", open_home)

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        460.0,
        381.0,
        image=image_image_2,
        tag="home",
        state="hidden"
    )
    canvas.tag_bind(image_2, "<ButtonPress-1>", inv_open)

    image_image_3 = PhotoImage(
        file=relative_to_assets("image_3.png"))
    image_3 = canvas.create_image(
        533.0,
        411.0,
        image=image_image_3,
        tag="home1",
        state="hidden"
    )
    
    canvas.tag_bind(image_3, "<ButtonPress-1>", quest_open)

    image_image_4 = PhotoImage(
        file=relative_to_assets("image_4.png"))
    image_4 = canvas.create_image(
        387.0,
        415.0,
        image=image_image_4,
        tag="home2",
        state="hidden"
    )
    canvas.tag_bind(image_4, "<ButtonPress-1>", equip_open)

    image_image_5 = PhotoImage(
        file=relative_to_assets("image_5.png"))
    image_5 = canvas.create_image(
        388.0,
        504.0,
        image=image_image_5,
        tag="home3",
        state="hidden"
    )
    canvas.tag_bind(image_5, "<ButtonPress-1>", open_dungeon)

    image_image_6 = PhotoImage(
        file=relative_to_assets("image_6.png"))
    image_6 = canvas.create_image(
        533.0,
        507.0,
        image=image_image_6,
        tag="home4",
        state="hidden"
    )

    canvas.tag_bind(image_6, "<ButtonPress-1>", daily_open)

    image_image_7 = PhotoImage(
        file=relative_to_assets("image_7.png"))
    image_7 = canvas.create_image(
        460.0,
        538.0,
        image=image_image_7,
        tag="home5",
        state="hidden"
    )

    canvas.tag_bind(image_7, "<ButtonPress-1>", status_open)

    image_image_8 = PhotoImage(
        file=relative_to_assets("image_8.png"))
    image_8 = canvas.create_image(
        363.0,
        405.0,
        image=image_image_8,
        tag="home6",
        state="hidden"
    )

    image_image_9 = PhotoImage(
        file=relative_to_assets("image_9.png"))
    image_9 = canvas.create_image(
        559.2101707458496,
        405.0,
        image=image_image_9,
        tag="home7",
        state="hidden"
    )

    image_image_10 = PhotoImage(
        file=relative_to_assets("image_10.png"))
    image_10 = canvas.create_image(
        459.99999455502984,
        572.0000034206996,
        image=image_image_10,
        tag="home8",
        state="hidden"
    )

    image_image_11 = PhotoImage(
        file=relative_to_assets("image_11.png"))
    image_11 = canvas.create_image(
        460.0,
        332.0,
        image=image_image_11,
        tag="home9",
        state="hidden"
    )

    canvas.tag_bind(image_11, "<ButtonPress-1>", update_open)

    image_image_12 = PhotoImage(
        file=relative_to_assets("image_12.png"))
    image_12 = canvas.create_image(
        343.0,
        530.0,
        image=image_image_12,
        tag="home10",
        state="hidden"
    )

    canvas.tag_bind(image_12, "<ButtonPress-1>", intro)

    image_image_13 = PhotoImage(
        file=relative_to_assets("image_13.png"))
    image_13 = canvas.create_image(
        577.0,
        530.0,
        image=image_image_13,
        tag="home11",
        state="hidden"
    )

    canvas.tag_bind(image_13, "<ButtonPress-1>", credit_open)

    image_image_14 = PhotoImage(
        file=relative_to_assets("image_14.png"))
    image_14 = canvas.create_image(
        325.0,
        380.0,
        image=image_image_14,
        tag="home12",
        state="hidden"
    )

    canvas.tag_bind(image_14, "<ButtonPress-1>", skill_open)

    image_image_15 = PhotoImage(
        file=relative_to_assets("image_15.png"))
    image_15 = canvas.create_image(
        597.0,
        378.0,
        image=image_image_15,
        tag="home13",
        state="hidden"
    )

    canvas.tag_bind(image_15, "<ButtonPress-1>", shop_open)

    image_image_16 = PhotoImage(
        file=relative_to_assets("image_16.png"))
    image_16 = canvas.create_image(
        459.0,
        603.0,
        image=image_image_16,
        tag="home14",
        state="hidden"
    )

    canvas.tag_bind(image_16, "<ButtonPress-1>", castle_open)

    image_image_17 = PhotoImage(
        file=relative_to_assets("image_17.png"))
    image_17 = canvas.create_image(
        459.0,
        272.0,
        image=image_image_17,
        tag="home15",
        state="hidden"
    )

    image_image_18 = PhotoImage(
        file=relative_to_assets("image_18.png"))
    image_18 = canvas.create_image(
        616.0,
        298.0,
        image=image_image_18,
        tag="home16",
        state="hidden"
    )
    
    canvas.tag_bind(image_18, "<ButtonPress-1>", close_full)

    image_image_19 = PhotoImage(
        file=relative_to_assets("image_19.png"))
    image_19 = canvas.create_image(
        304.0,
        298.0,
        image=image_image_19,
        tag="home17",
        state="hidden"
    )

    canvas.tag_bind(image_19, "<ButtonPress-1>", settings_open)

    image_image_20 = PhotoImage(
        file=relative_to_assets("image_20.png"))
    image_20 = canvas.create_image(
        486.0,
        437.0,
        image=image_image_20
    )

    canvas.tag_bind(image_20, "<ButtonPress-1>", start_move)
    canvas.tag_bind(image_20, "<B1-Motion>", move_window)

    image_image_21 = PhotoImage(
        file=relative_to_assets("image_21.png"))
    image_21 = canvas.create_image(
        460.0,
        659.0,
        image=image_image_21,
        tags="job",
        state="hidden"
    )

    canvas.create_text(
        407.0,
        594.0+50-5,
        anchor="nw",
        text="Job Change Quest",
        fill="#FFFFFF",
        font=("Exo Regular", 13 * -1),
        tags="job",
        state="hidden"
    )

    timer=canvas.create_text(
        396.0,
        610.0+50-5,
        anchor="nw",
        text="00 Days 00:00:00",
        fill="#FFFFFF",
        font=("Exo Bold", 15 * -1),
        tags="job",
        state="hidden"
    )
    
    stop_event = threading.Event()
    pause_event = threading.Event()

    thesystem.system.run_once_prog(stop_event0, thread0)

    update_thread = threading.Thread(target=hourly_update_check, daemon=True)
    update_thread.start()

    thread1 = threading.Thread(target=check_for_job)
    thread1.start()

    window.resizable(False, False)
    window.mainloop()


else:
    thesystem.system.message_open("System Deleted")
