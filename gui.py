
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# Fork by Venexs


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import json
import csv
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
from datetime import datetime, date
import time
import pandas as pd
import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

try:
    file_path= "Files/Data/Vow_status.json"
    with open(file_path, 'r') as vow_file:
        vow_status = ujson.load(vow_file)
        vow=vow_status["Vow"]

except:
    vow=False

if vow==False:

    def align_window_right_center(window):
        # Ensure the window's dimensions are calculated
        window.update_idletasks()
        
        # Get window dimensions
        win_width = window.winfo_width()
        win_height = window.winfo_height()
        
        # Get screen dimensions
        screen_width = window.winfo_screenwidth()
        screen_height = window.winfo_screenheight()
        
        x = screen_width - win_width
        y = ((screen_height - win_height) // 2)-15
        
        window.geometry(f"+{x}+{y}")

    thing=txt='None'
    stop_thread = False  # Global flag to control the thread

    fin_data={
        "Skills":"False",
        "Quests":"False",
        "Upgrade":"False",
        "Lines":"False"
    }

    tab_data={
        "Inventory": "Close",
        "Daily": "Close",
        "Quest": "Close",
        "Skill": "Close",
        "Status": "Close",
        "Equipment": "Close",
        "Shop": "Close",
        "Dungeons": "Close",
        "Settings": "Close",
        "Calories": "Close",
        "Castle": "Close",
        "Intro": "Close"
    }

    with open("Files/Tabs.json", 'w') as tab_reset:
        json.dump(tab_data,tab_reset, indent=4)

    stop_event0 = threading.Event()
    stop_event1 = threading.Event()

    def relative_to_assets(path: str) -> Path:
        return ASSETS_PATH / Path(path)

    def load_data():
        with open('Files/status.json', 'r') as file:
            return json.load(file)

    # Function to save the updated JSON data
    def save_data(data):
        with open('Files/status.json', 'w') as file:
            json.dump(data, file, indent=4)

    # Function to reduce fatigue by 1% of fatigue_max every 3 minutes
    def reduce_fatigue():
        global stop_thread
        while not stop_thread:
            data = load_data()
            
            # Access fatigue and fatigue_max for "Sung Jin-Woo"
            character = data["status"][0]
            fatigue = character.get("fatigue", 0)
            fatigue_max = character.get("fatigue_max", 0)
            
            # Calculate the reduction amount (1% of fatigue_max, rounded to an integer)
            reduction_amount = max(1, fatigue_max // 100)
            
            # Reduce fatigue, ensuring it doesn't go below zero
            new_fatigue = max(0, fatigue - reduction_amount)
            character["fatigue"] = new_fatigue
            
            # Save updated data
            save_data(data)
            
            # Wait for 3 minutes, unless stop_thread is set to True
            for _ in range(180):  # Loop with 1-second checks for faster stopping
                if stop_thread:
                    return
                time.sleep(1)

    def read_cal_thread():
        while True:
            read_cal()
            # Sleep for a random time between 5 and 6 minutes
            sleep_time = 5
            time.sleep(sleep_time)

    def read_cal(eve=0):
        with open("Files/Data/Calorie_Count.json", 'r') as calorie_add_file:
            calorie_add_data=json.load(calorie_add_file)
            calorie_add_key=list(calorie_add_data.keys())[0]

        # Get today's date
        current_date = date.today()

        # Format the date as a string
        formatted_date = current_date.strftime("%Y-%m-%d")

        if calorie_add_key==formatted_date:
            global pl_cal_txt
            pl_current_text = canvas.itemcget(pl_cal_txt, "text")
            pl_current_text=calorie_add_data[formatted_date][0]
            global pl_new_text
            pl_new_text = "{:04d}".format(int(pl_current_text))
            canvas.itemconfig(pl_cal_txt, text=pl_new_text)
            global sys_cal_txt
            today = datetime.now().strftime("%A")
        
            # Read the JSON file
            with open("Files/Workout/Cal_Count.json", "r") as file:
                daily_calories = json.load(file)
            
            # Return the calories for today
            tdy_val=daily_calories.get(today, 0)
            sys_current_text = canvas.itemcget(sys_cal_txt, "text")
            sys_current_text = tdy_val
            global sys_new_text
            sys_new_text = "{:04d}".format(int(sys_current_text))
            canvas.itemconfig(sys_cal_txt, text=sys_new_text)

        else:
            new_data={formatted_date:[0]}
            with open("Files/Data/Calorie_Count.json", 'w') as calorie_add_file_write:
                json.dump(new_data, calorie_add_file_write, indent=4)
            read_cal(None)

    def update_cal_display():
        global pl_new_text, sys_new_text
        read_cal()
        canvas.itemconfig(pl_cal_txt, text=pl_new_text)
        canvas.itemconfig(sys_cal_txt, text=f"/{sys_new_text}")
        window.after(1000, update_cal_display)  # Schedule the next update in 1 second

    def timer_func():
        date_format = "%Y-%m-%d"
        with open("Files/Temp Files/Job_Change Date.csv", 'r') as time_open_csv_file:
            fr=csv.reader(time_open_csv_file)
            for k in fr:
                end_time_str=k[0]
            
        end_time = datetime.strptime(end_time_str, date_format)
        
        # Calculate the remaining time
        remaining_time = end_time - datetime.now()

        # Check if the remaining time is positive
        if remaining_time.total_seconds() <= 0:
            canvas.itemconfig(timer, text="Job Complete")
            give_job()
            return

        # Format the remaining time as days, hours, minutes, and seconds
        days = remaining_time.days
        hours, remainder = divmod(remaining_time.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        # Update the text on the Canvas
        timer_text = f"  {days:02d} Days {hours:02d}:{minutes:02d}:{seconds:02d}"
        canvas.itemconfig(timer, text=timer_text)

        # Schedule the next update after 1000 milliseconds (1 second)
        window.after(1000, timer_func)

    def give_job():
        canvas.itemconfig("job", state='hidden')
        stop_event1.set()
        with open("Files/Data/Job_info.json", 'r') as fson:
            data=json.load(fson)
            data["status"][0]['job_confirm']='True'

            a1=data["status"][1]["plSTR"]-data["status"][1]["STR"]
            a2=data["status"][1]["plINT"]-data["status"][1]["INT"]
            a3=data["status"][1]["plAGI"]-data["status"][1]["AGI"]
            a4=data["status"][1]["plVIT"]-data["status"][1]["VIT"]
            a5=data["status"][1]["plPER"]-data["status"][1]["PER"]
            a6=data["status"][1]["plMAN"]-data["status"][1]["MAN"]

        ability_dict={"STR":a1, "INT":a2, "AGI":a3, "VIT":a4, "PER":a5, "MAN":a6}
        abi=max(ability_dict)

        with open("Files/Data/Job_info.json", 'w') as stfson:
            json.dump(data, stfson, indent=4)

        if abi=="STR":
            subprocess.Popen(['python', f'{theme} Version/All Jobs/gui.py'])
        elif abi=="AGI":
            subprocess.Popen(['python', f'{theme} Version/All Jobs/gui1.py'])
        elif abi=="VIT":
            subprocess.Popen(['python', f'{theme} Version/All Jobs/gui2.py'])
        elif abi=="INT":
            subprocess.Popen(['python', f'{theme} Version/All Jobs/gui3.py'])
        elif abi=="PER":
            subprocess.Popen(['python', f'{theme} Version/All Jobs/gui4.py'])
        elif abi=="MAN":
            subprocess.Popen(['python', f'{theme} Version/All Jobs/gui5.py'])

    def check_for_job():
        while not stop_event1.is_set():
            with open("Files/Data/Job_info.json", 'r') as fson:
                data=json.load(fson)
            job_check=data["status"][0]['job_active']
            job_confim=data["status"][0]['job_confirm']

            if job_check=='True' and job_confim=='False':
                if data["status"][0]['job_check']=='False':
                    data["status"][0]['job_check']='True'
                    with open("Files/Data/Job_info.json", 'w') as fina_fson:
                        json.dump(data, fina_fson, indent=4)
            
                    subprocess.Popen(['python', f'D:/Projects/System/{theme} Version/Accept Job Change/gui.py'])
                    canvas.itemconfig("job", state='normal')
                    timer_func()
                    stop_event1.set()
                else:
                    canvas.itemconfig("job", state='normal')
                    timer_func()
                    stop_event1.set()
            time.sleep(5)
                
    def pause_thread():
        pause_event.set()
        print("Thread paused")

    def resume_thread():
        pause_event.clear()
        print("Thread resumed")

    window = Tk()

    window.geometry("294x758")

    align_window_right_center(window)   
    window.configure(bg = "#292929")
    window.attributes('-alpha',0.8)
    window.overrideredirect(True)
    window.wm_attributes("-topmost", True)

    thesystem.system.make_window_transparent(window, "#292929")

    thread0 = threading.Thread(target=thesystem.system.check_midnight, args=(window, stop_event0))
    thread0.start()

    show_bar=False
    time0=25

    def open_home(event):
        global show_bar

        subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
        home_items = [
            "home", "home1", "home2", "home3", "home4", "home5", 
            "home6", "home7", "home8", "home9", "home10", "home11", "home12"
        ]

        def show_items(index=0):
            """Recursively show items with a delay."""
            if index < len(home_items):
                canvas.itemconfig(home_items[index], state="normal")
                window.after(time0, show_items, index + 1)  # Delay before showing next item

        def hide_items(index=0):
            """Recursively hide items with a delay."""
            if index < len(home_items):
                canvas.itemconfig(home_items[-(index + 1)], state="hidden")
                window.after(time0, hide_items, index + 1)  # Delay before hiding next item

        if not show_bar:
            show_items()  # Start fade-in
            show_bar = True
        else:
            hide_items()  # Start fade-out
            show_bar = False

    def open_cal(eve):
        with open('Files/Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        with open("Files/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Calories"]=='Close':

            with open("Files/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Calories"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)
        
        subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
        subprocess.Popen(['python', f'{theme} Version/Calorie Input/gui.py'])

    def open_dungeon(event):
        with open('Files/Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]

        subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

        with open("Files/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Dungeons"]=='Close':

            with open("Files/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Dungeons"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            subprocess.Popen(['python', f'{theme} Version/Dungeon/gui.py'])

    def settings_open(event):
        with open('Files/Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]
    
        with open("Files/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Settings"]=='Close':

            with open("Files/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Settings"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Settings/gui.py"
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
            subprocess.Popen(['python', inv_name])

    def castle_open(event):
        with open('Files/Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]
    
        with open("Files/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Castle"]=='Close':

            with open("Files/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Castle"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Demon Castle/gui.py"
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
            subprocess.Popen(['python', inv_name])

    def inv_open(event):
        with open('Files/Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]
    
        with open("Files/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Inventory"]=='Close':

            with open("Files/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Inventory"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Inventory/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def daily_open(event):
        with open('Files/Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]
    
        with open("Files/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Daily"]=='Close':
            inv_name=f"{theme} Version/Daily Quest/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def quest_open(event):
        with open('Files/Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]
    
        with open("Files/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Quest"]=='Close':

            with open("Files/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Quest"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Quests/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def skill_open(event):
        with open('Files/Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]
    
        with open("Files/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Skill"]=='Close':

            with open("Files/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Skill"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Skills Tab/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def status_open(event):
        with open('Files/Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]
    
        with open("Files/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Status"]=='Close':

            with open("Files/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Status"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Status Tab/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def equip_open(event):
        with open('Files/Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]
    
        with open("Files/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Equipment"]=='Close':

            with open("Files/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Equipment"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Equipment/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def shop_open(event):
        with open('Files/Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]
    
        with open("Files/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Shop"]=='Close':

            with open("Files/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Shop"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Shop/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def close_full(event):
        subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
        stop_event.set()
        stop_event0.set()
        stop_event1.set()
        
        # Remove this part:
        # if 'read_cal_thread' in globals():
        #     read_cal_thread.join(timeout=1)

        # Wait for the threads to finish
        thread1.join()
        thread0.join()

        subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
        sys.exit()

    def intro(event):
        with open('Files/Data/Theme_Check.json', 'r') as themefile:
            theme_data=json.load(themefile)
            theme=theme_data["Theme"]
    
        with open("Files/Tabs.json",'r') as tab_son:
            tab_son_data=json.load(tab_son)

        if tab_son_data["Intro"]=='Close':

            with open("Files/Tabs.json",'w') as fin_tab_son:
                tab_son_data["Intro"]='Open'
                json.dump(tab_son_data,fin_tab_son,indent=4)

            inv_name=f"{theme} Version/Intro/gui.py"
            subprocess.Popen(['python', inv_name])
            subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])

    def show_job():
        canvas.itemconfig("job", state="normal")

    def hide_job():
        canvas.itemconfig("job", state="hidden")


    # ? =====================================================================
    # ! The Every 5th Level Skil Checker
    thesystem.system.random_skill_check()
    # ? =====================================================================
    thesystem.system.random_quest()
    # ? =====================================================================

    with open('Files/Data/Theme_Check.json', 'r') as themefile:
        theme_data=json.load(themefile)
        theme=theme_data["Theme"]

    with open("Files/status.json", 'r') as fson:
        data=json.load(fson)
        name=data["status"][0]['name'].upper()
        # ? =================================================
        hp=data["status"][0]['hp']
        mp=data["status"][0]['mp']
        lvl=data["status"][0]['level']
        old_lvl=f"{lvl:02d}"
        # ? =================================================
        stre=data["status"][0]['str']
        intel=data["status"][0]['int']
        agi=data["status"][0]['agi']
        vit=data["status"][0]['vit']
        per=data["status"][0]['per']
        man=data["status"][0]['man']
        # ? =================================================
        tit=data["status"][1]['title'].upper()
        job=data["status"][1]['job'].upper()
        # ? =================================================
        xp_str=data["status"][0]['XP']
        coins=data["status"][0]['coins']
        # ? =================================================
        av_str_based=data["avail_eq"][0]['str_based']
        av_int_based=data["avail_eq"][0]['int_based']
        # ? =================================================

    canvas = Canvas(
        window,
        bg = "#292929",
        height = 758,
        width = 294,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        275.8399658203125,
        54.60626983642578,
        image=image_image_1
    )

    canvas.tag_bind(image_1, "<ButtonPress-1>", open_home)

    image_image_4 = PhotoImage(
        file=relative_to_assets("image_4.png"))
    image_4 = canvas.create_image(
        279.28167724609375,
        168.85289764404297,
        image=image_image_4,
        tags="home",
        state="hidden"
    )

    canvas.tag_bind(image_4, "<ButtonPress-1>", status_open)

    image_image_7 = PhotoImage(
        file=relative_to_assets("image_7.png"))
    image_7 = canvas.create_image(
        280.1575927734375,
        303.2894287109375,
        image=image_image_7,
        tags="home1",
        state="hidden"
    )

    canvas.tag_bind(image_7, "<ButtonPress-1>", daily_open)

    image_image_10 = PhotoImage(
        file=relative_to_assets("image_10.png"))
    image_10 = canvas.create_image(
        280.30462646484375,
        458.5411682128906,
        image=image_image_10,
        tags="home2",
        state="hidden"
    )

    canvas.tag_bind(image_10, "<ButtonPress-1>", inv_open)

    image_image_13 = PhotoImage(
        file=relative_to_assets("image_13.png"))
    image_13 = canvas.create_image(
        280.30462646484375,
        619.5411987304688,
        image=image_image_13,
        tags="home3",
        state="hidden"
    )

    canvas.tag_bind(image_13, "<ButtonPress-1>", equip_open)

    image_image_16 = PhotoImage(
        file=relative_to_assets("image_16.png"))
    image_16 = canvas.create_image(
        235.0120849609375,
        127.54119491577148,
        image=image_image_16,
        tags="home4",
        state="hidden"
    )

    canvas.tag_bind(image_16, "<ButtonPress-1>", open_dungeon)

    image_image_19 = PhotoImage(
        file=relative_to_assets("image_19.png"))
    image_19 = canvas.create_image(
        235.0120849609375,
        287.54119873046875,
        image=image_image_19,
        tags="home5",
        state="hidden"
    )

    canvas.tag_bind(image_19, "<ButtonPress-1>", open_cal)

    image_image_22 = PhotoImage(
        file=relative_to_assets("image_22.png"))
    image_22 = canvas.create_image(
        235.0120849609375,
        454.54119873046875,
        image=image_image_22,
        tags="home6",
        state="hidden"
    )

    canvas.tag_bind(image_22, "<ButtonPress-1>", settings_open)

    image_image_25 = PhotoImage(
        file=relative_to_assets("image_25.png"))
    image_25 = canvas.create_image(
        235.0120849609375,
        597.15087890625,
        image=image_image_25,
        tags="home7",
        state="hidden"
    )

    canvas.tag_bind(image_25, "<ButtonPress-1>", quest_open)

    image_image_40 = PhotoImage(
        file=relative_to_assets("image_40.png"))
    image_40 = canvas.create_image(
        191.0,
        104.69878768920898,
        image=image_image_40,
        tags="home8",
        state="hidden"
    )

    canvas.tag_bind(image_40, "<ButtonPress-1>", intro)

    image_image_28 = PhotoImage(
        file=relative_to_assets("image_28.png"))
    image_28 = canvas.create_image(
        191.0120849609375,
        220.0,
        image=image_image_28,
        tags="home9",
        state="hidden"
    )

    canvas.tag_bind(image_28, "<ButtonPress-1>", skill_open)

    image_image_31 = PhotoImage(
        file=relative_to_assets("image_31.png"))
    image_31 = canvas.create_image(
        196.09890747070312,
        426.0,
        image=image_image_31,
        tags="home10",
        state="hidden"
    )

    canvas.tag_bind(image_31, "<ButtonPress-1>", castle_open)

    image_image_34 = PhotoImage(
        file=relative_to_assets("image_34.png"))
    image_34 = canvas.create_image(
        191.0120849609375,
        618.0,
        image=image_image_34,
        tags="home11",
        state="hidden"
    )

    canvas.tag_bind(image_34, "<ButtonPress-1>", shop_open)

    image_image_37 = PhotoImage(
        file=relative_to_assets("image_37.png"))
    image_37 = canvas.create_image(
        240.3637237548828,
        722.1205095925577,
        image=image_image_37,
        tags="home12",
        state="hidden"
    )

    canvas.tag_bind(image_37, "<ButtonPress-1>", close_full)

    canvas.create_text(
        99.0,
        17.0,
        anchor="nw",
        text="Job Change Quest",
        fill="#FFFFFF",
        font=("Exo Regular", 13 * -1),
        tags="job",
        state="hidden"
    )

    timer=canvas.create_text(
        122.0,
        33.0,
        anchor="nw",
        text="00:00:00",
        fill="#FFFFFF",
        font=("Exo Bold", 15 * -1),
        tags="job",
        state="hidden"
    )

    stop_event = threading.Event()
    pause_event = threading.Event()

    thread1 = threading.Thread(target=check_for_job)
    thread1.start()

    window.resizable(False, False)
    window.mainloop()

else:
    thesystem.system.message_open("System Deleted")
