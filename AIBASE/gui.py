

# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess
import threading
import json
import csv
import sys
import os

new_working_directory = r"E:/System/Edited/SystemUpdate3/System_SL-main"

os.chdir(new_working_directory)

sys.path.insert(0, new_working_directory)

import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()
subprocess.Popen(['python', 'Files\Mod\default\sfx.py']) # keep this the same

initial_height = 0
target_height = 144
window_width = 715

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.make_window_transparent(window)
thesystem.system.animate_window_open(window, target_height, window_width, step=20, delay=1)
thesystem.system.center_window(window,window_width,target_height)

window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(win):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=30, delay=1)

# DO NOT MODIFY THIS BLOCK (

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 144,
    width = 715,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

# )

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    448.0,
    277.0,
    image=image_image_1
)

with open(os.path.join("Files", "Mod", "presets.json"), 'r') as pres_file:
    pres_file_data=json.load(pres_file)
    video_path=pres_file_data["Anime"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 430.0, 263.0)

with open(os.path.join("Files", "Checks", "message.csv"), 'r') as check_file:
    check_fr=csv.reader(check_file)
    for k in check_fr:
        message=k[0]

with open(os.path.join("Files", "Mod", "presets.json"), 'r') as pres_file:
    pres_file_data=json.load(pres_file)
    file_path=pres_file_data["Message"][message][0]

canvas_center_x = window_width // 2
canvas_center_y = target_height // 2

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    47.0,
    72.0,
    image=image_image_5
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    677.0,
    71.0,
    image=image_image_6
)

canvas.create_rectangle(
    158.0,
    0.0,
    732.0,
    20.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    162.0,
    16.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    0.0,
    135.0,
    715.0,
    145.0,
    fill="#0C679B",
    outline="")

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    357.0,
    14.0,
    image=image_image_7
)

canvas.tag_bind(image_7, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_7, "<B1-Motion>", move_window)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    370.0,
    130.0,
    image=image_image_8
)

window.resizable(False, False)
window.mainloop()