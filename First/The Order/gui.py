
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess
import threading
import ujson
import csv
import sys
import os
import webbrowser
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

initial_height = 0
target_height = 510
window_width = 371

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.make_window_transparent(window)
thesystem.system.animate_window_open(window, target_height, window_width, step=20, delay=1)
thesystem.system.center_window(window,window_width,target_height)

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


def ex_close(win):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=30, delay=1)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 510,
    width = 371,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

with open("Files/Player Data/Status.json", 'r') as fson:
    data=ujson.load(fson)
    stre=data["status"][0]['str']
    intel=data["status"][0]['int']
    agi=data["status"][0]['agi']
    vit=data["status"][0]['vit']
    per=data["status"][0]['per']
    man=data["status"][0]['man']

    full_point=stre+intel+agi+vit+per+man

def finale():
    stre=entry_1.get()
    intel=entry_2.get()
    agi=entry_3.get()
    vit=entry_4.get()
    per=entry_5.get()
    man=entry_6.get()

    try:
        if full_point==(int(stre)+int(intel)+int(agi)+int(vit)+int(per)+int(man)):
            data["status"][0]['str']=int(stre)
            data["status"][0]['int']=int(intel)
            data["status"][0]['agi']=int(agi)
            data["status"][0]['vit']=int(vit)
            data["status"][0]['per']=int(per)
            data["status"][0]['man']=int(man)

            with open("Files/Player Data/Status.json", 'w') as fson:
                ujson.dump(data, fson, indent=6)

            ex_close(window)
    except:
        pass

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    383.0,
    413.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Anime"][video]
player = thesystem.system.VideoPlayer(canvas, np.load(video_path), 430.0, 263.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    234.0,
    344.272216796875,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    120.0,
    88.22274780273438,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    189.0,
    298.0,
    image=image_image_4
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: finale(),
    relief="flat"
)
button_1.place(
    x=161.0,
    y=440.0,
    width=156.0,
    height=34.0
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    0.0,
    344.4087829589844,
    image=image_image_5
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    391.0,
    342.0,
    image=image_image_6
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    270.0,
    20.0,
    image=image_image_7
)

canvas.tag_bind(image_7, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_7, "<B1-Motion>", move_window)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    300.0,
    514.0,
    image=image_image_8
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_2.place(
    x=411.0,
    y=63.3824462890625,
    width=20.0,
    height=20.0
)

canvas.create_text(
    64.0,
    124.0,
    anchor="nw",
    text="Ensure that all points add up to ",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

canvas.create_text(
    64.0,
    140.0,
    anchor="nw",
    text="below points or the Program will",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

canvas.create_text(
    64.0,
    156.0,
    anchor="nw",
    text="not Allow you to Change Points",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

canvas.create_text(
    64.0,
    193.0,
    anchor="nw",
    text=f"Points Available: {full_point}",
    fill="#FFFFFF",
    font=("Montserrat Bold", 13 * -1)
)

canvas.create_text(
    64.0,
    234.0,
    anchor="nw",
    text="STR:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 13 * -1)
)

entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=105.0,
    y=235.0,
    width=55.0,
    height=16.0
)

canvas.create_text(
    64.0,
    259.0,
    anchor="nw",
    text="INT:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 13 * -1)
)

entry_2 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=105.0,
    y=260.0,
    width=55.0,
    height=16.0
)

canvas.create_text(
    64.0,
    283.0,
    anchor="nw",
    text="AGI:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 13 * -1)
)

entry_3 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=105.0,
    y=284.0,
    width=55.0,
    height=16.0
)

canvas.create_text(
    64.0,
    308.0,
    anchor="nw",
    text="VIT:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 13 * -1)
)


entry_4 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_4.place(
    x=105.0,
    y=309.0,
    width=55.0,
    height=16.0
)

canvas.create_text(
    64.0,
    332.0,
    anchor="nw",
    text="PER:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 13 * -1)
)


entry_5 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_5.place(
    x=105.0,
    y=334.0,
    width=55.0,
    height=16.0
)

canvas.create_text(
    64.0,
    356.0,
    anchor="nw",
    text="MAN:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 13 * -1)
)


entry_6 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_6.place(
    x=105.0,
    y=358.0,
    width=55.0,
    height=16.0
)
window.resizable(False, False)
window.mainloop()
