
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label
import subprocess
import threading
from concurrent.futures import ThreadPoolExecutor
import random
import cv2
import ujson
from PIL import Image, ImageTk
import time
import csv
import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root

def ex_close(eve):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=20, delay=1)

def name(eve,name):
    with open("Files/Player Data/Theme_Check.json", 'r') as file:
        data = ujson.load(file)
    
    # Modify the theme from "Anime" to "Manwha"
    data["Theme"] = name
    
    # Write the updated data back to the file
    with open("Files/Player Data/Theme_Check.json", 'w') as file:
        ujson.dump(data, file, indent=4)

    with open("Files/Checks/theme_open.csv", 'r') as info_open:
        info_fr=csv.reader(info_open)
        for k in info_fr:
            istrue=k[0]

    with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=ujson.load(themefile)
            theme=theme_data["Theme"]

    if istrue=='True':
        subprocess.Popen(['Python', f'{theme} Version/Settings/gui.py'])
        with open("Files/Checks/theme_open.csv", 'w', newline='') as info_open:
            fw=csv.writer(info_open)
            fw.writerow(["False"])
        ex_close(window)
    
    else:
        subprocess.Popen(['python', 'gui.py'])
        ex_close(window)

window = Tk()

initial_height = 0
target_height = 592
window_width = 934

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.animate_window_open(window, target_height, window_width, step=50, delay=1)

thesystem.system.center_window(window,window_width,target_height)
window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)
thesystem.system.make_window_transparent(window)

top_folder_path = "thesystem/top_bar"
bottom_folder_path = "thesystem/bottom_bar"

top_images = [f"{top_folder_path}/dailyquest.py{str(i).zfill(4)}.png" for i in range(1, 501)]
bottom_images = [f"{bottom_folder_path}/{str(i).zfill(4)}.png" for i in range(1, 501)]

def resize_image(image_path, size):
    """Resize an image and return the processed PIL Image."""
    if os.path.exists(image_path):
        return Image.open(image_path).resize(size)
    return None

def preload_images(image_paths, size):
    """Preload images by resizing them in parallel and converting them on the main thread."""
    resized_images = []

    # Resize images in parallel
    with ThreadPoolExecutor() as executor:
        resized_images = list(executor.map(lambda path: resize_image(path, size), image_paths))

    # Create PhotoImage objects on the main thread
    preloaded_images = [
        ImageTk.PhotoImage(img) for img in resized_images if img is not None
    ]
    return preloaded_images

# Define the size for each set of images
top_size = (861, 43)
bottom_size = (850, 47)

# Preload top and bottom images
top_preloaded_images = preload_images(top_images, top_size)
bottom_preloaded_images = preload_images(bottom_images, bottom_size)
subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 592,
    width = 934,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    731.0,
    384.0,
    image=image_image_1
)


with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Anime"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 430.0, 263.0, pause_duration=0.6, resize_factor=-1)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    471.0,
    312.1454162597656,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    236.0,
    113.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    309.0,
    310.0,
    image=image_image_4
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: name(0, "Anime"),
    relief="flat"
)
button_1.place(
    x=369.0,
    y=402.0,
    width=86.0,
    height=17.0
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    621.0,
    310.0,
    image=image_image_5
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: name(0, "Manwha"),
    relief="flat"
)
button_2.place(
    x=679.0,
    y=402.0,
    width=86.0,
    height=17.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(0),
    relief="flat"
)
button_3.place(
    x=756.0,
    y=92.0,
    width=25.0,
    height=25.0
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    69.0,
    313.0,
    image=image_image_6
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    865.0,
    325.0,
    image=image_image_7
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    113.0,
    306.0,
    image=image_image_8
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    818.0,
    303.0,
    image=image_image_9
)

canvas.create_rectangle(
    0.0,
    0.0,
    336.0,
    50.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    139.0,
    23.0,
    793.0,
    76.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    0.0,
    541.0,
    1300.0,
    592.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    235.0,
    0.0,
    934.0,
    69.0,
    fill="#0C679B",
    outline="")


# Create the initial canvas image
image_index = 0
bot_image_index = 0

# Top bar animation
top_image = canvas.create_image(452.0, 56.0, image=top_preloaded_images[image_index])

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

# Bottom bar animation
bottom_image = canvas.create_image(459.0, 562.0, image=bottom_preloaded_images[bot_image_index])

# Function to update the image
def update_images():
    global image_index, bot_image_index

    # Update top image
    image_index = (image_index + 1) % len(top_preloaded_images)
    canvas.itemconfig(top_image, image=top_preloaded_images[image_index])

    # Update bottom image
    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    canvas.itemconfig(bottom_image, image=bottom_preloaded_images[bot_image_index])

    # Schedule next update (24 FPS)
    window.after(1000 // 24, update_images)

# Start the animation
update_images()

window.resizable(False, False)
window.mainloop()