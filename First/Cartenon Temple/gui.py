<<<<<<< Updated upstream

# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess
import random
import cv2
import json
from PIL import Image, ImageTk
import time
import csv
import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def center_window(root, width, height):
    # Get screen width and height
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    
    # Calculate position x, y to center the window
    x = (screen_width - width) // 2
    y = (screen_height - height) // 2
    
    # Set the dimensions of the window and the position
    root.geometry(f'{width}x{height}+{x}+{y}')


window = Tk()

window.geometry("1102x602")
center_window(window,1102,602)
window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

value=1
score=0
confirm=False

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(win=window):
    win.quit()

def ex_close_0(win=window):
    subprocess.Popen(['python', 'First/Health Warning/gui.py'])
    win.quit()

def confirming():
    global value
    global score
    global confirm

    num=entry_1.get()

    if value==1:
        if num=='1' or num=='9':
            score+=2
        elif num=='2' or num=='8':
            score+=4
        elif num=='3' or num=='7':
            score+=6
        elif num=='4' or num=='6':
            score+=8
        elif num=='5':
            score+=10
        elif num=='10':
            score+=1
        else:
            score+=0
        value+=1
        start((value-1))

    elif value in [2,3,4,5]:
        try:
            score+=int(num)
        except:
            score+=0
        value+=1
        start((value-1))

        if value==5:
            if score>=20:
                confirm=True
            start(5)

def play():
    canvas.itemconfig("Zero", state="normal")
    window.after(5000, start)

def answer():
    subprocess.Popen(['python', 'Files\Mod\default\sfx_glitch.py'])
    global confirm

    canvas.itemconfig("Sixth", state="hidden")
    if confirm==True:
        canvas.itemconfig("Yes", state="normal")
        with open("Files/Data/Prove_file.csv", 'w', newline='') as first_open_check_file:
            fw=csv.writer(first_open_check_file)
            fw.writerow(["True"])
        window.after(5000, ex_close_0)
    elif confirm==False:
        canvas.itemconfig("No", state="normal")
        window.after(5000, ex_close)

def start(c=0):
    global confirm

    if c==0:
        subprocess.Popen(['python', 'Files\Mod\default\sfx_glitch.py'])
        canvas.itemconfig("Zero", state="hidden")
        canvas.itemconfig("First", state="normal")
    elif c==1:
        subprocess.Popen(['python', 'Files\Mod\default\sfx_glitch.py'])
        canvas.itemconfig("Zero", state="hidden")
        canvas.itemconfig("First", state="hidden")
        canvas.itemconfig("Second", state="normal")
    elif c==2:
        subprocess.Popen(['python', 'Files\Mod\default\sfx_glitch.py'])
        canvas.itemconfig("First", state="hidden")
        canvas.itemconfig("Second", state="hidden")
        canvas.itemconfig("Third", state="normal")
    elif c==3:
        subprocess.Popen(['python', 'Files\Mod\default\sfx_glitch.py'])
        canvas.itemconfig("First", state="hidden")
        canvas.itemconfig("Second", state="hidden")
        canvas.itemconfig("Third", state="hidden")
        canvas.itemconfig("Fourth", state="normal")
    elif c==4:
        subprocess.Popen(['python', 'Files\Mod\default\sfx_glitch.py'])
        canvas.itemconfig("First", state="hidden")
        canvas.itemconfig("Second", state="hidden")
        canvas.itemconfig("Third", state="hidden")
        canvas.itemconfig("Fourth", state="hidden")
        canvas.itemconfig("Fifth", state="normal")
    elif c==5:
        subprocess.Popen(['python', 'Files\Mod\default\sfx_glitch.py'])
        canvas.itemconfig("First", state="hidden")
        canvas.itemconfig("Second", state="hidden")
        canvas.itemconfig("Third", state="hidden")
        canvas.itemconfig("Fourth", state="hidden")
        canvas.itemconfig("Fifth", state="hidden")
        canvas.itemconfig("Sixth", state="normal")
        window.after(4000, answer)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 602,
    width = 1102,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    961.0,
    329.0,
    image=image_image_1
)

with open("Files\Mod\presets.json", 'r') as pres_file:
    pres_file_data=json.load(pres_file)
    video_path=pres_file_data["Anime"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 478.0, 313.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    560.0,
    319.0,
    image=image_image_2
)

canvas.create_rectangle(
    0.0,
    0.0,
    1102.0,
    37.0,
    fill="#262626",
    outline="")

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    551.0,
    308.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    102.0,
    180.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    150.0,
    274.0,
    image=image_image_5
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    1037.0,
    180.0,
    image=image_image_6
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    958.0,
    303.0,
    image=image_image_7
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    959.0,
    260.0,
    image=image_image_8
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    960.0,
    349.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=836.0,
    y=335.0,
    width=248.0,
    height=27.0
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: confirming(),
    relief="flat"
)
button_1.place(
    x=997.0,
    y=379.0,
    width=80.0,
    height=19.0
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    149.0,
    265.0,
    image=image_image_9,
    tags="Zero",
    state="hidden" 
)

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    149.0,
    265.0,
    image=image_image_10,
    tags="First",
    state="hidden"  
)

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    149.0,
    255.0,
    image=image_image_11,
    tags="Second",
    state="hidden"
)

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    149.0,
    255.0,
    image=image_image_12,
    tags="Third",
    state="hidden"
)

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    149.0,
    255.0,
    image=image_image_13,
    tags="Fourth",
    state="hidden"
)

image_image_14 = PhotoImage(
    file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(
    149.0,
    255.0,
    image=image_image_14,
    tags="Fifth",
    state="hidden"
)

image_image_15 = PhotoImage(
    file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(
    149.0,
    255.0,
    image=image_image_15,
    tags="Sixth",
    state="hidden"
)

image_image_16 = PhotoImage(
    file=relative_to_assets("image_16.png"))
image_16 = canvas.create_image(
    149.0,
    255.0,
    image=image_image_16,
    tags="No",
    state="hidden"
)

image_image_17 = PhotoImage(
    file=relative_to_assets("image_17.png"))
image_17 = canvas.create_image(
    149.0,
    255.0,
    image=image_image_17,
    tags="Yes",
    state="hidden"
)

play()
subprocess.Popen(['python', 'First/Cartenon Temple/gui1.py'])

window.resizable(False, False)
window.mainloop()
=======

# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess
import random
import cv2
import ujson
from PIL import Image, ImageTk
import time
import csv
import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

subprocess.Popen(['python', 'Files\Mod\default\sfx.py'])

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def center_window(root, width, height):
    # Get screen width and height
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    
    # Calculate position x, y to center the window
    x = (screen_width - width) // 2
    y = (screen_height - height) // 2
    
    # Set the dimensions of the window and the position
    root.geometry(f'{width}x{height}+{x}+{y}')


window = Tk()

window.geometry("1102x602")
center_window(window,1102,602)
window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

value=1
score=0
confirm=False

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(win=window):
    win.quit()

def ex_close_0(win=window):
    subprocess.Popen(['python', 'First/Health Warning/gui.py'])
    win.quit()

def confirming():
    global value
    global score
    global confirm

    num=entry_1.get()

    if value==1:
        if num=='1' or num=='9':
            score+=2
        elif num=='2' or num=='8':
            score+=4
        elif num=='3' or num=='7':
            score+=6
        elif num=='4' or num=='6':
            score+=8
        elif num=='5':
            score+=10
        elif num=='10':
            score+=1
        else:
            score+=0
        value+=1
        start((value-1))

    elif value in [2,3,4,5]:
        try:
            score+=int(num)
        except:
            score+=0
        value+=1
        start((value-1))

        if value==5:
            if score>=20:
                confirm=True
            start(5)

def play():
    canvas.itemconfig("Zero", state="normal")
    window.after(5000, start)

def answer():
    subprocess.Popen(['python', 'Files\Mod\default\sfx_glitch.py'])
    global confirm

    canvas.itemconfig("Sixth", state="hidden")
    if confirm==True:
        canvas.itemconfig("Yes", state="normal")
        with open("Files/Data/Prove_file.csv", 'w', newline='') as first_open_check_file:
            fw=csv.writer(first_open_check_file)
            fw.writerow(["True"])
        window.after(5000, ex_close_0)
    elif confirm==False:
        canvas.itemconfig("No", state="normal")
        window.after(5000, ex_close)

def start(c=0):
    global confirm

    if c==0:
        subprocess.Popen(['python', 'Files\Mod\default\sfx_glitch.py'])
        canvas.itemconfig("Zero", state="hidden")
        canvas.itemconfig("First", state="normal")
    elif c==1:
        subprocess.Popen(['python', 'Files\Mod\default\sfx_glitch.py'])
        canvas.itemconfig("Zero", state="hidden")
        canvas.itemconfig("First", state="hidden")
        canvas.itemconfig("Second", state="normal")
    elif c==2:
        subprocess.Popen(['python', 'Files\Mod\default\sfx_glitch.py'])
        canvas.itemconfig("First", state="hidden")
        canvas.itemconfig("Second", state="hidden")
        canvas.itemconfig("Third", state="normal")
    elif c==3:
        subprocess.Popen(['python', 'Files\Mod\default\sfx_glitch.py'])
        canvas.itemconfig("First", state="hidden")
        canvas.itemconfig("Second", state="hidden")
        canvas.itemconfig("Third", state="hidden")
        canvas.itemconfig("Fourth", state="normal")
    elif c==4:
        subprocess.Popen(['python', 'Files\Mod\default\sfx_glitch.py'])
        canvas.itemconfig("First", state="hidden")
        canvas.itemconfig("Second", state="hidden")
        canvas.itemconfig("Third", state="hidden")
        canvas.itemconfig("Fourth", state="hidden")
        canvas.itemconfig("Fifth", state="normal")
    elif c==5:
        subprocess.Popen(['python', 'Files\Mod\default\sfx_glitch.py'])
        canvas.itemconfig("First", state="hidden")
        canvas.itemconfig("Second", state="hidden")
        canvas.itemconfig("Third", state="hidden")
        canvas.itemconfig("Fourth", state="hidden")
        canvas.itemconfig("Fifth", state="hidden")
        canvas.itemconfig("Sixth", state="normal")
        window.after(4000, answer)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 602,
    width = 1102,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    961.0,
    329.0,
    image=image_image_1
)

with open("Files\Mod\presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Anime"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 478.0, 313.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    560.0,
    319.0,
    image=image_image_2
)

canvas.create_rectangle(
    0.0,
    0.0,
    1102.0,
    37.0,
    fill="#262626",
    outline="")

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    551.0,
    308.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    102.0,
    180.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    150.0,
    274.0,
    image=image_image_5
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    1037.0,
    180.0,
    image=image_image_6
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    958.0,
    303.0,
    image=image_image_7
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    959.0,
    260.0,
    image=image_image_8
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    960.0,
    349.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=836.0,
    y=335.0,
    width=248.0,
    height=27.0
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: confirming(),
    relief="flat"
)
button_1.place(
    x=997.0,
    y=379.0,
    width=80.0,
    height=19.0
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    149.0,
    265.0,
    image=image_image_9,
    tags="Zero",
    state="hidden" 
)

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    149.0,
    265.0,
    image=image_image_10,
    tags="First",
    state="hidden"  
)

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    149.0,
    255.0,
    image=image_image_11,
    tags="Second",
    state="hidden"
)

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    149.0,
    255.0,
    image=image_image_12,
    tags="Third",
    state="hidden"
)

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    149.0,
    255.0,
    image=image_image_13,
    tags="Fourth",
    state="hidden"
)

image_image_14 = PhotoImage(
    file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(
    149.0,
    255.0,
    image=image_image_14,
    tags="Fifth",
    state="hidden"
)

image_image_15 = PhotoImage(
    file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(
    149.0,
    255.0,
    image=image_image_15,
    tags="Sixth",
    state="hidden"
)

image_image_16 = PhotoImage(
    file=relative_to_assets("image_16.png"))
image_16 = canvas.create_image(
    149.0,
    255.0,
    image=image_image_16,
    tags="No",
    state="hidden"
)

image_image_17 = PhotoImage(
    file=relative_to_assets("image_17.png"))
image_17 = canvas.create_image(
    149.0,
    255.0,
    image=image_image_17,
    tags="Yes",
    state="hidden"
)

play()
subprocess.Popen(['python', 'First/Cartenon Temple/gui1.py'])

window.resizable(False, False)
window.mainloop()
>>>>>>> Stashed changes
