
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import ujson
import time
import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

slide=1

window = Tk()

initial_height = 0
initial_width = 0
target_height = 432
window_width = 712

window.geometry(f"{initial_width}x{initial_height}")
thesystem.system.animate_window_open_middle(window, target_height, window_width, step=35, delay=1)

#thesystem.system.center_window(window,window_width,target_height)
window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root


canvas = Canvas(
    window,
    bg = "#0678FF",
    height = 432,
    width = 712,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

def next(eve):
    subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
    global slide
    if slide == 1:
        canvas.itemconfig("s1",state="hidden")
        canvas.itemconfig("s2", state="normal")
        slide+=1
    elif slide == 2:
        canvas.itemconfig("s2", state="hidden")
        canvas.itemconfig("s3", state="normal")
        slide+=1    
    elif slide == 3:
        canvas.itemconfig("s3", state="hidden")
        canvas.itemconfig("s4", state="normal")
        slide+=1    
    elif slide == 4:
        canvas.itemconfig("s4", state="hidden")
        canvas.itemconfig("s5", state="normal")
        canvas.itemconfig("s6", state="hidden")
    subprocess.Popen(['python', 'Files/Mod/default/sfx_glitch.py'])

def keep(eve):
    subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
    window.quit()

def remove(eve):
    subprocess.Popen(['python', 'Files/Mod/default/sfx_button.py'])
    
    file_path= "Files/Player Data/Vow_status.json"
    # Create the file
    with open(file_path, 'w') as file:
        ujson.dump({"Vow": True}, file, indent=4)  # Create an empty file
    thesystem.system.message_open("Final Session")
    window.quit()

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    356.0,
    216.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    356.0,
    216.0,
    image=image_image_2
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    357.0,
    68.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    358.0,
    23.0,
    image=image_image_5
)

canvas.tag_bind(image_5, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_5, "<B1-Motion>", move_window)

image_image_0 = PhotoImage(
    file=relative_to_assets("image_0.png"))
image_0 = canvas.create_image(
    621.0,
    378.0,
    image=image_image_0,
    tags="s6"
)

canvas.tag_bind(image_0, "<ButtonPress-1>", next)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    357.0,
    216.0,
    image=image_image_6,
    tags="s1"
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    357.0,
    234.0,
    image=image_image_7,
    tags="s2",
    state="hidden"
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    357.0,
    224.0,
    image=image_image_8,
    tags="s3",
    state="hidden"
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    357.0,
    231.0,
    image=image_image_9,
    tags="s4",
    state="hidden"
)

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    357.0,
    189.0,
    image=image_image_10,
    tags="s5",
    state="hidden"
)

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    245.0,
    252.0,
    image=image_image_11,
    tags="s5",
    state="hidden"
)

canvas.tag_bind(image_11, "<ButtonPress-1>", keep)

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    468.0,
    252.0,
    image=image_image_12,
    tags="s5",
    state="hidden"
)

canvas.tag_bind(image_12, "<ButtonPress-1>", remove)

window.resizable(False, False)
window.mainloop()
