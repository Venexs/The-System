
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# Fork by Venexs


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import ujson
import csv
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root

def ex_close(win):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, 0, window_width, step=20, delay=1)

window = Tk()

initial_height = 0
target_height = 774
window_width = 477

window.geometry(f"{window_width}x{initial_height}")

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

thesystem.system.make_window_transparent(window,transp_clr)
thesystem.system.animate_window_open(window, target_height, window_width, step=50, delay=1)

top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (488, 38), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (488, 33), job, type_="bottom")

subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])

window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

def entry_data():
    push_name=entry_1.get()
    sit_name=entry_2.get()
    squat_name=entry_3.get()
    run_name=entry_4.get()
    int_name=entry_5.get()
    main_step=entry_6.get()
    main_max=entry_7.get()
    side_step=entry_8.get()
    side_max=entry_9.get()
    #================================================================
    if push_name=="":
        push_name="Pushups"
    if sit_name=="":
        sit_name="Sit_ups"
    if squat_name=="":
        squat_name="Squats"
    if run_name=="":
        run_name="Running"
    if int_name=="":
        int_name="Chapter Reading"
    # =================================================================
    if main_max=="":
        main_max="100"
    if side_max=="":
        side_max="10"
    if main_step=="":
        main_step="5"
    if side_step=="":
        side_step="0.5"
    #================================================================

    try:
        main_max=int(main_max)
        side_max=float(side_max)
        main_step=int(main_step)
        side_step=float(side_step)


        with open("Files/Player Data/Daily_Quest.json", 'r') as daily_quest_file:
            daily_quest_data=ujson.load(daily_quest_file)
            daily_quest_data["Change"][0]["1"][0]=push_name
            daily_quest_data["Change"][1]["2"][0]=sit_name
            daily_quest_data["Change"][2]["3"][0]=squat_name
            daily_quest_data["Change"][3]["4"][0]=run_name

            daily_quest_data["Change"][4]["5"][0]=int_name

            daily_quest_data["Steps"][0]=side_step
            daily_quest_data["Steps"][1]=main_step
            daily_quest_data["Steps"][2]=main_max
            daily_quest_data["Steps"][3]=side_max

            daily_quest_data["Final"]["Push"]=main_step
            daily_quest_data["Final"]["Sit"]=main_step
            daily_quest_data["Final"]["Squat"]=main_step

            daily_quest_data["Final"]["Run"]=side_step
            daily_quest_data["Final"]["Int_type"]=side_step

            daily_quest_data["Streak"]["Value"]=0
            daily_quest_data["Streak"]["Greater_value"]=0

            with open("Files/Player Data/Daily_Quest.json", 'w') as daily_quest_file:
                ujson.dump(daily_quest_data, daily_quest_file, indent=4)

            with open("Files/Checks/info_open.csv", 'r') as info_open:
                info_fr=csv.reader(info_open)
                for k in info_fr:
                    istrue=k[0]

            if istrue=='True':
                with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
                    theme_data=ujson.load(themefile)
                    theme=theme_data["Theme"]

                subprocess.Popen(['Python', f'{theme} Version/Settings/gui.py'])
                with open("Files/Checks/daily_open.csv", 'w', newline='') as info_open:
                    fw=csv.writer(info_open)
                    fw.writerow(["False"])
            
            else:
                subprocess.Popen(['python', 'First/Penalty Check/gui.py'])
            
            ex_close(window)

    except ValueError:
        print("Error, Retrying...")

def only_numbers(char):
    if char == "":
        return True  # allow clearing the field
    return char.isdigit()

def is_valid_decimal(new_value):
    if new_value == "":
        return True  # allow clearing the field
    try:
        float(new_value)
        return True
    except ValueError:
        return False
    
vcmd = window.register(only_numbers)

vcmd_dec = window.register(is_valid_decimal)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 774,
    width = 477,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    277.0,
    495.0,
    image=image_image_1
)

pres_file_data=thesystem.misc.load_ujson("Files/Mod/presets.json")
normal_font_col=pres_file_data["Anime"]["Normal Font Color"]
video_path=pres_file_data["Anime"][video]
player = thesystem.system.FastVideoPlayer(canvas, np.load(video_path), 277.0, 400.0, 
                                      resize_factor=0.6, pause_duration=0.9, buffer_size=50)


image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    244.0,
    403.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    239.0,
    92.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    243.0,
    426.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    244.0,
    180.0,
    image=image_image_5
)

canvas.create_text(
    70.0,
    290.0,
    anchor="nw",
    text="Exercise 1:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 15 * -1)
)

canvas.create_text(
    76.0,
    310.0,
    anchor="nw",
    text="Name of Activity:",
    fill="#FFFFFF",
    font=("Montserrat Medium", 14 * -1)
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    170.0,
    342.0,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=76.0,
    y=332.0,
    width=188.0,
    height=18.0
)

canvas.create_text(
    70.0,
    361.0,
    anchor="nw",
    text="Exercise 2:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 15 * -1)
)

canvas.create_text(
    76.0,
    383.0,
    anchor="nw",
    text="Name of Activity:",
    fill="#FFFFFF",
    font=("Montserrat Medium", 14 * -1)
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    170.0,
    415.0,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=76.0,
    y=405.0,
    width=188.0,
    height=18.0
)

canvas.create_text(
    70.0,
    432.0,
    anchor="nw",
    text="Exercise 3:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 15 * -1)
)

canvas.create_text(
    76.0,
    452.0,
    anchor="nw",
    text="Name of Activity:",
    fill="#FFFFFF",
    font=("Montserrat Medium", 14 * -1)
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    170.0,
    484.0,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=76.0,
    y=474.0,
    width=188.0,
    height=18.0
)

canvas.create_text(
    70.0,
    509.0,
    anchor="nw",
    text="Exercise 4:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 15 * -1)
)

canvas.create_text(
    76.0,
    531.0,
    anchor="nw",
    text="Name of Activity:",
    fill="#FFFFFF",
    font=("Montserrat Medium", 14 * -1)
)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    170.0,
    563.0,
    image=entry_image_4
)
entry_4 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_4.place(
    x=76.0,
    y=553.0,
    width=188.0,
    height=18.0
)

canvas.create_text(
    70.0,
    589.0,
    anchor="nw",
    text="Exercise 5:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 15 * -1)
)

canvas.create_text(
    76.0,
    611.0,
    anchor="nw",
    text="Name of Activity:",
    fill="#FFFFFF",
    font=("Montserrat Medium", 14 * -1)
)

entry_image_5 = PhotoImage(
    file=relative_to_assets("entry_5.png"))
entry_bg_5 = canvas.create_image(
    170.0,
    643.0,
    image=entry_image_5
)
entry_5 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_5.place(
    x=76.0,
    y=633.0,
    width=188.0,
    height=18.0
)

canvas.create_text(
    317.0,
    363.0,
    anchor="nw",
    text="Step:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 15 * -1)
)

entry_image_6 = PhotoImage(
    file=relative_to_assets("entry_6.png"))
entry_bg_6 = canvas.create_image(
    339.0,
    401.0,
    image=entry_image_6
)
entry_6 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0,
    validate="key",
    validatecommand=(vcmd, '%S')
)
entry_6.place(
    x=317.0,
    y=383.0,
    width=44.0,
    height=34.0
)

canvas.create_text(
    372.0,
    363.0,
    anchor="nw",
    text="Max:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 15 * -1)
)

entry_image_7 = PhotoImage(
    file=relative_to_assets("entry_7.png"))
entry_bg_7 = canvas.create_image(
    395.0,
    401.0,
    image=entry_image_7
)
entry_7 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0,
    validate="key",
    validatecommand=(vcmd, '%S')
)
entry_7.place(
    x=372.0,
    y=383.0,
    width=46.0,
    height=34.0
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    284.0,
    404.0,
    image=image_image_6
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    243.0,
    266.0,
    image=image_image_7
)

canvas.create_text(
    318.0,
    322.0,
    anchor="nw",
    text="Default Step: 5\nDefault Max: 100\n(NO DECIMALS)",
    fill="#FFFFFF",
    font=("Montserrat Bold", 11 * -1)
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    281.0,
    604.0,
    image=image_image_8
)

canvas.create_text(
    314.0,
    592.0,
    anchor="nw",
    text="Step:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 15 * -1)
)

entry_image_8 = PhotoImage(
    file=relative_to_assets("entry_8.png"))
entry_bg_8 = canvas.create_image(
    336.0,
    630.0,
    image=entry_image_8
)
entry_8 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0,
    validate="key",
    validatecommand=(vcmd_dec, '%P')
)
entry_8.place(
    x=314.0,
    y=612.0,
    width=44.0,
    height=34.0
)

canvas.create_text(
    369.0,
    592.0,
    anchor="nw",
    text="Max:",
    fill="#FFFFFF",
    font=("Montserrat Bold", 15 * -1)
)

entry_image_9 = PhotoImage(
    file=relative_to_assets("entry_9.png"))
entry_bg_9 = canvas.create_image(
    392.0,
    630.0,
    image=entry_image_9
)
entry_9 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0,
    validate="key",
    validatecommand=(vcmd_dec, '%P')
)
entry_9.place(
    x=369.0,
    y=612.0,
    width=46.0,
    height=34.0
)

canvas.create_text(
    315.0,
    560.0,
    anchor="nw",
    text="Default Step: 0.5\nDefault Max: 10",
    fill="#FFFFFF",
    font=("Montserrat Bold", 11 * -1)
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    243.0,
    704.0,
    image=image_image_9
)

side = PhotoImage(file=relative_to_assets("blue.png"))
if job.upper()!="NONE":
    side = PhotoImage(file=relative_to_assets("purple.png"))
canvas.create_image(15.0, 381.0, image=side)
canvas.create_image(468.0, 404.0, image=side)

canvas.create_rectangle(
    0.0,
    0.0,
    200.0,
    34.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    743.0,
    515.0,
    774.0,
    fill=transp_clr,
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    498.0,
    49.0,
    fill=transp_clr,
    outline="")

image_40 = thesystem.system.side_bar("left_bar.png", (101, 722))
canvas.create_image(0.0, 396.0, image=image_40)

image_50 = thesystem.system.side_bar("right_bar.png", (80, 718))
canvas.create_image(470.0, 390.0, image=image_50)

image_index = 0
bot_image_index = 0

top_image = canvas.create_image(
    238.0,
    35.0,
    image=top_preloaded_images[image_index]
)

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

bottom_image = canvas.create_image(
    244.0,
    750.0,
    image=bottom_preloaded_images[bot_image_index]
)

step,delay=1,1

def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

# Start the animation
update_images()

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_1.place(
    x=416.0,
    y=61.0,
    width=20.0,
    height=20.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: entry_data(),
    relief="flat"
)
button_2.place(
    x=305.0,
    y=653.0,
    width=115.0,
    height=23.0
)

window.resizable(False, False)
window.mainloop()
