
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# Fork by Venexs


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, filedialog
import ujson
import csv
import subprocess
import threading
import cv2
from PIL import Image, ImageTk
import sys
import os
import numpy as np

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.system


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def start_move(event):
    window.lastx, window.lasty = event.widget.winfo_pointerxy()

def move_window(event):
    x_root, y_root = event.widget.winfo_pointerxy()
    deltax, deltay = x_root - window.lastx, y_root - window.lasty

    if deltax != 0 or deltay != 0:  # Update only if there is actual movement
        window.geometry(f"+{window.winfo_x() + deltax}+{window.winfo_y() + deltay}")
        window.lastx, window.lasty = x_root, y_root

def ex_close(eve):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=20, delay=1)

window = Tk()

initial_height = 0
target_height = 382
window_width = 730

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.animate_window_open(window, target_height, window_width, step=50, delay=1)

thesystem.system.center_window(window,window_width,target_height)
window.configure(bg = "#FFFFFF")
set_data=thesystem.misc.return_settings()
transp_value=set_data["Settings"]["Transparency"]

window.attributes('-alpha',transp_value)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)
thesystem.system.make_window_transparent(window)

job=thesystem.misc.return_status()["status"][1]["job"]

top_val='dailyquest.py'
all_prev=''
video='Video'
transp_clr='#0C679B'

if job!='None':
    top_val=''
    all_prev='alt_'
    video='Alt Video'
    transp_clr='#652AA3'

top_images = f"thesystem/{all_prev}top_bar"
bottom_images = f"thesystem/{all_prev}bottom_bar"

top_preloaded_images = thesystem.system.load_or_cache_images(top_images, (727, 38), job, type_="top")
bottom_preloaded_images = thesystem.system.load_or_cache_images(bottom_images, (737, 27), job, type_="bottom")


trimpath1 = trimpath2 = ""
exe_name1 = exe_name2 = ""

def choose_file(value):
    global trimpath1, exe_name1, trimpath2, exe_name2
    file_path = filedialog.askopenfilename(
        title="Select an EXE file",
        filetypes=[("Executable files", "*.exe")]
    )

    if not file_path:
        print("No file selected.")
        if value == 1:
            trimpath1 = "-"; exe_name1 = "-"
        else:
            trimpath2 = "-"; exe_name2 = "-"
        
    file_name = os.path.basename(file_path)

    if len(file_path) > 70:
        if value == 1:
            trimpath1 = file_path[:69] + "-"
            exe_name1 = file_name.split("/")[-1]
        else:
            trimpath2 = file_path[:69] + "-"
            exe_name2 = file_name.split("/")[-1]
    else:
        if value == 1:
            trimpath1 = file_path
            exe_name1 = file_name.split("/")[-1]
        else:
            trimpath2 = file_path
            exe_name2 = file_name.split("/")[-1]

    canvas.itemconfig(path1, text=trimpath1)
    canvas.itemconfig(path2, text=trimpath2)

def complete():
    with open("Files\Player Data\Penalty_Info.json" , 'r') as pen_info_file:
        pen_info_data=ujson.load(pen_info_file)
        info = pen_info_data["Penalty Info"]
        info[0] = exe_name1
        info[1] = exe_name2
        pen_info_data["Penalty Info"] = info

        hh=entry_1.get("1.0", "end-1c") 
        mm=entry_2.get("1.0", "end-1c") 
        try:
            hh = entry_1.get("1.0", "end-1c")
            mm = entry_2.get("1.0", "end-1c") 
        except:
            hh=0
            mm=0
        pen_info_data["Penalty Time"] = f"{hh}:{mm}"
    with open("Files\Player Data\Penalty_Info.json" , 'w') as pen_info_file:
        ujson.dump(pen_info_data, pen_info_file, indent=4)

    with open("Files/Checks/penalty_open.csv", 'r') as info_open:
        info_fr=csv.reader(info_open)
        for k in info_fr:
            istrue=k[0]

    if istrue=='True':
        with open('Files/Player Data/Theme_Check.json', 'r') as themefile:
            theme_data=ujson.load(themefile)
            theme=theme_data["Theme"]

        subprocess.Popen(['Python', f'{theme} Version/Settings/gui.py'])
        with open("Files/Checks/penalty_open.csv", 'w', newline='') as info_open:
            fw=csv.writer(info_open)
            fw.writerow(["False"])
        ex_close(window)
    
    else:
        subprocess.Popen(['python', 'First/Theme Check/gui.py'])
        ex_close(window)

def only_numbers(char):
    if char == "":
        return True  # allow clearing the field
    return char.isdigit()
    
vcmd = window.register(only_numbers)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 385,
    width = 730,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    591.0,
    363.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=ujson.load(pres_file)
    video_path=pres_file_data["Anime"][video]
player = thesystem.system.FastVideoPlayer(canvas, np.load(video_path), 430.0, 263.0, pause_duration=0.6, resize_factor=-1)


image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    365.0,
    72.0,
    image=image_image_2
)

canvas.create_text(
    63.0,
    101.0,
    anchor="nw",
    text="Please Enter paths to a specific program that distracts you such as a Video Game  ",
    fill="#FFFFFF",
    font=("Montserrat Regular", 12 * -1)
)

canvas.create_text(
    68.0,
    118.0,
    anchor="nw",
    text="D:/Games/Warframe/Downloaded/Public/Warframe.x64.exe",
    fill="#74D5FF",
    font=("Montserrat Bold", 10 * -1)
)

canvas.create_text(
    53.0,
    118.0,
    anchor="nw",
    text="Ex: ",
    fill="#FFFFFF",
    font=("Montserrat Medium", 10 * -1)
)

canvas.create_text(
    64.0,
    136.0,
    anchor="nw",
    text="Path 1:",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

canvas.create_rectangle(
    60.0,
    156.0,
    551.0,
    176.0,
    fill="#FFFFFF",
    outline="")

path1=canvas.create_text(
    62.0,
    160.0,
    anchor="nw",
    text=f"{trimpath1}",
    fill="#000000",
    font=("Montserrat Bold", 10 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: choose_file(1),
    relief="flat"
)
button_1.place(
    x=556.0,
    y=154.0,
    width=25.0,
    height=25.0
)

canvas.create_text(
    63.0,
    196.0,
    anchor="nw",
    text="Path 2:",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

canvas.create_rectangle(
    60.0,
    216.0,
    551.0,
    236.0,
    fill="#FFFFFF",
    outline="")

path2=canvas.create_text(
    62.0,
    220.0,
    anchor="nw",
    text=f"{trimpath2}",
    fill="#000000",
    font=("Montserrat Bold", 10 * -1)
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: choose_file(2),
    relief="flat"
)
button_2.place(
    x=556.0,
    y=212.0,
    width=25.0,
    height=25.0
)

canvas.create_text(
    62.0,
    239.0,
    anchor="nw",
    text="Enter the time you usually use the distracting programs: (Ex: 18:30)",
    fill="#FFFFFF",
    font=("Montserrat Regular", 13 * -1)
)

canvas.create_text(
    73.0,
    256.0,
    anchor="nw",
    text="HH",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

entry_1 = Text(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0,
    validate="key",
    validatecommand=(vcmd, '%S')
)
entry_1.place(
    x=62.0,
    y=274.0,
    width=45.0,
    height=18.0
)

canvas.create_text(
    116.0,
    274.0,
    anchor="nw",
    text=":",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

canvas.create_text(
    138.0,
    256.0,
    anchor="nw",
    text="MM",
    fill="#FFFFFF",
    font=("Montserrat Medium", 13 * -1)
)

entry_2 = Text(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0,
    validate="key",
    validatecommand=(vcmd, '%S')
)
entry_2.place(
    x=127.0,
    y=274.0,
    width=45.0,
    height=18.0
)

canvas.create_text(
    62.0,
    323.0,
    anchor="nw",
    text="DO NOT INSERT PATHS TO IMPORTANT/CRUCIAL PROGRAMS!",
    fill="#FF0000",
    font=("Montserrat Bold", 10 * -1)
)

canvas.create_text(
    62.0,
    337.0,
    anchor="nw",
    text="NOT RECOMMENDED TO ADD GOOGLE CHROME OR OTHER WEB BROWSERS IN HERE!",
    fill="#FF0000",
    font=("Montserrat Bold", 10 * -1)
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: complete(),
    relief="flat"
)
button_3.place(
    x=579.0,
    y=321.0,
    width=75.0,
    height=16.0
)

canvas.create_rectangle(
    0.0,
    11.0,
    50.0,
    437.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    683.0,
    11.0,
    765.0,
    437.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    43.0,
    0.0,
    851.0,
    45.0,
    fill="#0C679B",
    outline="")

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    32.0,
    199.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    701.0,
    227.0,
    image=image_image_4
)

canvas.create_rectangle(
    48.0,
    362.0,
    765.0,
    415.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    43.0,
    373.0,
    136.0,
    415.0,
    fill="#0C679B",
    outline="")

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    367.0,
    28.0,
    image=image_image_5
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    376.0,
    375.0,
    image=image_image_6
)

# Create the initial canvas image
image_index = 0
bot_image_index = 0

# Top bar animation
top_image = canvas.create_image(367.0, 28.0, image=top_preloaded_images[image_index])

canvas.tag_bind(top_image, "<ButtonPress-1>", start_move)
canvas.tag_bind(top_image, "<B1-Motion>", move_window)

# Bottom bar animation
bottom_image = canvas.create_image(376.0, 375.0, image=bottom_preloaded_images[bot_image_index])


def update_images():
    global image_index, bot_image_index

    image_index = (image_index + 1) % len(top_preloaded_images)
    top_img = top_preloaded_images[image_index]
    canvas.itemconfig(top_image, image=top_img)
    canvas.top_img = top_img

    bot_image_index = (bot_image_index + 1) % len(bottom_preloaded_images)
    bot_img = bottom_preloaded_images[bot_image_index]
    canvas.itemconfig(bottom_image, image=bot_img)
    canvas.bot_img = bot_img

    window.after(1000 // 24, update_images)

# Start the animation
update_images()

window.resizable(False, False)
window.mainloop()
