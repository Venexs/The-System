
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label
import subprocess
import threading
import random
import cv2
import json
from PIL import Image, ImageTk
import time
import csv
import sys
import os
from supabase import create_client
from infisical_client import ClientSettings, InfisicalClient, GetSecretOptions, AuthenticationOptions, UniversalAuthMethod

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.online
import thesystem.system

client = InfisicalClient(ClientSettings(
    auth=AuthenticationOptions(
        universal_auth=UniversalAuthMethod(
            client_id="0fa8dbf8-92ee-4889-bd48-1b5dd2d22e87",
            client_secret="a2c9a58bda26c914e333e6c0f7c35e019b30c3afa67b5dc8419a142ee8b2aec8",
        )
    )
))


def get_url():
    # access value
    name = client.getSecret(options=GetSecretOptions(
        environment="dev",
        project_id="a7b312a2-feb6-42bc-92cb-387e37463076",
        secret_name="SUPABASE_URL"
    ))
    return f"{name.secret_value}"
def get_key():
    # access value
    name = client.getSecret(options=GetSecretOptions(
        environment="dev",
        project_id="a7b312a2-feb6-42bc-92cb-387e37463076",
        secret_name="SUPABASE_KEY"
    ))
    return f"{name.secret_value}"

URL = "https://smewvswweqnpwzngdtco.supabase.co"
KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNtZXd2c3d3ZXFucHd6bmdkdGNvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQyMDY2NjcsImV4cCI6MjA0OTc4MjY2N30.0SSN0bbwzFMCGC47XUuwqyKfF__Zikm_rJHqXWf78PU"

supabase = create_client(URL, KEY)

SESSION_FILE = "Files/Data/session.json"

def load_session():
    """Load session data from the session file."""
    if os.path.exists(SESSION_FILE) and os.path.getsize(SESSION_FILE) > 0:
        with open(SESSION_FILE, "r") as f:
            session_data = json.load(f)
            if all(key in session_data for key in ["access_token", "refresh_token", "expires_in"]):
                return session_data

session = load_session()

current_dir = os.path.dirname(os.path.abspath(__file__))

project_root = os.path.abspath(os.path.join(current_dir, '../../'))

sys.path.insert(0, project_root)

import thesystem.online
import thesystem.system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def make_window_transparent(window):
    window.wm_attributes('-transparentcolor', "#0C679B")

def center_window(root, width, height):
    # Get screen width and height
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    
    # Calculate position x, y to center the window
    x = (screen_width - width) // 2
    y = (screen_height - height) // 2
    
    # Set the dimensions of the window and the position
    root.geometry(f'{width}x{height}+{x}+{y}')

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root


def ex_close(eve):
    threading.Thread(target=thesystem.system.fade_out, args=(window, 0.8)).start()
    subprocess.Popen(['python', 'Files/Mod/default/sfx_close.py'])
    thesystem.system.animate_window_close(window, initial_height, window_width, step=20, delay=1)

    


window = Tk()

initial_height = 0
target_height = 592
window_width = 934

window.geometry(f"{window_width}x{initial_height}")
thesystem.system.animate_window_open(window, target_height, window_width, step=60, delay=1)

#center_window(window,window_width,target_height)
subprocess.Popen(['python', 'Files/Mod/default/sfx.py'])
window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)
make_window_transparent(window)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 592,
    width = 934,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    731.0,
    384.0,
    image=image_image_1
)

with open("Files/Mod/presets.json", 'r') as pres_file:
    pres_file_data=json.load(pres_file)
    video_path=pres_file_data["Anime"]["Video"]
player = thesystem.system.VideoPlayer(canvas, video_path, 430.0, 263.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    471.0,
    308.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    236.0,
    113.0,
    image=image_image_3
)


user_id = thesystem.online.get_current_user_id(supabase_client=supabase, session=session)


button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_1.place(
    x=759.0,
    y=73.0,
    width=25.0,
    height=25.0
)

canvas.create_rectangle(
    33.0,
    7.0,
    906.0,
    45.0,
    fill="#333333",
    outline="")

canvas.create_rectangle(
    0.0,
    0.0,
    336.0,
    50.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    0.0,
    541.0,
    934.0,
    592.0,
    fill="#0C679B",
    outline="")

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    70.0,
    313.0,
    image=image_image_8
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    865.0,
    325.0,
    image=image_image_9
)

canvas.create_rectangle(
    235.0,
    0.0,
    934.0,
    69.0,
    fill="#0C679B",
    outline="")

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    452.0,
    47.0,
    image=image_image_10
)

canvas.tag_bind(image_10, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_10, "<B1-Motion>", move_window)

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    458.0,
    556.0,
    image=image_image_11
)


image_image_28 = PhotoImage(
    file=relative_to_assets("image_28.png"))
image_28 = canvas.create_image(
    233.0,
    178.0,
    image=image_image_28
)

entry_1 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=233.0,
    y=194.0,
    width=427.0,
    height=23.0
)



image_image_30 = PhotoImage(
    file=relative_to_assets("image_30.png"))
image_30 = canvas.create_image(
    250.0,
    280.0,
    image=image_image_30
)

entry_3 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=233.0,
    y=308.0,
    width=427.0,
    height=23.0
)



SESSION_FILE = "Files/Data/session.json"

# Save session to a JSON file
def save_session_to_file(session_data):
    with open(SESSION_FILE, "w") as f:
        json.dump(session_data, f)
    print(f"Session saved to {SESSION_FILE}")

# Load session from the JSON file
def load_session_from_file():
    if os.path.exists(SESSION_FILE):
        with open(SESSION_FILE, "r") as f:
            session_data = json.load(f)
        print(f"Session loaded from {SESSION_FILE}")
        return session_data
    else:
        print(f"No session file found at {SESSION_FILE}")
    return None

def Signin():
    email = entry_1.get()
    password = entry_3.get()
    try:
        response = supabase.auth.sign_in_with_password(
            {"email": email, "password": password}
        )
        if response and response.session:
            # Access the session data
            session_data = {
                "access_token": response.session.access_token,
                "refresh_token": response.session.refresh_token,
                "expires_in": response.session.expires_in,
            }

            # Save session data to the file
            save_session_to_file(session_data)
            # Proceed with further actions
            subprocess.Popen(['python', os.path.join(project_root, 'Logs/background.py')])
            subprocess.Popen(['python', os.path.join(project_root, 'gui.py')])
            ex_close(window)
        else:
            print("Sign-in failed.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

def SignUp():
    subprocess.Popen(["python", "Logs/Sign up/gui.py"])
    ex_close(window)


image_image_57 = PhotoImage(
    file=relative_to_assets("button_2.png"))

# Create the button
button = Button(
    image=image_image_57, 
    borderwidth=0, 
    highlightthickness=0,
    bg="#0C679B",
    command=Signin
)

button.place(x=233.0, y=356.0) 


button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))

# Create the button
button1 = Button(
    image=button_image_3, 
    borderwidth=0, 
    highlightthickness=0,
    bg="#0C679B",
    command=SignUp
)

button1.place(x=440.0, y=356.0) 



window.resizable(False, False)
window.mainloop()
