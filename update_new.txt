import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
import threading
import requests
import pandas as pd
from packaging import version
import zipfile
import shutil
import os
from datetime import datetime
import time

# --- CONFIGURATION ---
github_csv_url = "https://raw.githubusercontent.com/Venexs/The-System/refs/heads/Update_RAW/version.csv"
local_csv_path = "version.csv"
repo_zip_url = "https://github.com/Venexs/The-System/archive/refs/heads/Update_RAW.zip"
target_directory = "."
temp_zip_path = "__temp_download__.zip"

# === GUI SETUP ===
root = tk.Tk()
root.title("System SL Updater")
root.geometry("550x350")
root.configure(bg="#1e1e1e")

canvas = tk.Canvas(root, width=360, height=60, bg="#2e2e2e", highlightthickness=0)
canvas.pack(pady=(10, 5))
canvas.create_text(180, 30, text="üõ†Ô∏è System SL Updater", font=("Segoe UI", 16), fill="white")

status_label = tk.Label(root, text="Idle...", font=("Segoe UI", 12), bg="#1e1e1e", fg="#c0c0c0")
status_label.pack(pady=5)

progress = ttk.Progressbar(root, length=300, mode='determinate')
progress.pack(pady=5)

speed_label = tk.Label(root, text="Speed: 0 MB/s", font=("Segoe UI", 10), bg="#1e1e1e", fg="#808080")
speed_label.pack(pady=(0, 5))

log_text = tk.Text(root, height=6, width=46, bg="#1e1e1e", fg="#c0c0c0", font=("Consolas", 9))
log_text.pack(pady=5)
log_text.insert(tk.END, "[Log Initialized]\n")
log_text.config(state=tk.DISABLED)

def log(msg):
    status_label.config(text=msg)
    root.update_idletasks()
    print(msg)
    log_text.config(state=tk.NORMAL)
    log_text.insert(tk.END, msg + "\n")
    log_text.see(tk.END)
    log_text.config(state=tk.DISABLED)

def github_blob_to_raw(url):
    return url.replace("github.com", "raw.githubusercontent.com").replace("/blob/", "/")

def create_backup(source_dir, backup_dir="Update Backup", bac=False):
    if bac:
        if os.path.exists(backup_dir):
            for file in os.listdir(backup_dir):
                if file.endswith(".zip"):
                    try:
                        os.remove(os.path.join(backup_dir, file))
                        log(f"Deleted old backup: {file}")
                    except Exception as e:
                        log(f"Failed to delete {file}: {e}")

        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        os.makedirs(backup_dir, exist_ok=True)
        backup_path = os.path.join(backup_dir, f"backup_{timestamp}.zip")

        log(f"Creating backup......")

        def zipdir(path, ziph):
            for root_dir, dirs, files in os.walk(path):
                dirs[:] = [d for d in dirs if d not in ['__pycache__', '.git', 'venv', 'Update Backup']]
                for file in files:
                    full_path = os.path.join(root_dir, file)
                    rel_path = os.path.relpath(full_path, path)
                    ziph.write(full_path, rel_path)

        with zipfile.ZipFile(backup_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            zipdir(source_dir, zipf)

        log("Backup complete.")

def get_remote_version(raw_csv_url):
    try:
        df = pd.read_csv(raw_csv_url, header=None)
        if df.empty:
            raise ValueError("Remote CSV is empty.")
        return str(df.iloc[0, 0]).strip()
    except Exception as e:
        log(f"Error reading remote CSV: {e}")
        return None

def get_local_version(local_path):
    try:
        df = pd.read_csv(local_path, header=None)
        if df.empty:
            raise ValueError("Local CSV is empty.")
        return str(df.iloc[0, 0]).strip()
    except Exception as e:
        log(f"Error reading local CSV: {e}")
        return None

def is_file_locked(filepath):
    try:
        with open(filepath, 'a'):
            return False
    except IOError:
        return True

def safe_move(src, dst):
    for _ in range(3):
        if not is_file_locked(src):
            try:
                shutil.move(src, dst)
                return True
            except Exception as e:
                log(f"Error moving {src} to {dst}: {e}")
        log(f"Retrying move for: {src}")
        time.sleep(1)
    log(f"Failed to move: {src}")
    return False

def force_remove(path):
    if os.path.isdir(path):
        for _ in range(3):
            try:
                shutil.rmtree(path, ignore_errors=False)
                return
            except PermissionError:
                log(f"Retrying delete of folder: {path}")
                time.sleep(1)
    elif os.path.exists(path):
        for _ in range(3):
            try:
                os.remove(path)
                return
            except PermissionError:
                log(f"Retrying delete of file: {path}")
                time.sleep(1)

def download_range(url, start, end, index, results):
    headers = {'Range': f'bytes={start}-{end}'}
    r = requests.get(url, headers=headers, timeout=30)
    r.raise_for_status()
    results[index] = r.content

def download_and_replace(zip_url, destination, num_threads=4):
    log("‚¨áÔ∏è Starting download...")
    try:
        head = requests.head(zip_url)
        total_size = int(head.headers.get('Content-Length', 0))

        if total_size:
            log(f"Total size: {total_size / (1024**2):.2f} MB")
            chunk_size = total_size // num_threads

            threads = []
            results = [None] * num_threads

            for i in range(num_threads):
                start = i * chunk_size
                end = total_size - 1 if i == num_threads - 1 else (start + chunk_size - 1)
                t = threading.Thread(target=download_range, args=(zip_url, start, end, i, results))
                threads.append(t)
                t.start()

            for t in threads:
                t.join()

            with open(temp_zip_path, 'wb') as f:
                for part in results:
                    f.write(part)

        else:
            log("Falling back to single-threaded download...")
            r = requests.get(zip_url, stream=True)
            r.raise_for_status()
            with open(temp_zip_path, 'wb') as f:
                downloaded = 0
                start_time = time.time()
                for chunk in r.iter_content(chunk_size=65536):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        elapsed = time.time() - start_time
                        speed = (downloaded / 1024 / 1024) / elapsed if elapsed > 0 else 0
                        progress['value'] = min(100, (downloaded / 1e6))
                        speed_label.config(text=f"Speed: {speed:.2f} MB/s")
                        root.update_idletasks()

        progress['value'] = 100
        root.update_idletasks()
        log("‚úÖ Download complete. Extracting...")

        temp_dir = "__temp_extract__"
        with zipfile.ZipFile(temp_zip_path, 'r') as zip_ref:
            zip_ref.extractall(temp_dir)

        extracted_folder = os.path.join(temp_dir, os.listdir(temp_dir)[0])

        for item in os.listdir(extracted_folder):
            s = os.path.join(extracted_folder, item)
            d = os.path.join(destination, item)

            if os.path.exists(d):
                if os.path.isdir(s):
                    for root_dir, dirs, files in os.walk(s):
                        rel_path = os.path.relpath(root_dir, s)
                        target_subdir = os.path.join(d, rel_path)
                        os.makedirs(target_subdir, exist_ok=True)
                        for file in files:
                            src_file = os.path.join(root_dir, file)
                            dst_file = os.path.join(target_subdir, file)
                            if os.path.exists(dst_file):
                                force_remove(dst_file)
                            safe_move(src_file, dst_file)
                else:
                    force_remove(d)
                    safe_move(s, d)
            else:
                safe_move(s, d)

        os.remove(temp_zip_path)
        shutil.rmtree(temp_dir, ignore_errors=True)
        log("‚úÖ Update installed.")

    except Exception as e:
        log(f"Download error: {e}")
        raise

def perform_update():
    try:
        log("üîç Checking for updates...")
        raw_url = github_blob_to_raw(github_csv_url)
        remote_ver = get_remote_version(raw_url)
        local_ver = get_local_version(local_csv_path)

        if remote_ver is None or local_ver is None:
            log("Could not read one or both version files.")
            return

        log(f"Local version: {local_ver}")
        log(f"Remote version: {remote_ver}")

        if version.parse(remote_ver) > version.parse(local_ver):
            log("Newer version found on GitHub.")
            create_backup(target_directory)
            download_and_replace(repo_zip_url, target_directory)
            with open(local_csv_path, "w") as f:
                f.write(remote_ver)
            log("Local version file updated.")
        else:
            log("You already have the latest version.")
    except Exception as e:
        messagebox.showerror("Error", f"Update failed:\n{e}")
        log("‚ùå Update failed")

def start_update_thread():
    threading.Thread(target=perform_update, daemon=True).start()

update_btn = tk.Button(root, text="Start Update", command=start_update_thread, font=("Segoe UI", 12))
update_btn.pack(pady=10)

root.resizable(False,False)
root.mainloop()
